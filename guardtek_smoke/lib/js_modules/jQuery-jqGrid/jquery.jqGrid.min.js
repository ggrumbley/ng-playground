(function ($) { "use strict"; $.jgrid = $.jgrid || {}; $.extend($.jgrid, { version: "4.5.2", htmlDecode: function (a) { return a && (a === "&nbsp;" || a === "&#160;" || a.length === 1 && a.charCodeAt(0) === 160) ? "" : !a ? a : String(a).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&") }, htmlEncode: function (a) { return !a ? a : String(a).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") }, format: function (a) { var b = $.makeArray(arguments).slice(1); if (a == null) a = ""; return a.replace(/\{(\d+)\}/g, function (c, a) { return b[a] }) }, msie: navigator.appName === "Microsoft Internet Explorer", msiever: function () { var a = -1, c = navigator.userAgent, b = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"); if (b.exec(c) != null) a = parseFloat(RegExp.$1); return a }, getCellIndex: function (b) { var a = $(b); if (a.is("tr")) return -1; a = (!a.is("td") && !a.is("th") ? a.closest("td,th") : a)[0]; return $.jgrid.msie ? $.inArray(a, a.parentNode.cells) : a.cellIndex }, stripHtml: function (a) { a = String(a); var b = /<("[^"]*"|'[^']*'|[^'">])*>/gi; if (a) { a = a.replace(b, ""); return a && a !== "&nbsp;" && a !== "&#160;" ? a.replace(/\"/g, "'") : "" } return a }, stripPref: function (a, b) { var c = $.type(a); if (c === "string" || c === "number") { a = String(a); b = a !== "" ? String(b).replace(String(a), "") : b } return b }, parse: function (jsonString) { var js = jsonString; if (js.substr(0, 9) === "while(1);") js = js.substr(9); if (js.substr(0, 2) === "/*") js = js.substr(2, js.length - 4); if (!js) js = "{}"; return $.jgrid.useJSON === true && typeof JSON === "object" && typeof JSON.parse === "function" ? JSON.parse(js) : eval("(" + js + ")") }, parseDate: function (g, b, h, d) { var A = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g, z = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, y = /[^-+\dA-Z]/g, x = new RegExp("^/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)/$"), j = typeof b === "string" ? b.match(x) : null, i = function (a, b) { a = String(a); b = parseInt(b, 10) || 2; while (a.length < b) a = "0" + a; return a }, a = { m: 1, d: 1, y: 1970, h: 0, i: 0, s: 0, u: 0 }, e = 0, f, c, w, u = function (b, a) { if (b === 0) { if (a === 12) a = 0 } else if (a !== 12) a += 12; return a }; if (d === undefined) d = $.jgrid.formatter.date; if (d.parseRe === undefined) d.parseRe = /[Tt\\\/:_;.,\t\s-]/; if (d.masks.hasOwnProperty(g)) g = d.masks[g]; if (b && b != null) if (!isNaN(+b) && String(g).toLowerCase() === "u") e = new Date(parseFloat(b) * 1e3); else if (b.constructor === Date) e = b; else if (j !== null) { e = new Date(parseInt(j[1], 10)); if (j[3]) { var r = Number(j[5]) * 60 + Number(j[6]); r *= j[4] === "-" ? 1 : -1; r -= e.getTimezoneOffset(); e.setTime(Number(Number(e) + r * 6e4)) } } else { b = String(b).replace(/\\T/g, "T").replace(/\\t/, "t").split(d.parseRe); g = g.replace(/\\T/g, "T").replace(/\\t/, "t").split(d.parseRe); for (c = 0, w = g.length; c < w; c++) { if (g[c] === "M") { f = $.inArray(b[c], d.monthNames); if (f !== -1 && f < 12) { b[c] = f + 1; a.m = b[c] } } if (g[c] === "F") { f = $.inArray(b[c], d.monthNames, 12); if (f !== -1 && f > 11) { b[c] = f + 1 - 12; a.m = b[c] } } if (g[c] === "a") { f = $.inArray(b[c], d.AmPm); if (f !== -1 && f < 2 && b[c] === d.AmPm[f]) { b[c] = f; a.h = u(b[c], a.h) } } if (g[c] === "A") { f = $.inArray(b[c], d.AmPm); if (f !== -1 && f > 1 && b[c] === d.AmPm[f]) { b[c] = f - 2; a.h = u(b[c], a.h) } } if (g[c] === "g") a.h = parseInt(b[c], 10); if (b[c] !== undefined) a[g[c].toLowerCase()] = parseInt(b[c], 10) } if (a.f) a.m = a.f; if (a.m === 0 && a.y === 0 && a.d === 0) return "&#160;"; a.m = parseInt(a.m, 10) - 1; var n = a.y; if (n >= 70 && n <= 99) a.y = 1900 + a.y; else if (n >= 0 && n <= 69) a.y = 2e3 + a.y; e = new Date(a.y, a.m, a.d, a.h, a.i, a.s, a.u) } else e = new Date(a.y, a.m, a.d, a.h, a.i, a.s, a.u); if (h === undefined) return e; if (d.masks.hasOwnProperty(h)) h = d.masks[h]; else if (!h) h = "Y-m-d"; var k = e.getHours(), B = e.getMinutes(), o = e.getDate(), l = e.getMonth() + 1, s = e.getTimezoneOffset(), C = e.getSeconds(), D = e.getMilliseconds(), q = e.getDay(), m = e.getFullYear(), p = (q + 6) % 7 + 1, t = (new Date(m, l - 1, o) - new Date(m, 0, 1)) / 864e5, v = { d: i(o), D: d.dayNames[q], j: o, l: d.dayNames[q + 7], N: p, S: d.S(o), w: q, z: t, W: p < 5 ? Math.floor((t + p - 1) / 7) + 1 : Math.floor((t + p - 1) / 7) || ((new Date(m - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52), F: d.monthNames[l - -11], m: i(l), M: d.monthNames[l - 1], n: l, t: "?", L: "?", o: "?", Y: m, y: String(m).substring(2), a: k < 12 ? d.AmPm[0] : d.AmPm[1], A: k < 12 ? d.AmPm[2] : d.AmPm[3], B: "?", g: k % 12 || 12, G: k, h: i(k % 12 || 12), H: i(k), i: i(B), s: i(C), u: D, e: "?", I: "?", O: (s > 0 ? "-" : "+") + i(Math.floor(Math.abs(s) / 60) * 100 + Math.abs(s) % 60, 4), P: "?", T: (String(e).match(z) || [""]).pop().replace(y, ""), Z: "?", c: "?", r: "?", U: Math.floor(e / 1e3) }; return h.replace(A, function (a) { return v.hasOwnProperty(a) ? v[a] : a.substring(1) }) }, jqID: function (a) { return String(a).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&") }, guid: 1, uidPref: "jqg", randId: function (a) { return (a || $.jgrid.uidPref) + $.jgrid.guid++ }, getAccessor: function (c, b) { var a, f, d = [], e; if (typeof b === "function") return b(c); a = c[b]; if (a === undefined) try { if (typeof b === "string") d = b.split("."); e = d.length; if (e) { a = c; while (a && e--) { f = d.shift(); a = a[f] } } } catch (g) { } return a }, getXmlData: function (c, b, e) { var d, a = typeof b === "string" ? b.match(/^(.*)\[(\w+)\]$/) : null; if (typeof b === "function") return b(c); if (a && a[2]) return a[1] ? $(a[1], c).attr(a[2]) : $(c).attr(a[2]); d = $(b, c); return e ? d : d.length > 0 ? $(d).text() : undefined }, cellWidth: function () { var a = $("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;'></td></tr></table></div>"), b = a.appendTo("body").find("td").width(); a.remove(); return b !== 5 }, cell_width: true, ajaxOptions: {}, from: function (source) { var QueryObject = function (d, q) { if (typeof d === "string") d = $.data(d); var self = this, _data = d, _usecase = true, _trim = false, _query = q, _stripNum = /[\$,%]/g, _lastCommand = null, _lastField = null, _orDepth = 0, _negate = false, _queuedOperator = "", _sorting = [], _useProperties = true; if (typeof d === "object" && d.push) { if (d.length > 0) if (typeof d[0] !== "object") _useProperties = false; else _useProperties = true } else throw "data provides is not an array"; this._hasData = function () { return _data === null ? false : _data.length === 0 ? false : true }; this._getStr = function (b) { var a = []; _trim && a.push("jQuery.trim("); a.push("String(" + b + ")"); _trim && a.push(")"); !_usecase && a.push(".toLowerCase()"); return a.join("") }; this._strComp = function (a) { return typeof a === "string" ? ".toString()" : "" }; this._group = function (a, b) { return { field: a.toString(), unique: b, items: []} }; this._toStr = function (a) { if (_trim) a = $.trim(a); a = a.toString().replace(/\\/g, "\\\\").replace(/\"/g, '\\"'); return _usecase ? a : a.toLowerCase() }; this._funcLoop = function (b) { var a = []; $.each(_data, function (d, c) { a.push(b(c)) }); return a }; this._append = function (b) { var a; if (_query === null) _query = ""; else _query += _queuedOperator === "" ? " && " : _queuedOperator; for (a = 0; a < _orDepth; a++) _query += "("; if (_negate) _query += "!"; _query += "(" + b + ")"; _negate = false; _queuedOperator = ""; _orDepth = 0 }; this._setCommand = function (b, a) { _lastCommand = b; _lastField = a }; this._resetNegate = function () { _negate = false }; this._repeatCommand = function (a, b) { return _lastCommand === null ? self : a !== null && b !== null ? _lastCommand(a, b) : _lastField === null ? _lastCommand(a) : !_useProperties ? _lastCommand(a) : _lastCommand(_lastField, a) }; this._equals = function (a, b) { return self._compare(a, b, 1) === 0 }; this._compare = function (a, b, c) { var d = Object.prototype.toString; if (c === undefined) c = 1; if (a === undefined) a = null; if (b === undefined) b = null; if (a === null && b === null) return 0; if (a === null && b !== null) return 1; if (a !== null && b === null) return -1; if (d.call(a) === "[object Date]" && d.call(b) === "[object Date]") return a < b ? -c : a > b ? c : 0; if (!_usecase && typeof a !== "number" && typeof b !== "number") { a = String(a); b = String(b) } return a < b ? -c : a > b ? c : 0 }; this._performSort = function () { if (_sorting.length === 0) return; _data = self._doSort(_data, 0) }; this._doSort = function (k, a) { var j = _sorting[a].by, i = _sorting[a].dir, h = _sorting[a].type, g = _sorting[a].datefmt; if (a === _sorting.length - 1) return self._getOrder(k, j, i, h, g); a++; for (var f = self._getGroup(k, j, i, h, g), e = [], b, c, d = 0; d < f.length; d++) { c = self._doSort(f[d].items, a); for (b = 0; b < c.length; b++) e.push(c[b]) } return e }; this._getOrder = function (f, h, m, a, k) { var g = [], e = [], j = m === "a" ? 1 : -1, i, c, d, b; if (a === undefined) a = "text"; if (a === "float" || a === "number" || a === "currency" || a === "numeric") b = function (b) { var a = parseFloat(String(b).replace(_stripNum, "")); return isNaN(a) ? 0 : a }; else if (a === "int" || a === "integer") b = function (a) { return a ? parseFloat(String(a).replace(_stripNum, "")) : 0 }; else if (a === "date" || a === "datetime") b = function (a) { return $.jgrid.parseDate(k, a).getTime() }; else if ($.isFunction(a)) b = a; else b = function (a) { a = a ? $.trim(String(a)) : ""; return _usecase ? a : a.toLowerCase() }; $.each(f, function (d, a) { c = h !== "" ? $.jgrid.getAccessor(a, h) : a; if (c === undefined) c = ""; c = b(c, a); e.push({ vSort: c, index: d }) }); e.sort(function (a, b) { a = a.vSort; b = b.vSort; return self._compare(a, b, j) }); d = 0; var l = f.length; while (d < l) { i = e[d].index; g.push(f[i]); d++ } return g }; this._getGroup = function (f, d, i, h, g) { var c = [], a = null, e = null, b; $.each(self._getOrder(f, d, i, h, g), function (g, f) { b = $.jgrid.getAccessor(f, d); if (b == null) b = ""; if (!self._equals(e, b)) { e = b; a !== null && c.push(a); a = self._group(d, b) } a.items.push(f) }); a !== null && c.push(a); return c }; this.ignoreCase = function () { _usecase = false; return self }; this.useCase = function () { _usecase = true; return self }; this.trim = function () { _trim = true; return self }; this.noTrim = function () { _trim = false; return self }; this.execute = function () { var match = _query, results = []; if (match === null) return self; $.each(_data, function () { eval(match) && results.push(this) }); _data = results; return self }; this.data = function () { return _data }; this.select = function (b) { self._performSort(); if (!self._hasData()) return []; self.execute(); if ($.isFunction(b)) { var a = []; $.each(_data, function (d, c) { a.push(b(c)) }); return a } return _data }; this.hasMatch = function () { if (!self._hasData()) return false; self.execute(); return _data.length > 0 }; this.andNot = function (a, b, c) { _negate = !_negate; return self.and(a, b, c) }; this.orNot = function (a, b, c) { _negate = !_negate; return self.or(a, b, c) }; this.not = function (a, b, c) { return self.andNot(a, b, c) }; this.and = function (a, b, c) { _queuedOperator = " && "; return a === undefined ? self : self._repeatCommand(a, b, c) }; this.or = function (a, b, c) { _queuedOperator = " || "; return a === undefined ? self : self._repeatCommand(a, b, c) }; this.orBegin = function () { _orDepth++; return self }; this.orEnd = function () { if (_query !== null) _query += ")"; return self }; this.isNot = function (a) { _negate = !_negate; return self.is(a) }; this.is = function (a) { self._append("this." + a); self._resetNegate(); return self }; this._compareValues = function (f, e, d, h, c) { var b; if (_useProperties) b = "jQuery.jgrid.getAccessor(this,'" + e + "')"; else b = "this"; if (d === undefined) d = null; var a = d, g = c.stype === undefined ? "text" : c.stype; if (d !== null) switch (g) { case "int": case "integer": a = isNaN(Number(a)) || a === "" ? "0" : a; b = "parseInt(" + b + ",10)"; a = "parseInt(" + a + ",10)"; break; case "float": case "number": case "numeric": a = String(a).replace(_stripNum, ""); a = isNaN(Number(a)) || a === "" ? "0" : a; b = "parseFloat(" + b + ")"; a = "parseFloat(" + a + ")"; break; case "date": case "datetime": a = String($.jgrid.parseDate(c.newfmt || "Y-m-d", a).getTime()); b = 'jQuery.jgrid.parseDate("' + c.srcfmt + '",' + b + ").getTime()"; break; default: b = self._getStr(b); a = self._getStr('"' + self._toStr(a) + '"') } self._append(b + " " + h + " " + a); self._setCommand(f, e); self._resetNegate(); return self }; this.equals = function (a, c, b) { return self._compareValues(self.equals, a, c, "==", b) }; this.notEquals = function (a, c, b) { return self._compareValues(self.equals, a, c, "!==", b) }; this.isNull = function (a, c, b) { return self._compareValues(self.equals, a, null, "===", b) }; this.greater = function (a, c, b) { return self._compareValues(self.greater, a, c, ">", b) }; this.less = function (a, c, b) { return self._compareValues(self.less, a, c, "<", b) }; this.greaterOrEquals = function (a, c, b) { return self._compareValues(self.greaterOrEquals, a, c, ">=", b) }; this.lessOrEquals = function (a, c, b) { return self._compareValues(self.lessOrEquals, a, c, "<=", b) }; this.startsWith = function (b, a) { var d = a == null ? b : a, c = _trim ? $.trim(d.toString()).length : d.toString().length; if (_useProperties) self._append(self._getStr("jQuery.jgrid.getAccessor(this,'" + b + "')") + ".substr(0," + c + ") == " + self._getStr('"' + self._toStr(a) + '"')); else { c = _trim ? $.trim(a.toString()).length : a.toString().length; self._append(self._getStr("this") + ".substr(0," + c + ") == " + self._getStr('"' + self._toStr(b) + '"')) } self._setCommand(self.startsWith, b); self._resetNegate(); return self }; this.endsWith = function (a, b) { var d = b == null ? a : b, c = _trim ? $.trim(d.toString()).length : d.toString().length; if (_useProperties) self._append(self._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + ".substr(" + self._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + ".length-" + c + "," + c + ') == "' + self._toStr(b) + '"'); else self._append(self._getStr("this") + ".substr(" + self._getStr("this") + '.length-"' + self._toStr(a) + '".length,"' + self._toStr(a) + '".length) == "' + self._toStr(a) + '"'); self._setCommand(self.endsWith, a); self._resetNegate(); return self }; this.contains = function (a, b) { if (_useProperties) self._append(self._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + '.indexOf("' + self._toStr(b) + '",0) > -1'); else self._append(self._getStr("this") + '.indexOf("' + self._toStr(a) + '",0) > -1'); self._setCommand(self.contains, a); self._resetNegate(); return self }; this.groupBy = function (d, c, b, a) { return !self._hasData() ? null : self._getGroup(_data, d, c, b, a) }; this.orderBy = function (d, a, b, c) { a = a == null ? "a" : $.trim(a.toString().toLowerCase()); if (b == null) b = "text"; if (c == null) c = "Y-m-d"; if (a === "desc" || a === "descending") a = "d"; if (a === "asc" || a === "ascending") a = "a"; _sorting.push({ by: d, dir: a, type: b, datefmt: c }); return self }; return self }; return new QueryObject(source, null) }, getMethod: function (a) { return this.getAccessor($.fn.jqGrid, a) }, extend: function (a) { $.extend($.fn.jqGrid, a); !this.no_legacy_api && $.fn.extend(a) } }); $.fn.jqGrid = function (a) { if (typeof a === "string") { var b = $.jgrid.getMethod(a); if (!b) throw "jqGrid - No such method: " + a; var c = $.makeArray(arguments).slice(1); return b.apply(this, c) } return this.each(function () { if (this.grid) return; var d = $.extend(true, { url: "", height: 150, page: 1, rowNum: 20, rowTotal: null, records: 0, pager: "", pgbuttons: true, pginput: true, colModel: [], rowList: [], colNames: [], sortorder: "asc", sortname: "", datatype: "xml", mtype: "GET", altRows: false, selarrrow: [], savedRow: [], shrinkToFit: true, xmlReader: {}, jsonReader: {}, subGrid: false, subGridModel: [], reccount: 0, lastpage: 0, lastsort: 0, selrow: null, beforeSelectRow: null, onSelectRow: null, onSortCol: null, ondblClickRow: null, onRightClickRow: null, onPaging: null, onSelectAll: null, onInitGrid: null, loadComplete: null, gridComplete: null, loadError: null, loadBeforeSend: null, afterInsertRow: null, beforeRequest: null, beforeProcessing: null, onHeaderClick: null, viewrecords: false, loadonce: false, multiselect: false, multikey: false, editurl: null, search: false, caption: "", hidegrid: true, hiddengrid: false, postData: {}, userData: {}, treeGrid: false, treeGridModel: "nested", treeReader: {}, treeANode: -1, ExpandColumn: null, tree_root_level: 0, prmNames: { page: "page", rows: "rows", sort: "sidx", order: "sord", search: "_search", nd: "nd", id: "id", oper: "oper", editoper: "edit", addoper: "add", deloper: "del", subgridid: "id", npage: null, totalrows: "totalrows" }, forceFit: false, gridstate: "visible", cellEdit: false, cellsubmit: "remote", nv: 0, loadui: "enable", toolbar: [false, ""], scroll: false, multiboxonly: false, deselectAfterSort: true, scrollrows: false, autowidth: false, scrollOffset: 18, cellLayout: 5, subGridWidth: 20, multiselectWidth: 20, gridview: false, rownumWidth: 25, rownumbers: false, pagerpos: "center", recordpos: "right", footerrow: false, userDataOnFooter: false, hoverrows: true, altclass: "ui-priority-secondary", viewsortcols: [false, "vertical", true], resizeclass: "", autoencode: false, remapColumns: [], ajaxGridOptions: {}, direction: "ltr", toppager: false, headertitles: false, scrollTimeout: 40, data: [], _index: {}, grouping: false, groupingView: { groupField: [], groupOrder: [], groupText: [], groupColumnShow: [], groupSummary: [], showSummaryOnHide: false, sortitems: [], sortnames: [], summary: [], summaryval: [], plusicon: "ui-icon-circlesmall-plus", minusicon: "ui-icon-circlesmall-minus", displayField: [] }, ignoreCase: false, cmTemplate: {}, idPrefix: "", multiSort: false }, $.jgrid.defaults, a || {}), b = this, c = { headers: [], cols: [], footers: [], dragStart: function (c, e, a) { this.resizing = { idx: c, startX: e.clientX, sOL: a[0] }; this.hDiv.style.cursor = "col-resize"; this.curGbox = $("#rs_m" + $.jgrid.jqID(d.id), "#gbox_" + $.jgrid.jqID(d.id)); this.curGbox.css({ display: "block", left: a[0], top: a[1], height: a[2] }); $(b).triggerHandler("jqGridResizeStart", [e, c]); $.isFunction(d.resizeStart) && d.resizeStart.call(b, e, c); document.onselectstart = function () { return false } }, dragMove: function (g) { if (this.resizing) { var a = g.clientX - this.resizing.startX, c = this.headers[this.resizing.idx], e = d.direction === "ltr" ? c.width + a : c.width - a, b, f; if (e > 33) { this.curGbox.css({ left: this.resizing.sOL + a }); if (d.forceFit === true) { b = this.headers[this.resizing.idx + d.nv]; f = d.direction === "ltr" ? b.width - a : b.width + a; if (f > 33) { c.newWidth = e; b.newWidth = f } } else { this.newWidth = d.direction === "ltr" ? d.tblwidth + a : d.tblwidth - a; c.newWidth = e } } } }, dragEnd: function () { this.hDiv.style.cursor = "default"; if (this.resizing) { var a = this.resizing.idx, c = this.headers[a].newWidth || this.headers[a].width; c = parseInt(c, 10); this.resizing = false; $("#rs_m" + $.jgrid.jqID(d.id)).css("display", "none"); d.colModel[a].width = c; this.headers[a].width = c; this.headers[a].el.style.width = c + "px"; this.cols[a].style.width = c + "px"; if (this.footers.length > 0) this.footers[a].style.width = c + "px"; if (d.forceFit === true) { c = this.headers[a + d.nv].newWidth || this.headers[a + d.nv].width; this.headers[a + d.nv].width = c; this.headers[a + d.nv].el.style.width = c + "px"; this.cols[a + d.nv].style.width = c + "px"; if (this.footers.length > 0) this.footers[a + d.nv].style.width = c + "px"; d.colModel[a + d.nv].width = c } else { d.tblwidth = this.newWidth || d.tblwidth; $("table:first", this.bDiv).css("width", d.tblwidth + "px"); $("table:first", this.hDiv).css("width", d.tblwidth + "px"); this.hDiv.scrollLeft = this.bDiv.scrollLeft; if (d.footerrow) { $("table:first", this.sDiv).css("width", d.tblwidth + "px"); this.sDiv.scrollLeft = this.bDiv.scrollLeft } } $(b).triggerHandler("jqGridResizeStop", [c, a]); $.isFunction(d.resizeStop) && d.resizeStop.call(b, c, a) } this.curGbox = null; document.onselectstart = function () { return true } }, populateVisible: function () { c.timer && clearTimeout(c.timer); c.timer = null; var k = $(c.bDiv).height(); if (!k) return; var e = $("table:first", c.bDiv), l, j; if (e[0].rows.length) try { l = e[0].rows[1]; j = l ? $(l).outerHeight() || c.prevRowHeight : c.prevRowHeight } catch (o) { j = c.prevRowHeight } if (!j) return; c.prevRowHeight = j; var n = d.rowNum, f = c.scrollTop = c.bDiv.scrollTop, i = Math.round(e.position().top) - f, h = i + e.height(), b = j * n, a, g, m; if (h < k && i <= 0 && (d.lastpage === undefined || parseInt((h + f + b - 1) / b, 10) <= d.lastpage)) { g = parseInt((k - h + b - 1) / b, 10); if (h >= 0 || g < 2 || d.scroll === true) { a = Math.round((h + f) / b) + 1; i = -1 } else i = 1 } if (i > 0) { a = parseInt(f / b, 10) + 1; g = parseInt((f + k) / b, 10) + 2 - a; m = true } if (g) { if (d.lastpage && (a > d.lastpage || d.lastpage === 1 || a === d.page && a === d.lastpage)) return; if (c.hDiv.loading) c.timer = setTimeout(c.populateVisible, d.scrollTimeout); else { d.page = a; if (m) { c.selectionPreserver(e[0]); c.emptyRows.call(e[0], false, false) } c.populate(g) } } }, scrollGrid: function (b) { if (d.scroll) { var a = c.bDiv.scrollTop; if (c.scrollTop === undefined) c.scrollTop = 0; if (a !== c.scrollTop) { c.scrollTop = a; c.timer && clearTimeout(c.timer); c.timer = setTimeout(c.populateVisible, d.scrollTimeout) } } c.hDiv.scrollLeft = c.bDiv.scrollLeft; if (d.footerrow) c.sDiv.scrollLeft = c.bDiv.scrollLeft; b && b.stopPropagation() }, selectionPreserver: function (a) { var b = a.p, d = b.selrow, c = b.selarrrow ? $.makeArray(b.selarrrow) : null, f = a.grid.bDiv.scrollLeft, e = function () { var g; b.selrow = null; b.selarrrow = []; if (b.multiselect && c && c.length > 0) for (g = 0; g < c.length; g++) c[g] !== d && $(a).jqGrid("setSelection", c[g], false, null); d && $(a).jqGrid("setSelection", d, false, null); a.grid.bDiv.scrollLeft = f; $(a).unbind(".selectionPreserver", e) }; $(a).bind("jqGridGridComplete.selectionPreserver", e) } }; if (this.tagName.toUpperCase() !== "TABLE") { alert("Element is not a table"); return } $(this).empty().attr("tabindex", "0"); this.p = d; this.p.useProp = !!$.fn.prop; var e, h; if (this.p.colNames.length === 0) for (e = 0; e < this.p.colModel.length; e++) this.p.colNames[e] = this.p.colModel[e].label || this.p.colModel[e].name; if (this.p.colNames.length !== this.p.colModel.length) { alert($.jgrid.errors.model); return } var p = $("<div class='ui-jqgrid-view'></div>"), M = $.jgrid.msie; b.p.direction = $.trim(b.p.direction.toLowerCase()); if ($.inArray(b.p.direction, ["ltr", "rtl"]) === -1) b.p.direction = "ltr"; h = b.p.direction; $(p).insertBefore(this); $(this).removeClass("scroll").appendTo(p); var w = $("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>"); $(w).attr({ id: "gbox_" + this.id, dir: h }).insertBefore(p); $(p).attr("id", "gview_" + this.id).appendTo(w); $("<div class='ui-widget-overlay jqgrid-overlay' id='lui_" + this.id + "'></div>").insertBefore(p); $("<div class='loading ui-state-default ui-state-active' id='load_" + this.id + "'>" + this.p.loadtext + "</div>").insertBefore(p); $(this).attr({ cellspacing: "0", cellpadding: "0", border: "0", role: "grid", "aria-multiselectable": !!this.p.multiselect, "aria-labelledby": "gbox_" + this.id }); var mb = ["shiftKey", "altKey", "ctrlKey"], n = function (a, b) { a = parseInt(a, 10); return isNaN(a) ? b || 0 : a }, u = function (i, l, h, k, n, m) { var d = b.p.colModel[i], j = d.align, e = 'style="', g = d.classes, o = d.name, f, a = []; if (j) e += "text-align:" + j + ";"; if (d.hidden === true) e += "display:none;"; if (l === 0) e += "width: " + c.headers[i].width + "px;"; else if (d.cellattr && $.isFunction(d.cellattr)) { f = d.cellattr.call(b, n, h, k, d, m); if (f && typeof f === "string") { f = f.replace(/style/i, "style").replace(/title/i, "title"); if (f.indexOf("title") > -1) d.title = false; if (f.indexOf("class") > -1) g = undefined; a = f.split(/[^-]style/); if (a.length === 2) { a[1] = $.trim(a[1].replace("=", "")); if (a[1].indexOf("'") === 0 || a[1].indexOf('"') === 0) a[1] = a[1].substring(1); e += a[1].replace(/'/gi, '"') } else e += '"' } } if (!a.length) { a[0] = ""; e += '"' } e += (g !== undefined ? ' class="' + g + '"' : "") + (d.title && h ? ' title="' + $.jgrid.stripHtml(h) + '"' : ""); e += ' aria-describedby="' + b.p.id + "_" + o + '"'; return e + a[0] }, W = function (a) { return a == null || a === "" ? "&#160;" : b.p.autoencode ? $.jgrid.htmlEncode(a) : String(a) }, S = function (e, d, f, g, i) { var a = b.p.colModel[f], c; if (a.formatter !== undefined) { e = String(b.p.idPrefix) !== "" ? $.jgrid.stripPref(b.p.idPrefix, e) : e; var h = { rowId: e, colModel: a, gid: b.p.id, pos: f }; if ($.isFunction(a.formatter)) c = a.formatter.call(b, d, h, g, i); else if ($.fmatter) c = $.fn.fmatter.call(b, a.formatter, d, h, g, i); else c = W(d) } else c = W(d); return c }, L = function (b, g, d, h, c, f) { var a, e; a = S(b, g, d, c, "add"); e = u(d, h, a, c, b, f); return '<td role="gridcell" ' + e + ">" + a + "</td>" }, T = function (a, e, d, c) { var g = '<input role="checkbox" type="checkbox" id="jqg_' + b.p.id + "_" + a + '" class="cbox" name="jqg_' + b.p.id + "_" + a + '"' + (c ? 'checked="checked"' : "") + "/>", f = u(e, d, "", null, a, true); return '<td role="gridcell" ' + f + ">" + g + "</td>" }, R = function (c, a, e, f) { var b = (parseInt(e, 10) - 1) * parseInt(f, 10) + 1 + a, d = u(c, a, b, null, a, true); return '<td role="gridcell" class="ui-state-default jqgrid-rownum" ' + d + ">" + b + "</td>" }, Z = function (c) { for (var a, e = [], f = 0, d = 0; d < b.p.colModel.length; d++) { a = b.p.colModel[d]; if (a.name !== "cb" && a.name !== "subgrid" && a.name !== "rn") { e[f] = c === "local" ? a.name : c === "xml" || c === "xmlstring" ? a.xmlmap || a.name : a.jsonmap || a.name; f++ } } return e }, J = function (c) { var a = b.p.remapColumns; if (!a || !a.length) a = $.map(b.p.colModel, function (b, a) { return a }); if (c) a = $.map(a, function (a) { return a < c ? null : a - c }); return a }, t = function (c, b) { var a; if (this.p.deepempty) $(this.rows).slice(1).remove(); else { a = this.rows.length > 0 ? this.rows[0] : null; $(this.firstChild).empty().append(a) } if (c && this.p.scroll) { $(this.grid.bDiv.firstChild).css({ height: "auto" }); $(this.grid.bDiv.firstChild.firstChild).css({ height: 0, display: "none" }); if (this.grid.bDiv.scrollTop !== 0) this.grid.bDiv.scrollTop = 0 } if (b === true && this.p.treeGrid) { this.p.data = []; this.p._index = {} } }, H = function () { var e = b.p.data.length, d, a, c, g = b.p.rownumbers === true ? 1 : 0, f = b.p.multiselect === true ? 1 : 0, h = b.p.subGrid === true ? 1 : 0; if (b.p.keyIndex === false || b.p.loadonce === true) d = b.p.localReader.id; else d = b.p.colModel[b.p.keyIndex + f + h + g].name; for (a = 0; a < e; a++) { c = $.jgrid.getAccessor(b.p.data[a], d); if (c === undefined) c = String(a + 1); b.p._index[c] = a } }, I = function (d, m, f, k, j, l) { var h = "-1", g = "", c, e = m ? "display:none;" : "", i = "ui-widget-content jqgrow ui-row-" + b.p.direction + (f ? " " + f : "") + (l ? " ui-state-highlight" : ""), a = $(b).triggerHandler("jqGridRowAttr", [k, j, d]); if (typeof a !== "object") a = $.isFunction(b.p.rowattr) ? b.p.rowattr.call(b, k, j, d) : {}; if (!$.isEmptyObject(a)) { if (a.hasOwnProperty("id")) { d = a.id; delete a.id } if (a.hasOwnProperty("tabindex")) { h = a.tabindex; delete a.tabindex } if (a.hasOwnProperty("style")) { e += a.style; delete a.style } if (a.hasOwnProperty("class")) { i += " " + a["class"]; delete a["class"] } try { delete a.role } catch (n) { } for (c in a) if (a.hasOwnProperty(c)) g += " " + c + "=" + a[c] } return '<tr role="row" id="' + d + '" tabindex="' + h + '" class="' + i + '"' + (e === "" ? "" : ' style="' + e + '"') + g + ">" }, K = function (q, M, n, U, F) { var P = new Date, A = b.p.datatype !== "local" && b.p.loadonce || b.p.datatype === "xmlstring", x = "_id_", c = b.p.xmlReader, V = b.p.datatype === "local" ? "local" : "xml"; if (A) { b.p.data = []; b.p._index = {}; b.p.localReader.id = x } b.p.reccount = 0; if ($.isXMLDoc(q)) if (b.p.treeANode === -1 && !b.p.scroll) { t.call(b, false, true); n = 1 } else n = n > 1 ? n : 1; else return; var s = $(b), j, y, o = 0, m, i = b.p.multiselect === true ? 1 : 0, l = 0, D, g = b.p.rownumbers === true ? 1 : 0, h, w, r = [], v, a = {}, f, e, d = [], W = b.p.altRows === true ? b.p.altclass : "", H; if (b.p.subGrid === true) { l = 1; D = $.jgrid.getMethod("addSubGridCell") } if (!c.repeatitems) r = Z(V); if (b.p.keyIndex === false) h = $.isFunction(c.id) ? c.id.call(b, q) : c.id; else h = b.p.keyIndex; if (r.length > 0 && !isNaN(h)) { if (b.p.remapColumns && b.p.remapColumns.length) h = $.inArray(h, b.p.remapColumns); h = r[h] } if (String(h).indexOf("[") === -1) if (r.length) w = function (a, b) { return $(h, a).text() || b }; else w = function (a, b) { return $(c.cell, a).eq(h).text() || b }; else w = function (a, b) { return a.getAttribute(h.replace(/[\[\]]/g, "")) || b }; b.p.userData = {}; b.p.page = $.jgrid.getXmlData(q, c.page) || b.p.page || 0; b.p.lastpage = $.jgrid.getXmlData(q, c.total); if (b.p.lastpage === undefined) b.p.lastpage = 1; b.p.records = $.jgrid.getXmlData(q, c.records) || 0; if ($.isFunction(c.userdata)) b.p.userData = c.userdata.call(b, q) || {}; else $.jgrid.getXmlData(q, c.userdata, true).each(function () { b.p.userData[this.getAttribute("name")] = $(this).text() }); var p = $.jgrid.getXmlData(q, c.root, true); p = $.jgrid.getXmlData(p, c.row, true); if (!p) p = []; var u = p.length, k = 0, z = [], B = parseInt(b.p.rowNum, 10), K = b.p.scroll ? $.jgrid.randId() : 1, G; if (u > 0 && b.p.page <= 0) b.p.page = 1; if (p && u) { if (F) B *= F + 1; var N = $.isFunction(b.p.afterInsertRow), E = false, C; if (b.p.grouping) { E = b.p.groupingView.groupCollapse === true; C = $.jgrid.getMethod("groupingPrepare") } while (k < u) { f = p[k]; e = w(f, K + k); e = b.p.idPrefix + e; G = n === 0 ? 0 : n + 1; H = (G + k) % 2 === 1 ? W : ""; var O = d.length; d.push(""); g && d.push(R(0, k, b.p.page, b.p.rowNum)); i && d.push(T(e, g, k, false)); l && d.push(D.call(s, i + g, k + n)); if (c.repeatitems) { if (!v) v = J(i + l + g); var S = $.jgrid.getXmlData(f, c.cell, true); $.each(v, function (h) { var c = S[this]; if (!c) return false; m = c.textContent || c.text; a[b.p.colModel[h + i + l + g].name] = m; d.push(L(e, m, h + i + l + g, k + n, f, a)) }) } else for (j = 0; j < r.length; j++) { m = $.jgrid.getXmlData(f, r[j]); a[b.p.colModel[j + i + l + g].name] = m; d.push(L(e, m, j + i + l + g, k + n, f, a)) } d[O] = I(e, E, H, a, f, false); d.push("</tr>"); if (b.p.grouping) { z = C.call(s, d, z, a, k); d = [] } if (A || b.p.treeGrid === true) { a[x] = $.jgrid.stripPref(b.p.idPrefix, e); b.p.data.push(a); b.p._index[a[x]] = b.p.data.length - 1 } if (b.p.gridview === false) { $("tbody:first", M).append(d.join("")); s.triggerHandler("jqGridAfterInsertRow", [e, a, f]); N && b.p.afterInsertRow.call(b, e, a, f); d = [] } a = {}; o++; k++; if (o === B) break } } if (b.p.gridview === true) { y = b.p.treeANode > -1 ? b.p.treeANode : 0; if (b.p.grouping) { s.jqGrid("groupingRender", z, b.p.colModel.length); z = null } else if (b.p.treeGrid === true && y > 0) $(b.rows[y]).after(d.join("")); else $("tbody:first", M).append(d.join("")) } if (b.p.subGrid === true) try { s.jqGrid("addSubGrid", i + g) } catch (Y) { } b.p.totaltime = new Date - P; if (o > 0) if (b.p.records === 0) b.p.records = u; d = null; if (b.p.treeGrid === true) try { s.jqGrid("setTreeNode", y + 1, o + y + 1) } catch (X) { } if (!b.p.treeGrid && !b.p.scroll) b.grid.bDiv.scrollTop = 0; b.p.reccount = o; b.p.treeANode = -1; b.p.userDataOnFooter && s.jqGrid("footerData", "set", b.p.userData, true); if (A) { b.p.records = u; b.p.lastpage = Math.ceil(u / B) } !U && b.updatepager(false, true); if (A) while (o < u) { f = p[o]; e = w(f, o + K); e = b.p.idPrefix + e; if (c.repeatitems) { if (!v) v = J(i + l + g); var Q = $.jgrid.getXmlData(f, c.cell, true); $.each(v, function (d) { var c = Q[this]; if (!c) return false; m = c.textContent || c.text; a[b.p.colModel[d + i + l + g].name] = m }) } else for (j = 0; j < r.length; j++) { m = $.jgrid.getXmlData(f, r[j]); a[b.p.colModel[j + i + l + g].name] = m } a[x] = $.jgrid.stripPref(b.p.idPrefix, e); b.p.data.push(a); b.p._index[a[x]] = b.p.data.length - 1; a = {}; o++ } }, y = function (o, cb, q, Y, P) { var X = new Date; if (o) if (b.p.treeANode === -1 && !b.p.scroll) { t.call(b, false, true); q = 1 } else q = q > 1 ? q : 1; else return; var d, u = "_id_", D, y = b.p.datatype !== "local" && b.p.loadonce || b.p.datatype === "jsonstring"; if (y) { b.p.data = []; b.p._index = {}; b.p.localReader.id = u } b.p.reccount = 0; if (b.p.datatype === "local") { d = b.p.localReader; D = "local" } else { d = b.p.jsonReader; D = "json" } var r = $(b), l = 0, G, j, k, w = [], c, i = b.p.multiselect ? 1 : 0, m = b.p.subGrid === true ? 1 : 0, K, h = b.p.rownumbers === true ? 1 : 0, M = J(i + m + h), C = Z(D), p, s, n, e, g = {}, v, a, f = [], ab = b.p.altRows === true ? b.p.altclass : "", S, E; b.p.page = $.jgrid.getAccessor(o, d.page) || b.p.page || 0; E = $.jgrid.getAccessor(o, d.total); if (m) K = $.jgrid.getMethod("addSubGridCell"); b.p.lastpage = E === undefined ? 1 : E; b.p.records = $.jgrid.getAccessor(o, d.records) || 0; b.p.userData = $.jgrid.getAccessor(o, d.userdata) || {}; if (b.p.keyIndex === false) e = $.isFunction(d.id) ? d.id.call(b, o) : d.id; else e = b.p.keyIndex; if (!d.repeatitems) { w = C; if (w.length > 0 && !isNaN(e)) { if (b.p.remapColumns && b.p.remapColumns.length) e = $.inArray(e, b.p.remapColumns); e = w[e] } } n = $.jgrid.getAccessor(o, d.root); if (n == null && $.isArray(o)) n = o; if (!n) n = []; s = n.length; j = 0; if (s > 0 && b.p.page <= 0) b.p.page = 1; var F = parseInt(b.p.rowNum, 10), U = b.p.scroll ? $.jgrid.randId() : 1, Q, N = false, B; if (P) F *= P + 1; if (b.p.datatype === "local" && !b.p.deselectAfterSort) N = true; var V = $.isFunction(b.p.afterInsertRow), x = [], O = false, H; if (b.p.grouping) { O = b.p.groupingView.groupCollapse === true; H = $.jgrid.getMethod("groupingPrepare") } while (j < s) { c = n[j]; a = $.jgrid.getAccessor(c, e); if (a === undefined) { if (typeof e === "number" && b.p.colModel[e + i + m + h] != null) a = $.jgrid.getAccessor(c, b.p.colModel[e + i + m + h].name); if (a === undefined) { a = U + j; if (w.length === 0) if (d.cell) { var A = $.jgrid.getAccessor(c, d.cell) || c; a = A != null && A[e] !== undefined ? A[e] : a; A = null } } } a = b.p.idPrefix + a; Q = q === 1 ? 0 : q; S = (Q + j) % 2 === 1 ? ab : ""; if (N) if (b.p.multiselect) B = $.inArray(a, b.p.selarrrow) !== -1; else B = a === b.p.selrow; var W = f.length; f.push(""); h && f.push(R(0, j, b.p.page, b.p.rowNum)); i && f.push(T(a, h, j, B)); m && f.push(K.call(r, i + h, j + q)); p = C; if (d.repeatitems) { if (d.cell) c = $.jgrid.getAccessor(c, d.cell) || c; if ($.isArray(c)) p = M } for (k = 0; k < p.length; k++) { G = $.jgrid.getAccessor(c, p[k]); g[b.p.colModel[k + i + m + h].name] = G; f.push(L(a, G, k + i + m + h, j + q, c, g)) } f[W] = I(a, O, S, g, c, B); f.push("</tr>"); if (b.p.grouping) { x = H.call(r, f, x, g, j); f = [] } if (y || b.p.treeGrid === true) { g[u] = $.jgrid.stripPref(b.p.idPrefix, a); b.p.data.push(g); b.p._index[g[u]] = b.p.data.length - 1 } if (b.p.gridview === false) { $("#" + $.jgrid.jqID(b.p.id) + " tbody:first").append(f.join("")); r.triggerHandler("jqGridAfterInsertRow", [a, g, c]); V && b.p.afterInsertRow.call(b, a, g, c); f = [] } g = {}; l++; j++; if (l === F) break } if (b.p.gridview === true) { v = b.p.treeANode > -1 ? b.p.treeANode : 0; if (b.p.grouping) { r.jqGrid("groupingRender", x, b.p.colModel.length); x = null } else if (b.p.treeGrid === true && v > 0) $(b.rows[v]).after(f.join("")); else $("#" + $.jgrid.jqID(b.p.id) + " tbody:first").append(f.join("")) } if (b.p.subGrid === true) try { r.jqGrid("addSubGrid", i + h) } catch (db) { } b.p.totaltime = new Date - X; if (l > 0) if (b.p.records === 0) b.p.records = s; f = null; if (b.p.treeGrid === true) try { r.jqGrid("setTreeNode", v + 1, l + v + 1) } catch (bb) { } if (!b.p.treeGrid && !b.p.scroll) b.grid.bDiv.scrollTop = 0; b.p.reccount = l; b.p.treeANode = -1; b.p.userDataOnFooter && r.jqGrid("footerData", "set", b.p.userData, true); if (y) { b.p.records = s; b.p.lastpage = Math.ceil(s / F) } !Y && b.updatepager(false, true); if (y) while (l < s && n[l]) { c = n[l]; a = $.jgrid.getAccessor(c, e); if (a === undefined) { if (typeof e === "number" && b.p.colModel[e + i + m + h] != null) a = $.jgrid.getAccessor(c, b.p.colModel[e + i + m + h].name); if (a === undefined) { a = U + l; if (w.length === 0) if (d.cell) { var z = $.jgrid.getAccessor(c, d.cell) || c; a = z != null && z[e] !== undefined ? z[e] : a; z = null } } } if (c) { a = b.p.idPrefix + a; p = C; if (d.repeatitems) { if (d.cell) c = $.jgrid.getAccessor(c, d.cell) || c; if ($.isArray(c)) p = M } for (k = 0; k < p.length; k++) g[b.p.colModel[k + i + m + h].name] = $.jgrid.getAccessor(c, p[k]); g[u] = $.jgrid.stripPref(b.p.idPrefix, a); b.p.data.push(g); b.p._index[g[u]] = b.p.data.length - 1; g = {} } l++ } }, gb = function () { var e = b.p.multiSort ? [] : "", v = [], n = false, c = {}, p = [], s = [], k, h, j; if (!$.isArray(b.p.data)) return; var o = b.p.grouping ? b.p.groupingView : false, q, d; $.each(b.p.colModel, function () { h = this.sorttype || "text"; if (h === "date" || h === "datetime") { if (this.formatter && typeof this.formatter === "string" && this.formatter === "date") { if (this.formatoptions && this.formatoptions.srcformat) k = this.formatoptions.srcformat; else k = $.jgrid.formatter.date.srcformat; if (this.formatoptions && this.formatoptions.newformat) j = this.formatoptions.newformat; else j = $.jgrid.formatter.date.newformat } else k = j = this.datefmt || "Y-m-d"; c[this.name] = { stype: h, srcfmt: k, newfmt: j} } else c[this.name] = { stype: h, srcfmt: "", newfmt: "" }; if (b.p.grouping) for (d = 0, q = o.groupField.length; d < q; d++) if (this.name === o.groupField[d]) { var a = this.name; if (this.index) a = this.index; p[d] = c[a]; s[d] = a } if (b.p.multiSort) { if (this.lso) { e.push(this.name); var f = this.lso.split("-"); v.push(f[f.length - 1]) } } else if (!n && (this.index === b.p.sortname || this.name === b.p.sortname)) { e = this.name; n = true } }); if (b.p.treeGrid) { $(b).jqGrid("SortTree", e, b.p.sortorder, c[e].stype, c[e].srcfmt); return } var m = { eq: function (a) { return a.equals }, ne: function (a) { return a.notEquals }, lt: function (a) { return a.less }, le: function (a) { return a.lessOrEquals }, gt: function (a) { return a.greater }, ge: function (a) { return a.greaterOrEquals }, cn: function (a) { return a.contains }, nc: function (a, b) { return b === "OR" ? a.orNot().contains : a.andNot().contains }, bw: function (a) { return a.startsWith }, bn: function (a, b) { return b === "OR" ? a.orNot().startsWith : a.andNot().startsWith }, en: function (a, b) { return b === "OR" ? a.orNot().endsWith : a.andNot().endsWith }, ew: function (a) { return a.endsWith }, ni: function (a, b) { return b === "OR" ? a.orNot().equals : a.andNot().equals }, "in": function (a) { return a.equals }, nu: function (a) { return a.isNull }, nn: function (a, b) { return b === "OR" ? a.orNot().isNull : a.andNot().isNull } }, a = $.jgrid.from(b.p.data); if (b.p.ignoreCase) a = a.ignoreCase(); function t(b) { var h = 0, d, f, i, g, e; if (b.groups != null) { f = b.groups.length && b.groupOp.toString().toUpperCase() === "OR"; f && a.orBegin(); for (d = 0; d < b.groups.length; d++) { h > 0 && f && a.or(); try { t(b.groups[d]) } catch (j) { alert(j) } h++ } f && a.orEnd() } if (b.rules != null) try { i = b.rules.length && b.groupOp.toString().toUpperCase() === "OR"; i && a.orBegin(); for (d = 0; d < b.rules.length; d++) { e = b.rules[d]; g = b.groupOp.toString().toUpperCase(); if (m[e.op] && e.field) { if (h > 0 && g && g === "OR") a = a.or(); a = m[e.op](a, g)(e.field, e.data, c[e.field]) } h++ } i && a.orEnd() } catch (k) { alert(k) } } if (b.p.search === true) { var i = b.p.postData.filters; if (i) { if (typeof i === "string") i = $.jgrid.parse(i); t(i) } else try { a = m[b.p.postData.searchOper](a)(b.p.postData.searchField, b.p.postData.searchString, c[b.p.postData.searchField]) } catch (x) { } } if (b.p.grouping) for (d = 0; d < q; d++) a.orderBy(s[d], o.groupOrder[d], p[d].stype, p[d].srcfmt); if (b.p.multiSort) $.each(e, function (b) { a.orderBy(this, v[b], c[this].stype, c[this].srcfmt) }); else if (e && b.p.sortorder && n) if (b.p.sortorder.toUpperCase() === "DESC") a.orderBy(b.p.sortname, "d", c[e].stype, c[e].srcfmt); else a.orderBy(b.p.sortname, "a", c[e].stype, c[e].srcfmt); var g = a.select(), l = parseInt(b.p.rowNum, 10), u = g.length, r = parseInt(b.p.page, 10), w = Math.ceil(u / l), f = {}; g = g.slice((r - 1) * l, r * l); a = null; c = null; f[b.p.localReader.total] = w; f[b.p.localReader.page] = r; f[b.p.localReader.records] = u; f[b.p.localReader.root] = g; f[b.p.localReader.userdata] = b.p.userData; g = null; return f }, jb = function (s, r) { var f, l, a, i, h, j, g, e = "", o, c = b.p.pager ? "_" + $.jgrid.jqID(b.p.pager.substr(1)) : "", d = b.p.toppager ? "_" + b.p.toppager.substr(1) : ""; a = parseInt(b.p.page, 10) - 1; if (a < 0) a = 0; a = a * parseInt(b.p.rowNum, 10); h = a + b.p.reccount; if (b.p.scroll) { var m = $("tbody:first > tr:gt(0)", b.grid.bDiv); a = h - m.length; b.p.reccount = m.length; var k = m.outerHeight() || b.grid.prevRowHeight; if (k) { var p = a * k, q = parseInt(b.p.records, 10) * k; $(">div:first", b.grid.bDiv).css({ height: q }).children("div:first").css({ height: p, display: p ? "" : "none" }); if (b.grid.bDiv.scrollTop == 0 && b.p.page > 1) b.grid.bDiv.scrollTop = b.p.rowNum * (b.p.page - 1) * k } b.grid.bDiv.scrollLeft = b.grid.hDiv.scrollLeft } e = b.p.pager || ""; e += b.p.toppager ? e ? "," + b.p.toppager : b.p.toppager : ""; if (e) { g = $.jgrid.formatter.integer || {}; f = n(b.p.page); l = n(b.p.lastpage); $(".selbox", e)[this.p.useProp ? "prop" : "attr"]("disabled", false); if (b.p.pginput === true) { $(".ui-pg-input", e).val(b.p.page); o = b.p.toppager ? "#sp_1" + c + ",#sp_1" + d : "#sp_1" + c; $(o).html($.fmatter ? $.fmatter.util.NumberFormat(b.p.lastpage, g) : b.p.lastpage) } if (b.p.viewrecords) if (b.p.reccount === 0) $(".ui-paging-info", e).html(b.p.emptyrecords); else { i = a + 1; j = b.p.records; if ($.fmatter) { i = $.fmatter.util.NumberFormat(i, g); h = $.fmatter.util.NumberFormat(h, g); j = $.fmatter.util.NumberFormat(j, g) } $(".ui-paging-info", e).html($.jgrid.format(b.p.recordtext, i, h, j)) } if (b.p.pgbuttons === true) { if (f <= 0) f = l = 0; if (f === 1 || f === 0) { $("#first" + c + ", #prev" + c).addClass("ui-state-disabled").removeClass("ui-state-hover"); b.p.toppager && $("#first_t" + d + ", #prev_t" + d).addClass("ui-state-disabled").removeClass("ui-state-hover") } else { $("#first" + c + ", #prev" + c).removeClass("ui-state-disabled"); b.p.toppager && $("#first_t" + d + ", #prev_t" + d).removeClass("ui-state-disabled") } if (f === l || f === 0) { $("#next" + c + ", #last" + c).addClass("ui-state-disabled").removeClass("ui-state-hover"); b.p.toppager && $("#next_t" + d + ", #last_t" + d).addClass("ui-state-disabled").removeClass("ui-state-hover") } else { $("#next" + c + ", #last" + c).removeClass("ui-state-disabled"); b.p.toppager && $("#next_t" + d + ", #last_t" + d).removeClass("ui-state-disabled") } } } s === true && b.p.rownumbers === true && $(">td.jqgrid-rownum", b.rows).each(function (b) { $(this).html(a + 1 + b) }); r && b.p.jqgdnd && $(b).jqGrid("gridDnD", "updateDnD"); $(b).triggerHandler("jqGridGridComplete"); $.isFunction(b.p.gridComplete) && b.p.gridComplete.call(b); $(b).triggerHandler("jqGridAfterGridComplete") }, z = function () { b.grid.hDiv.loading = true; if (b.p.hiddengrid) return; switch (b.p.loadui) { case "enable": $("#load_" + $.jgrid.jqID(b.p.id)).show(); break; case "block": $("#lui_" + $.jgrid.jqID(b.p.id)).show(); $("#load_" + $.jgrid.jqID(b.p.id)).show() } }, q = function () { b.grid.hDiv.loading = false; switch (b.p.loadui) { case "enable": $("#load_" + $.jgrid.jqID(b.p.id)).hide(); break; case "block": $("#lui_" + $.jgrid.jqID(b.p.id)).hide(); $("#load_" + $.jgrid.jqID(b.p.id)).hide() } }, m = function (c) { if (!b.grid.hDiv.loading) { var r = b.p.scroll && c === false, e = {}, k, d, a = b.p.prmNames; if (b.p.page <= 0) b.p.page = 1; if (a.search !== null) e[a.search] = b.p.search; if (a.nd !== null) e[a.nd] = +new Date; if (a.rows !== null) e[a.rows] = b.p.rowNum; if (a.page !== null) e[a.page] = b.p.page; if (a.sort !== null) e[a.sort] = b.p.sortname; if (a.order !== null) e[a.order] = b.p.sortorder; if (b.p.rowTotal !== null && a.totalrows !== null) e[a.totalrows] = b.p.rowTotal; var i = $.isFunction(b.p.loadComplete), g = i ? b.p.loadComplete : null, h = 0; c = c || 1; if (c > 1) if (a.npage !== null) { e[a.npage] = c; h = c - 1; c = 1 } else g = function (a) { b.p.page++; b.grid.hDiv.loading = false; i && b.p.loadComplete.call(b, a); m(c - 1) }; else if (a.npage !== null) delete b.p.postData[a.npage]; if (b.p.grouping) { $(b).jqGrid("groupingSetup"); for (var p = b.p.groupingView, s = "", l = 0; l < p.groupField.length; l++) { var n = p.groupField[l]; $.each(b.p.colModel, function (b, a) { if (a.name === n && a.index) n = a.index }); s += n + " " + p.groupOrder[l] + ", " } e[a.sort] = s + e[a.sort] } $.extend(b.p.postData, e); var o = !b.p.scroll ? 1 : b.rows.length - 1, f = $(b).triggerHandler("jqGridBeforeRequest"); if (f === false || f === "stop") return; if ($.isFunction(b.p.datatype)) { b.p.datatype.call(b, b.p.postData, "load_" + b.p.id); return } if ($.isFunction(b.p.beforeRequest)) { f = b.p.beforeRequest.call(b); if (f === undefined) f = true; if (f === false) return } k = b.p.datatype.toLowerCase(); switch (k) { case "json": case "jsonp": case "xml": case "script": $.ajax($.extend({ url: b.p.url, type: b.p.mtype, dataType: k, data: $.isFunction(b.p.serializeGridData) ? b.p.serializeGridData.call(b, b.p.postData) : b.p.postData, success: function (a, e, d) { if ($.isFunction(b.p.beforeProcessing)) if (b.p.beforeProcessing.call(b, a, e, d) === false) { q(); return } if (k === "xml") K(a, b.grid.bDiv, o, c > 1, h); else y(a, b.grid.bDiv, o, c > 1, h); $(b).triggerHandler("jqGridLoadComplete", [a]); g && g.call(b, a); $(b).triggerHandler("jqGridAfterLoadComplete", [a]); r && b.grid.populateVisible(); if (b.p.loadonce || b.p.treeGrid) b.p.datatype = "local"; a = null; c === 1 && q() }, error: function (a, e, d) { $.isFunction(b.p.loadError) && b.p.loadError.call(b, a, e, d); c === 1 && q(); a = null }, beforeSend: function (d, c) { var a = true; if ($.isFunction(b.p.loadBeforeSend)) a = b.p.loadBeforeSend.call(b, d, c); if (a === undefined) a = true; if (a === false) return false; z() } }, $.jgrid.ajaxOptions, b.p.ajaxGridOptions)); break; case "xmlstring": z(); d = typeof b.p.datastr !== "string" ? b.p.datastr : $.parseXML(b.p.datastr); K(d, b.grid.bDiv); $(b).triggerHandler("jqGridLoadComplete", [d]); i && b.p.loadComplete.call(b, d); $(b).triggerHandler("jqGridAfterLoadComplete", [d]); b.p.datatype = "local"; b.p.datastr = null; q(); break; case "jsonstring": z(); if (typeof b.p.datastr === "string") d = $.jgrid.parse(b.p.datastr); else d = b.p.datastr; y(d, b.grid.bDiv); $(b).triggerHandler("jqGridLoadComplete", [d]); i && b.p.loadComplete.call(b, d); $(b).triggerHandler("jqGridAfterLoadComplete", [d]); b.p.datatype = "local"; b.p.datastr = null; q(); break; case "local": case "clientside": z(); b.p.datatype = "local"; var j = gb(); y(j, b.grid.bDiv, o, c > 1, h); $(b).triggerHandler("jqGridLoadComplete", [j]); g && g.call(b, j); $(b).triggerHandler("jqGridAfterLoadComplete", [j]); r && b.grid.populateVisible(); q() } } }, x = function (a) { $("#cb_" + $.jgrid.jqID(b.p.id), b.grid.hDiv)[b.p.useProp ? "prop" : "attr"]("checked", a); var c = b.p.frozenColumns ? b.p.id + "_frozen" : ""; c && $("#cb_" + $.jgrid.jqID(b.p.id), b.grid.fhDiv)[b.p.useProp ? "prop" : "attr"]("checked", a) }, U = function (c, a) { var r = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>", f = "", d = "<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>", g = "", e, p, o, q, i, s, j, l = function (c) { var a; if ($.isFunction(b.p.onPaging)) a = b.p.onPaging.call(b, c); b.p.selrow = null; if (b.p.multiselect) { b.p.selarrrow = []; x(false) } b.p.savedRow = []; return a === "stop" ? false : true }; c = c.substr(1); a += "_" + c; e = "pg_" + c; p = c + "_left"; o = c + "_center"; q = c + "_right"; $("#" + $.jgrid.jqID(c)).append("<div id='" + e + "' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody><tr><td id='" + p + "' align='left'></td><td id='" + o + "' align='center' style='white-space:pre;'></td><td id='" + q + "' align='right'></td></tr></tbody></table></div>").attr("dir", "ltr"); if (b.p.rowList.length > 0) { g = "<td dir='" + h + "'>"; g += "<select class='ui-pg-selbox' role='listbox'>"; for (j = 0; j < b.p.rowList.length; j++) g += '<option role="option" value="' + b.p.rowList[j] + '"' + (b.p.rowNum === b.p.rowList[j] ? ' selected="selected"' : "") + ">" + b.p.rowList[j] + "</option>"; g += "</select></td>" } if (h === "rtl") d += g; if (b.p.pginput === true) f = "<td dir='" + h + "'>" + $.jgrid.format(b.p.pgtext || "", "<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + $.jgrid.jqID(c) + "'></span>") + "</td>"; if (b.p.pgbuttons === true) { var k = ["first" + a, "prev" + a, "next" + a, "last" + a]; h === "rtl" && k.reverse(); d += "<td id='" + k[0] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-first'></span></td>"; d += "<td id='" + k[1] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-prev'></span></td>"; d += f !== "" ? r + f + r : ""; d += "<td id='" + k[2] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-next'></span></td>"; d += "<td id='" + k[3] + "' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-end'></span></td>" } else if (f !== "") d += f; if (h === "ltr") d += g; d += "</tr></tbody></table>"; b.p.viewrecords === true && $("td#" + c + "_" + b.p.recordpos, "#" + e).append("<div dir='" + h + "' style='text-align:" + b.p.recordpos + "' class='ui-paging-info'></div>"); $("td#" + c + "_" + b.p.pagerpos, "#" + e).append(d); s = $(".ui-jqgrid").css("font-size") || "11px"; $(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + s + ";visibility:hidden;' ></div>"); i = $(d).clone().appendTo("#testpg").width(); $("#testpg").remove(); if (i > 0) { if (f !== "") i += 50; $("td#" + c + "_" + b.p.pagerpos, "#" + e).width(i) } b.p._nvtd = []; b.p._nvtd[0] = i ? Math.floor((b.p.width - i) / 2) : Math.floor(b.p.width / 3); b.p._nvtd[1] = 0; d = null; $(".ui-pg-selbox", "#" + e).bind("change", function () { if (!l("records")) return false; b.p.page = Math.round(b.p.rowNum * (b.p.page - 1) / this.value - .5) + 1; b.p.rowNum = this.value; b.p.pager && $(".ui-pg-selbox", b.p.pager).val(this.value); b.p.toppager && $(".ui-pg-selbox", b.p.toppager).val(this.value); m(); return false }); if (b.p.pgbuttons === true) { $(".ui-pg-button", "#" + e).hover(function () { if ($(this).hasClass("ui-state-disabled")) this.style.cursor = "default"; else { $(this).addClass("ui-state-hover"); this.style.cursor = "pointer" } }, function () { if (!$(this).hasClass("ui-state-disabled")) { $(this).removeClass("ui-state-hover"); this.style.cursor = "default" } }); $("#first" + $.jgrid.jqID(a) + ", #prev" + $.jgrid.jqID(a) + ", #next" + $.jgrid.jqID(a) + ", #last" + $.jgrid.jqID(a)).click(function () { var d = n(b.p.page, 1), c = n(b.p.lastpage, 1), e = false, h = true, i = true, g = true, f = true; if (c === 0 || c === 1) { h = false; i = false; g = false; f = false } else if (c > 1 && d >= 1) { if (d === 1) { h = false; i = false } else if (d === c) { g = false; f = false } } else if (c > 1 && d === 0) { g = false; f = false; d = c - 1 } if (!l(this.id)) return false; if (this.id === "first" + a && h) { b.p.page = 1; e = true } if (this.id === "prev" + a && i) { b.p.page = d - 1; e = true } if (this.id === "next" + a && g) { b.p.page = d + 1; e = true } if (this.id === "last" + a && f) { b.p.page = c; e = true } e && m(); return false }) } b.p.pginput === true && $("input.ui-pg-input", "#" + e).keypress(function (a) { var c = a.charCode || a.keyCode || 0; if (c === 13) { if (!l("user")) return false; $(this).val(n($(this).val(), 1)); b.p.page = $(this).val() > 0 ? $(this).val() : b.p.page; m(); return false } return this }) }, lb = function (c, j) { var f, d = "", a = b.p.colModel, h = false, i, e = b.p.frozenColumns ? j : b.grid.headers[c].el, g = ""; $("span.ui-grid-ico-sort", e).addClass("ui-state-disabled"); $(e).attr("aria-selected", "false"); if (a[c].lso) { if (a[c].lso === "asc") { a[c].lso += "-desc"; g = "desc" } else if (a[c].lso === "desc") { a[c].lso += "-asc"; g = "asc" } else if (a[c].lso === "asc-desc" || a[c].lso === "desc-asc") a[c].lso = "" } else a[c].lso = g = a.firstsortorder || "asc"; if (g) { $("span.s-ico", e).show(); $("span.ui-icon-" + g, e).removeClass("ui-state-disabled"); $(e).attr("aria-selected", "true") } else !b.p.viewsortcols[0] && $("span.s-ico", e).hide(); b.p.sortorder = ""; $.each(a, function (c) { if (this.lso) { if (c > 0 && h) d += ", "; f = this.lso.split("-"); d += a[c].index || a[c].name; d += " " + f[f.length - 1]; h = true; b.p.sortorder = f[f.length - 1] } }); i = d.lastIndexOf(b.p.sortorder); d = d.substring(0, i); b.p.sortname = d }, V = function (c, a, h, f, i) { if (!b.p.colModel[a].sortable) return; var g; if (b.p.savedRow.length > 0) return; if (!h) { if (b.p.lastsort === a) { if (b.p.sortorder === "asc") b.p.sortorder = "desc"; else if (b.p.sortorder === "desc") b.p.sortorder = "asc" } else b.p.sortorder = b.p.colModel[a].firstsortorder || "asc"; b.p.page = 1 } if (b.p.multiSort) lb(a, i); else { if (f) { if (b.p.lastsort === a && b.p.sortorder === f && !h) return; b.p.sortorder = f } var d = b.grid.headers[b.p.lastsort].el, e = b.p.frozenColumns ? i : b.grid.headers[a].el; $("span.ui-grid-ico-sort", d).addClass("ui-state-disabled"); $(d).attr("aria-selected", "false"); if (b.p.frozenColumns) { b.grid.fhDiv.find("span.ui-grid-ico-sort").addClass("ui-state-disabled"); b.grid.fhDiv.find("th").attr("aria-selected", "false") } $("span.ui-icon-" + b.p.sortorder, e).removeClass("ui-state-disabled"); $(e).attr("aria-selected", "true"); if (!b.p.viewsortcols[0]) if (b.p.lastsort !== a) { b.p.frozenColumns && b.grid.fhDiv.find("span.s-ico").hide(); $("span.s-ico", d).hide(); $("span.s-ico", e).show() } c = c.substring(5 + b.p.id.length + 1); b.p.sortname = b.p.colModel[a].index || c; g = b.p.sortorder } if ($(b).triggerHandler("jqGridSortCol", [c, a, g]) === "stop") { b.p.lastsort = a; return } if ($.isFunction(b.p.onSortCol)) if (b.p.onSortCol.call(b, c, a, g) === "stop") { b.p.lastsort = a; return } if (b.p.datatype === "local") b.p.deselectAfterSort && $(b).jqGrid("resetSelection"); else { b.p.selrow = null; b.p.multiselect && x(false); b.p.selarrrow = []; b.p.savedRow = [] } if (b.p.scroll) { var j = b.grid.bDiv.scrollLeft; t.call(b, true, false); b.grid.hDiv.scrollLeft = j } b.p.subGrid && b.p.datatype === "local" && $("td.sgexpanded", "#" + $.jgrid.jqID(b.p.id)).each(function () { $(this).trigger("click") }); m(); b.p.lastsort = a; if (b.p.sortname !== c && a) b.p.lastsort = a }, ib = function () { var a = 0, d = $.jgrid.cell_width ? 0 : n(b.p.cellLayout, 0), e = 0, j, i = n(b.p.scrollOffset, 0), g, l = false, k, f = 0, h; $.each(b.p.colModel, function () { if (this.hidden === undefined) this.hidden = false; if (b.p.grouping && b.p.autowidth) { var c = $.inArray(this.name, b.p.groupingView.groupField); if (c >= 0 && b.p.groupingView.groupColumnShow.length > c) this.hidden = !b.p.groupingView.groupColumnShow[c] } this.widthOrg = g = n(this.width, 0); if (this.hidden === false) { a += g + d; if (this.fixed) f += g + d; else e++ } }); if (isNaN(b.p.width)) b.p.width = a + (b.p.shrinkToFit === false && !isNaN(b.p.height) ? i : 0); c.width = b.p.width; b.p.tblwidth = a; if (b.p.shrinkToFit === false && b.p.forceFit === true) b.p.forceFit = false; if (b.p.shrinkToFit === true && e > 0) { k = c.width - d * e - f; if (!isNaN(b.p.height)) { k -= i; l = true } a = 0; $.each(b.p.colModel, function (c) { if (this.hidden === false && !this.fixed) { g = Math.round(k * this.width / (b.p.tblwidth - d * e - f)); this.width = g; a += g; j = c } }); h = 0; if (l) { if (c.width - f - (a + d * e) !== i) h = c.width - f - (a + d * e) - i } else if (!l && Math.abs(c.width - f - (a + d * e)) !== 1) h = c.width - f - (a + d * e); b.p.colModel[j].width += h; b.p.tblwidth = a + h + d * e + f; if (b.p.tblwidth > b.p.width) { b.p.colModel[j].width -= b.p.tblwidth - parseInt(b.p.width, 10); b.p.tblwidth = b.p.width } } }, hb = function (c) { for (var e = c, d = c, a = c + 1; a < b.p.colModel.length; a++) if (b.p.colModel[a].hidden !== true) { d = a; break } return d - e }, kb = function (d) { var c = $(b.grid.headers[d].el), a = [c.position().left + c.outerWidth()]; if (b.p.direction === "rtl") a[0] = b.p.width - a[0]; a[0] -= b.grid.bDiv.scrollLeft; a.push($(b.grid.hDiv).position().top); a.push($(b.grid.bDiv).offset().top - $(b.grid.hDiv).offset().top + $(b.grid.bDiv).height()); return a }, Q = function (e) { for (var c = b.grid.headers, d = $.jgrid.getCellIndex(e), a = 0; a < c.length; a++) if (e === c[a].el) { d = a; break } return d }; this.p.id = this.id; if ($.inArray(b.p.multikey, mb) === -1) b.p.multikey = false; b.p.keyIndex = false; for (e = 0; e < b.p.colModel.length; e++) { b.p.colModel[e] = $.extend(true, {}, b.p.cmTemplate, b.p.colModel[e].template || {}, b.p.colModel[e]); if (b.p.keyIndex === false && b.p.colModel[e].key === true) b.p.keyIndex = e } b.p.sortorder = b.p.sortorder.toLowerCase(); $.jgrid.cell_width = $.jgrid.cellWidth(); if (b.p.grouping === true) { b.p.scroll = false; b.p.rownumbers = false; b.p.treeGrid = false; b.p.gridview = true } if (this.p.treeGrid === true) { try { $(this).jqGrid("setTreeGrid") } catch (rb) { } if (b.p.datatype !== "local") b.p.localReader = { id: "_id_"} } if (this.p.subGrid) try { $(b).jqGrid("setSubGrid") } catch (qb) { } if (this.p.multiselect) { this.p.colNames.unshift("<input role='checkbox' id='cb_" + this.p.id + "' class='cbox' type='checkbox'/>"); this.p.colModel.unshift({ name: "cb", width: $.jgrid.cell_width ? b.p.multiselectWidth + b.p.cellLayout : b.p.multiselectWidth, sortable: false, resizable: false, hidedlg: true, search: false, align: "center", fixed: true }) } if (this.p.rownumbers) { this.p.colNames.unshift(""); this.p.colModel.unshift({ name: "rn", width: b.p.rownumWidth, sortable: false, resizable: false, hidedlg: true, search: false, align: "center", fixed: true }) } b.p.xmlReader = $.extend(true, { root: "rows", row: "row", page: "rows>page", total: "rows>total", records: "rows>records", repeatitems: true, cell: "cell", id: "[id]", userdata: "userdata", subgrid: { root: "rows", row: "row", repeatitems: true, cell: "cell"} }, b.p.xmlReader); b.p.jsonReader = $.extend(true, { root: "rows", page: "page", total: "total", records: "records", repeatitems: true, cell: "cell", id: "id", userdata: "userdata", subgrid: { root: "rows", repeatitems: true, cell: "cell"} }, b.p.jsonReader); b.p.localReader = $.extend(true, { root: "rows", page: "page", total: "total", records: "records", repeatitems: false, cell: "cell", id: "id", userdata: "userdata", subgrid: { root: "rows", repeatitems: true, cell: "cell"} }, b.p.localReader); if (b.p.scroll) { b.p.pgbuttons = false; b.p.pginput = false; b.p.rowList = [] } b.p.data.length && H(); var l = "<thead><tr class='ui-jqgrid-labels' role='rowheader'>", db, P, G, F, D, i, f, ab, C, bb = "", cb = "", v = [], X = [], o = []; if (b.p.shrinkToFit === true && b.p.forceFit === true) for (e = b.p.colModel.length - 1; e >= 0; e--) if (!b.p.colModel[e].hidden) { b.p.colModel[e].resizable = false; break } if (b.p.viewsortcols[1] === "horizontal") { bb = " ui-i-asc"; cb = " ui-i-desc" } db = M ? "class='ui-th-div-ie'" : ""; C = "<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc" + bb + " ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-" + h + "'></span>"; C += "<span sort='desc' class='ui-grid-ico-sort ui-icon-desc" + cb + " ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-" + h + "'></span></span>"; if (b.p.multiSort) { v = b.p.sortname.split(","); for (e = 0; e < v.length; e++) { o = $.trim(v[e]).split(" "); v[e] = $.trim(o[0]); X[e] = o[1] ? $.trim(o[1]) : b.p.sortorder || "asc" } } for (e = 0; e < this.p.colNames.length; e++) { var nb = b.p.headertitles ? ' title="' + $.jgrid.stripHtml(b.p.colNames[e]) + '"' : ""; l += "<th id='" + b.p.id + "_" + b.p.colModel[e].name + "' role='columnheader' class='ui-state-default ui-th-column ui-th-" + h + "'" + nb + ">"; P = b.p.colModel[e].index || b.p.colModel[e].name; l += "<div id='jqgh_" + b.p.id + "_" + b.p.colModel[e].name + "' " + db + ">" + b.p.colNames[e]; if (!b.p.colModel[e].width) b.p.colModel[e].width = 150; else b.p.colModel[e].width = parseInt(b.p.colModel[e].width, 10); if (typeof b.p.colModel[e].title !== "boolean") b.p.colModel[e].title = true; b.p.colModel[e].lso = ""; if (P === b.p.sortname) b.p.lastsort = e; if (b.p.multiSort) { o = $.inArray(P, v); if (o !== -1) b.p.colModel[e].lso = X[o] } l += C + "</div></th>" } l += "</tr></thead>"; C = null; $(this).append(l); $("thead tr:first th", this).hover(function () { $(this).addClass("ui-state-hover") }, function () { $(this).removeClass("ui-state-hover") }); if (this.p.multiselect) { var E = [], r; $("#cb_" + $.jgrid.jqID(b.p.id), this).bind("click", function () { b.p.selarrrow = []; var a = b.p.frozenColumns === true ? b.p.id + "_frozen" : ""; if (this.checked) { $(b.rows).each(function (c) { if (c > 0) if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass("ui-state-disabled")) { $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(this.id))[b.p.useProp ? "prop" : "attr"]("checked", true); $(this).addClass("ui-state-highlight").attr("aria-selected", "true"); b.p.selarrrow.push(this.id); b.p.selrow = this.id; if (a) { $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(this.id), b.grid.fbDiv)[b.p.useProp ? "prop" : "attr"]("checked", true); $("#" + $.jgrid.jqID(this.id), b.grid.fbDiv).addClass("ui-state-highlight") } } }); r = true; E = [] } else { $(b.rows).each(function (c) { if (c > 0) if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass("ui-state-disabled")) { $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(this.id))[b.p.useProp ? "prop" : "attr"]("checked", false); $(this).removeClass("ui-state-highlight").attr("aria-selected", "false"); E.push(this.id); if (a) { $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(this.id), b.grid.fbDiv)[b.p.useProp ? "prop" : "attr"]("checked", false); $("#" + $.jgrid.jqID(this.id), b.grid.fbDiv).removeClass("ui-state-highlight") } } }); b.p.selrow = null; r = false } $(b).triggerHandler("jqGridSelectAll", [r ? b.p.selarrrow : E, r]); $.isFunction(b.p.onSelectAll) && b.p.onSelectAll.call(b, r ? b.p.selarrrow : E, r) }) } if (b.p.autowidth === true) { var fb = $(w).innerWidth(); b.p.width = fb > 0 ? fb : "nw" } ib(); $(w).css("width", c.width + "px").append("<div class='ui-jqgrid-resize-mark' id='rs_m" + b.p.id + "'>&#160;</div>"); $(p).css("width", c.width + "px"); l = $("thead:first", b).get(0); var B = ""; if (b.p.footerrow) B += "<table role='grid' style='width:" + b.p.tblwidth + "px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-" + h + "'>"; var eb = $("tr:first", l), A = "<tr class='jqgfirstrow' role='row' style='height:auto'>"; b.p.disableClick = false; $("th", eb).each(function (a) { G = b.p.colModel[a].width; if (b.p.colModel[a].resizable === undefined) b.p.colModel[a].resizable = true; if (b.p.colModel[a].resizable) { F = document.createElement("span"); $(F).html("&#160;").addClass("ui-jqgrid-resize ui-jqgrid-resize-" + h).css("cursor", "col-resize"); $(this).addClass(b.p.resizeclass) } else F = ""; $(this).css("width", G + "px").prepend(F); var e = ""; if (b.p.colModel[a].hidden) { $(this).css("display", "none"); e = "display:none;" } A += "<td role='gridcell' style='height:0px;width:" + G + "px;" + e + "'></td>"; c.headers[a] = { width: G, el: this }; D = b.p.colModel[a].sortable; if (typeof D !== "boolean") { b.p.colModel[a].sortable = true; D = true } var d = b.p.colModel[a].name; if (!(d === "cb" || d === "subgrid" || d === "rn")) b.p.viewsortcols[2] && $(">div", this).addClass("ui-jqgrid-sortable"); if (D) if (b.p.multiSort) { if (b.p.viewsortcols[0]) { $("div span.s-ico", this).show(); b.p.colModel[a].lso && $("div span.ui-icon-" + b.p.colModel[a].lso, this).removeClass("ui-state-disabled") } else if (b.p.colModel[a].lso) { $("div span.s-ico", this).show(); $("div span.ui-icon-" + b.p.colModel[a].lso, this).removeClass("ui-state-disabled") } } else if (b.p.viewsortcols[0]) { $("div span.s-ico", this).show(); a === b.p.lastsort && $("div span.ui-icon-" + b.p.sortorder, this).removeClass("ui-state-disabled") } else if (a === b.p.lastsort) { $("div span.s-ico", this).show(); $("div span.ui-icon-" + b.p.sortorder, this).removeClass("ui-state-disabled") } if (b.p.footerrow) B += "<td role='gridcell' " + u(a, 0, "", null, "", false) + ">&#160;</td>" }).mousedown(function (d) { if ($(d.target).closest("th>span.ui-jqgrid-resize").length !== 1) return; var a = Q(this); if (b.p.forceFit === true) b.p.nv = hb(a); c.dragStart(a, d, kb(a)); return false }).click(function (h) { if (b.p.disableClick) { b.p.disableClick = false; return false } var e = "th>div.ui-jqgrid-sortable", d, c; if (!b.p.viewsortcols[2]) e = "th>div>span>span.ui-grid-ico-sort"; var f = $(h.target).closest(e); if (f.length !== 1) return; var a; if (b.p.frozenColumns) { var g = $(this)[0].id.substring(5); $(b.p.colModel).each(function (b) { if (this.name === g) { a = b; return false } }) } else a = Q(this); if (!b.p.viewsortcols[2]) { d = true; c = f.attr("sort") } a != null && V($("div", this)[0].id, a, d, c, this); return false }); if (b.p.sortable && $.fn.sortable) try { $(b).jqGrid("sortableColumns", eb) } catch (pb) { } if (b.p.footerrow) B += "</tr></tbody></table>"; A += "</tr>"; ab = document.createElement("tbody"); this.appendChild(ab); $(this).addClass("ui-jqgrid-btable").append(A); A = null; var Y = $("<table class='ui-jqgrid-htable' style='width:" + b.p.tblwidth + "px' role='grid' aria-labelledby='gbox_" + this.id + "' cellspacing='0' cellpadding='0' border='0'></table>").append(l), j = b.p.caption && b.p.hiddengrid === true ? true : false, s = $("<div class='ui-jqgrid-hbox" + (h === "rtl" ? "-rtl" : "") + "'></div>"); l = null; c.hDiv = document.createElement("div"); $(c.hDiv).css({ width: c.width + "px" }).addClass("ui-state-default ui-jqgrid-hdiv").append(s); $(s).append(Y); Y = null; j && $(c.hDiv).hide(); if (b.p.pager) { if (typeof b.p.pager === "string") { if (b.p.pager.substr(0, 1) !== "#") b.p.pager = "#" + b.p.pager } else b.p.pager = "#" + $(b.p.pager).attr("id"); $(b.p.pager).css({ width: c.width + "px" }).addClass("ui-state-default ui-jqgrid-pager ui-corner-bottom").appendTo(w); j && $(b.p.pager).hide(); U(b.p.pager, "") } b.p.cellEdit === false && b.p.hoverrows === true && $(b).bind("mouseover", function (a) { f = $(a.target).closest("tr.jqgrow"); $(f).attr("class") !== "ui-subgrid" && $(f).addClass("ui-state-hover") }).bind("mouseout", function (a) { f = $(a.target).closest("tr.jqgrow"); $(f).removeClass("ui-state-hover") }); var g, k, N; $(b).before(c.hDiv).click(function (a) { i = a.target; f = $(i, b.rows).closest("tr.jqgrow"); if ($(f).length === 0 || f[0].className.indexOf("ui-state-disabled") > -1 || ($(i, b).closest("table.ui-jqgrid-btable").attr("id") || "").replace("_frozen", "") !== b.id) return this; var d = $(i).hasClass("cbox"), c = $(b).triggerHandler("jqGridBeforeSelectRow", [f[0].id, a]); c = c === false || c === "stop" ? false : true; if (c && $.isFunction(b.p.beforeSelectRow)) c = b.p.beforeSelectRow.call(b, f[0].id, a); if (i.tagName === "A" || (i.tagName === "INPUT" || i.tagName === "TEXTAREA" || i.tagName === "OPTION" || i.tagName === "SELECT") && !d) return; if (c === true) { g = f[0].id; k = $.jgrid.getCellIndex(i); N = $(i).closest("td,th").html(); $(b).triggerHandler("jqGridCellSelect", [g, k, N, a]); $.isFunction(b.p.onCellSelect) && b.p.onCellSelect.call(b, g, k, N, a); if (b.p.cellEdit === true) if (b.p.multiselect && d) $(b).jqGrid("setSelection", g, true, a); else { g = f[0].rowIndex; try { $(b).jqGrid("editCell", g, k, true) } catch (h) { } } else if (!b.p.multikey) if (b.p.multiselect && b.p.multiboxonly) if (d) $(b).jqGrid("setSelection", g, true, a); else { var e = b.p.frozenColumns ? b.p.id + "_frozen" : ""; $(b.p.selarrrow).each(function (d, a) { var c = b.rows.namedItem(a); $(c).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(a))[b.p.useProp ? "prop" : "attr"]("checked", false); if (e) { $("#" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(e)).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(e))[b.p.useProp ? "prop" : "attr"]("checked", false) } }); b.p.selarrrow = []; $(b).jqGrid("setSelection", g, true, a) } else $(b).jqGrid("setSelection", g, true, a); else if (a[b.p.multikey]) $(b).jqGrid("setSelection", g, true, a); else if (b.p.multiselect && d) { d = $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + g).is(":checked"); $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + g)[b.p.useProp ? "prop" : "attr"]("checked", d) } } }).bind("reloadGrid", function (d, c) { if (b.p.treeGrid === true) b.p.datatype = b.p.treedatatype; c && c.current && b.grid.selectionPreserver(b); if (b.p.datatype === "local") { $(b).jqGrid("resetSelection"); b.p.data.length && H() } else if (!b.p.treeGrid) { b.p.selrow = null; if (b.p.multiselect) { b.p.selarrrow = []; x(false) } b.p.savedRow = [] } b.p.scroll && t.call(b, true, false); if (c && c.page) { var a = c.page; if (a > b.p.lastpage) a = b.p.lastpage; if (a < 1) a = 1; b.p.page = a; if (b.grid.prevRowHeight) b.grid.bDiv.scrollTop = (a - 1) * b.grid.prevRowHeight * b.p.rowNum; else b.grid.bDiv.scrollTop = 0 } if (b.grid.prevRowHeight && b.p.scroll) { delete b.p.lastpage; b.grid.populateVisible() } else b.grid.populate(); b.p._inlinenav === true && $(b).jqGrid("showAddEditButtons"); return false }).dblclick(function (a) { i = a.target; f = $(i, b.rows).closest("tr.jqgrow"); if ($(f).length === 0) return; g = f[0].rowIndex; k = $.jgrid.getCellIndex(i); $(b).triggerHandler("jqGridDblClickRow", [$(f).attr("id"), g, k, a]); $.isFunction(b.p.ondblClickRow) && b.p.ondblClickRow.call(b, $(f).attr("id"), g, k, a) }).bind("contextmenu", function (a) { i = a.target; f = $(i, b.rows).closest("tr.jqgrow"); if ($(f).length === 0) return; !b.p.multiselect && $(b).jqGrid("setSelection", f[0].id, true, a); g = f[0].rowIndex; k = $.jgrid.getCellIndex(i); $(b).triggerHandler("jqGridRightClickRow", [$(f).attr("id"), g, k, a]); $.isFunction(b.p.onRightClickRow) && b.p.onRightClickRow.call(b, $(f).attr("id"), g, k, a) }); c.bDiv = document.createElement("div"); if (M) if (String(b.p.height).toLowerCase() === "auto") b.p.height = "100%"; $(c.bDiv).append($('<div style="position:relative;' + (M && $.jgrid.msiever() < 8 ? "height:0.01%;" : "") + '"></div>').append("<div></div>").append(this)).addClass("ui-jqgrid-bdiv").css({ height: b.p.height + (isNaN(b.p.height) ? "" : "px"), width: c.width + "px" }).scroll(c.scrollGrid); $("table:first", c.bDiv).css({ width: b.p.tblwidth + "px" }); if (!$.support.tbody) $("tbody", this).length === 2 && $("tbody:gt(0)", this).remove(); if (b.p.multikey) if ($.jgrid.msie) $(c.bDiv).bind("selectstart", function () { return false }); else $(c.bDiv).bind("mousedown", function () { return false }); j && $(c.bDiv).hide(); c.cDiv = document.createElement("div"); var O = b.p.hidegrid === true ? $("<a role='link' href='javascript:void(0)'/>").addClass("ui-jqgrid-titlebar-close HeaderButton").hover(function () { O.addClass("ui-state-hover") }, function () { O.removeClass("ui-state-hover") }).append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css(h === "rtl" ? "left" : "right", "0px") : ""; $(c.cDiv).append(O).append("<span class='ui-jqgrid-title" + (h === "rtl" ? "-rtl" : "") + "'>" + b.p.caption + "</span>").addClass("ui-jqgrid-titlebar ui-widget-header ui-corner-top ui-helper-clearfix"); $(c.cDiv).insertBefore(c.hDiv); if (b.p.toolbar[0]) { c.uDiv = document.createElement("div"); if (b.p.toolbar[1] === "top") $(c.uDiv).insertBefore(c.hDiv); else b.p.toolbar[1] === "bottom" && $(c.uDiv).insertAfter(c.hDiv); if (b.p.toolbar[1] === "both") { c.ubDiv = document.createElement("div"); $(c.uDiv).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id).insertBefore(c.hDiv); $(c.ubDiv).addClass("ui-userdata ui-state-default").attr("id", "tb_" + this.id).insertAfter(c.hDiv); j && $(c.ubDiv).hide() } else $(c.uDiv).width(c.width).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id); j && $(c.uDiv).hide() } if (b.p.toppager) { b.p.toppager = $.jgrid.jqID(b.p.id) + "_toppager"; c.topDiv = $("<div id='" + b.p.toppager + "'></div>")[0]; b.p.toppager = "#" + b.p.toppager; $(c.topDiv).addClass("ui-state-default ui-jqgrid-toppager").width(c.width).insertBefore(c.hDiv); U(b.p.toppager, "_t") } if (b.p.footerrow) { c.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0]; s = $("<div class='ui-jqgrid-hbox" + (h === "rtl" ? "-rtl" : "") + "'></div>"); $(c.sDiv).append(s).width(c.width).insertAfter(c.hDiv); $(s).append(B); c.footers = $(".ui-jqgrid-ftable", c.sDiv)[0].rows[0].cells; if (b.p.rownumbers) c.footers[0].className = "ui-state-default jqgrid-rownum"; j && $(c.sDiv).hide() } s = null; if (b.p.caption) { var ob = b.p.datatype; if (b.p.hidegrid === true) { $(".ui-jqgrid-titlebar-close", c.cDiv).click(function (e) { var f = $.isFunction(b.p.onHeaderClick), d = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv", a, g = this; if (b.p.toolbar[0] === true) { if (b.p.toolbar[1] === "both") d += ", #" + $(c.ubDiv).attr("id"); d += ", #" + $(c.uDiv).attr("id") } a = $(d, "#gview_" + $.jgrid.jqID(b.p.id)).length; if (b.p.gridstate === "visible") $(d, "#gbox_" + $.jgrid.jqID(b.p.id)).slideUp("fast", function () { a--; if (a === 0) { $("span", g).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); b.p.gridstate = "hidden"; $("#gbox_" + $.jgrid.jqID(b.p.id)).hasClass("ui-resizable") && $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(b.p.id)).hide(); $(b).triggerHandler("jqGridHeaderClick", [b.p.gridstate, e]); if (f) !j && b.p.onHeaderClick.call(b, b.p.gridstate, e) } }); else b.p.gridstate === "hidden" && $(d, "#gbox_" + $.jgrid.jqID(b.p.id)).slideDown("fast", function () { a--; if (a === 0) { $("span", g).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); if (j) { b.p.datatype = ob; m(); j = false } b.p.gridstate = "visible"; $("#gbox_" + $.jgrid.jqID(b.p.id)).hasClass("ui-resizable") && $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(b.p.id)).show(); $(b).triggerHandler("jqGridHeaderClick", [b.p.gridstate, e]); if (f) !j && b.p.onHeaderClick.call(b, b.p.gridstate, e) } }); return false }); if (j) { b.p.datatype = "local"; $(".ui-jqgrid-titlebar-close", c.cDiv).trigger("click") } } } else $(c.cDiv).hide(); $(c.hDiv).after(c.bDiv).mousemove(function (a) { if (c.resizing) { c.dragMove(a); return false } }); $(".ui-jqgrid-labels", c.hDiv).bind("selectstart", function () { return false }); $(document).mouseup(function () { if (c.resizing) { c.dragEnd(); return false } return true }); b.formatCol = u; b.sortData = V; b.updatepager = jb; b.refreshIndex = H; b.setHeadCheckBox = x; b.constructTr = I; b.formatter = function (c, a, b, d, e) { return S(c, a, b, d, e) }; $.extend(c, { populate: m, emptyRows: t }); this.grid = c; b.addXmlData = function (a) { K(a, b.grid.bDiv) }; b.addJSONData = function (a) { y(a, b.grid.bDiv) }; this.grid.cols = this.rows[0].cells; $(b).triggerHandler("jqGridInitGrid"); $.isFunction(b.p.onInitGrid) && b.p.onInitGrid.call(b); m(); b.p.hiddengrid = false }) }; $.jgrid.extend({ getGridParam: function (b) { var a = this[0]; return !a || !a.grid ? void 0 : !b ? a.p : a.p[b] !== undefined ? a.p[b] : null }, setGridParam: function (a) { return this.each(function () { this.grid && typeof a === "object" && $.extend(true, this.p, a) }) }, getDataIDs: function () { var c = [], b = 0, a, d = 0; this.each(function () { a = this.rows.length; if (a && a > 0) while (b < a) { if ($(this.rows[b]).hasClass("jqgrow")) { c[d] = this.rows[b].id; d++ } b++ } }); return c }, setSelection: function (a, b, c) { return this.each(function () { var d = this, f, e, j, h, i, g; if (a === undefined) return; b = b === false ? false : true; e = d.rows.namedItem(String(a)); if (!e || !e.className || e.className.indexOf("ui-state-disabled") > -1) return; function k(e) { var c = $(d.grid.bDiv)[0].clientHeight, b = $(d.grid.bDiv)[0].scrollTop, a = $(d.rows[e]).position().top, f = d.rows[e].clientHeight; if (a + f >= c + b) $(d.grid.bDiv)[0].scrollTop = a - (c + b) + f + b; else if (a < c + b) if (a < b) $(d.grid.bDiv)[0].scrollTop = a } if (d.p.scrollrows === true) { j = d.rows.namedItem(a).rowIndex; j >= 0 && k(j) } if (d.p.frozenColumns === true) g = d.p.id + "_frozen"; if (!d.p.multiselect) { if (e.className !== "ui-subgrid") { if (d.p.selrow !== e.id) { $(d.rows.namedItem(d.p.selrow)).removeClass("ui-state-highlight").attr({ "aria-selected": "false", tabindex: "-1" }); $(e).addClass("ui-state-highlight").attr({ "aria-selected": "true", tabindex: "0" }); if (g) { $("#" + $.jgrid.jqID(d.p.selrow), "#" + $.jgrid.jqID(g)).removeClass("ui-state-highlight"); $("#" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(g)).addClass("ui-state-highlight") } f = true } else f = false; d.p.selrow = e.id; if (b) { $(d).triggerHandler("jqGridSelectRow", [e.id, f, c]); d.p.onSelectRow && d.p.onSelectRow.call(d, e.id, f, c) } } } else { d.setHeadCheckBox(false); d.p.selrow = e.id; h = $.inArray(d.p.selrow, d.p.selarrrow); if (h === -1) { e.className !== "ui-subgrid" && $(e).addClass("ui-state-highlight").attr("aria-selected", "true"); f = true; d.p.selarrrow.push(d.p.selrow) } else { e.className !== "ui-subgrid" && $(e).removeClass("ui-state-highlight").attr("aria-selected", "false"); f = false; d.p.selarrrow.splice(h, 1); i = d.p.selarrrow[0]; d.p.selrow = i === undefined ? null : i } $("#jqg_" + $.jgrid.jqID(d.p.id) + "_" + $.jgrid.jqID(e.id))[d.p.useProp ? "prop" : "attr"]("checked", f); if (g) { if (h === -1) $("#" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(g)).addClass("ui-state-highlight"); else $("#" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(g)).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(d.p.id) + "_" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(g))[d.p.useProp ? "prop" : "attr"]("checked", f) } if (b) { $(d).triggerHandler("jqGridSelectRow", [e.id, f, c]); d.p.onSelectRow && d.p.onSelectRow.call(d, e.id, f, c) } } }) }, resetSelection: function (a) { return this.each(function () { var b = this, e, d, c; if (b.p.frozenColumns === true) c = b.p.id + "_frozen"; if (a !== undefined) { d = a === b.p.selrow ? b.p.selrow : a; $("#" + $.jgrid.jqID(b.p.id) + " tbody:first tr#" + $.jgrid.jqID(d)).removeClass("ui-state-highlight").attr("aria-selected", "false"); c && $("#" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(c)).removeClass("ui-state-highlight"); if (b.p.multiselect) { $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(b.p.id))[b.p.useProp ? "prop" : "attr"]("checked", false); c && $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(d), "#" + $.jgrid.jqID(c))[b.p.useProp ? "prop" : "attr"]("checked", false); b.setHeadCheckBox(false) } d = null } else if (!b.p.multiselect) { if (b.p.selrow) { $("#" + $.jgrid.jqID(b.p.id) + " tbody:first tr#" + $.jgrid.jqID(b.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected", "false"); c && $("#" + $.jgrid.jqID(b.p.selrow), "#" + $.jgrid.jqID(c)).removeClass("ui-state-highlight"); b.p.selrow = null } } else { $(b.p.selarrrow).each(function (d, a) { e = b.rows.namedItem(a); $(e).removeClass("ui-state-highlight").attr("aria-selected", "false"); $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(a))[b.p.useProp ? "prop" : "attr"]("checked", false); if (c) { $("#" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(c)).removeClass("ui-state-highlight"); $("#jqg_" + $.jgrid.jqID(b.p.id) + "_" + $.jgrid.jqID(a), "#" + $.jgrid.jqID(c))[b.p.useProp ? "prop" : "attr"]("checked", false) } }); b.setHeadCheckBox(false); b.p.selarrrow = [] } if (b.p.cellEdit === true) if (parseInt(b.p.iCol, 10) >= 0 && parseInt(b.p.iRow, 10) >= 0) { $("td:eq(" + b.p.iCol + ")", b.rows[b.p.iRow]).removeClass("edit-cell ui-state-highlight"); $(b.rows[b.p.iRow]).removeClass("selected-row ui-state-hover") } b.p.savedRow = [] }) }, getRowData: function (f) { var a = {}, c, b = false, d, e = 0; this.each(function () { var g = this, h, i; if (f === undefined) { b = true; c = []; d = g.rows.length } else { i = g.rows.namedItem(f); if (!i) return a; d = 2 } while (e < d) { if (b) i = g.rows[e]; if ($(i).hasClass("jqgrow")) { $('td[role="gridcell"]', i).each(function (b) { h = g.p.colModel[b].name; if (h !== "cb" && h !== "subgrid" && h !== "rn") if (g.p.treeGrid === true && h === g.p.ExpandColumn) a[h] = $.jgrid.htmlDecode($("span:first", this).html()); else try { a[h] = $.unformat.call(g, this, { rowId: i.id, colModel: g.p.colModel[b] }, b) } catch (c) { a[h] = $.jgrid.htmlDecode($(this).html()) } }); if (b) { c.push(a); a = {} } } e++ } }); return c || a }, delRowData: function (c) { var a = false, b, d; this.each(function () { var e = this; b = e.rows.namedItem(c); if (!b) return false; $(b).remove(); e.p.records--; e.p.reccount--; e.updatepager(true, false); a = true; if (e.p.multiselect) { d = $.inArray(c, e.p.selarrrow); d !== -1 && e.p.selarrrow.splice(d, 1) } if (e.p.multiselect && e.p.selarrrow.length > 0) e.p.selrow = e.p.selarrrow[e.p.selarrrow.length - 1]; else e.p.selrow = null; if (e.p.datatype === "local") { var h = $.jgrid.stripPref(e.p.idPrefix, c), f = e.p._index[h]; if (f !== undefined) { e.p.data.splice(f, 1); e.refreshIndex() } } if (e.p.altRows === true && a) { var g = e.p.altclass; $(e.rows).each(function (a) { if (a % 2 === 1) $(this).addClass(g); else $(this).removeClass(g) }) } }); return a }, setRowData: function (c, f, e) { var a, b = true, d; this.each(function () { if (!this.grid) return false; var g = this, j, h, m = typeof e, i = {}; h = g.rows.namedItem(c); if (!h) return false; if (f) try { $(this.p.colModel).each(function (e) { a = this.name; var b = $.jgrid.getAccessor(f, a); if (b !== undefined) { i[a] = this.formatter && typeof this.formatter === "string" && this.formatter === "date" ? $.unformat.date.call(g, b, this) : b; j = g.formatter(c, b, e, f, "edit"); d = this.title ? { title: $.jgrid.stripHtml(j)} : {}; if (g.p.treeGrid === true && a === g.p.ExpandColumn) $("td[role='gridcell']:eq(" + e + ") > span:first", h).html(j).attr(d); else $("td[role='gridcell']:eq(" + e + ")", h).html(j).attr(d) } }); if (g.p.datatype === "local") { var n = $.jgrid.stripPref(g.p.idPrefix, c), l = g.p._index[n], k; if (g.p.treeGrid) for (k in g.p.treeReader) if (g.p.treeReader.hasOwnProperty(k)) delete i[g.p.treeReader[k]]; if (l !== undefined) g.p.data[l] = $.extend(true, g.p.data[l], i); i = null } } catch (o) { b = false } if (b) { if (m === "string") $(h).addClass(e); else m === "object" && $(h).css(e); $(g).triggerHandler("jqGridAfterGridComplete") } }); return b }, addRowData: function (a, e, l, s) { if (!l) l = "last"; var r = false, o, b, h, p, f, c, i, n, g = "", j, k, m, d, t, q; if (e) { if ($.isArray(e)) { j = true; l = "last"; k = a } else { e = [e]; j = false } this.each(function () { var u = this, y = e.length; f = u.p.rownumbers === true ? 1 : 0; h = u.p.multiselect === true ? 1 : 0; p = u.p.subGrid === true ? 1 : 0; if (!j) if (a !== undefined) a = String(a); else { a = $.jgrid.randId(); if (u.p.keyIndex !== false) { k = u.p.colModel[u.p.keyIndex + h + p + f].name; if (e[0][k] !== undefined) a = e[0][k] } } m = u.p.altclass; var w = 0, x = "", v = {}, z = $.isFunction(u.p.afterInsertRow) ? true : false; while (w < y) { d = e[w]; b = []; if (j) { try { a = d[k]; if (a === undefined) a = $.jgrid.randId() } catch (A) { a = $.jgrid.randId() } x = u.p.altRows === true ? (u.rows.length - 1) % 2 === 0 ? m : "" : "" } q = a; a = u.p.idPrefix + a; if (f) { g = u.formatCol(0, 1, "", null, a, true); b[b.length] = '<td role="gridcell" class="ui-state-default jqgrid-rownum" ' + g + ">0</td>" } if (h) { n = '<input role="checkbox" type="checkbox" id="jqg_' + u.p.id + "_" + a + '" class="cbox"/>'; g = u.formatCol(f, 1, "", null, a, true); b[b.length] = '<td role="gridcell" ' + g + ">" + n + "</td>" } if (p) b[b.length] = $(u).jqGrid("addSubGridCell", h + f, 1); for (i = h + p + f; i < u.p.colModel.length; i++) { t = u.p.colModel[i]; o = t.name; v[o] = d[o]; n = u.formatter(a, $.jgrid.getAccessor(d, o), i, d); g = u.formatCol(i, 1, n, d, a, v); b[b.length] = '<td role="gridcell" ' + g + ">" + n + "</td>" } b.unshift(u.constructTr(a, false, x, v, d, false)); b[b.length] = "</tr>"; if (u.rows.length === 0) $("table:first", u.grid.bDiv).append(b.join("")); else switch (l) { case "last": $(u.rows[u.rows.length - 1]).after(b.join("")); c = u.rows.length - 1; break; case "first": $(u.rows[0]).after(b.join("")); c = 1; break; case "after": c = u.rows.namedItem(s); if (c) if ($(u.rows[c.rowIndex + 1]).hasClass("ui-subgrid")) $(u.rows[c.rowIndex + 1]).after(b); else $(c).after(b.join("")); c++; break; case "before": c = u.rows.namedItem(s); if (c) { $(c).before(b.join("")); c = c.rowIndex } c-- } u.p.subGrid === true && $(u).jqGrid("addSubGrid", h + f, c); u.p.records++; u.p.reccount++; $(u).triggerHandler("jqGridAfterInsertRow", [a, d, d]); z && u.p.afterInsertRow.call(u, a, d, d); w++; if (u.p.datatype === "local") { v[u.p.localReader.id] = q; u.p._index[q] = u.p.data.length; u.p.data.push(v); v = {} } } if (u.p.altRows === true && !j) if (l === "last") (u.rows.length - 1) % 2 === 1 && $(u.rows[u.rows.length - 1]).addClass(m); else $(u.rows).each(function (a) { if (a % 2 === 1) $(this).addClass(m); else $(this).removeClass(m) }); u.updatepager(true, true); r = true }) } return r }, footerData: function (a, b, e) { var c, d = false, g = {}, f; function h(a) { var b; for (b in a) if (a.hasOwnProperty(b)) return false; return true } if (a === undefined) a = "get"; if (typeof e !== "boolean") e = true; a = a.toLowerCase(); this.each(function () { var i = this, j; if (!i.grid || !i.p.footerrow) return false; if (a === "set") if (h(b)) return false; d = true; $(this.p.colModel).each(function (h) { c = this.name; if (a === "set") { if (b[c] !== undefined) { j = e ? i.formatter("", b[c], h, b, "edit") : b[c]; f = this.title ? { title: $.jgrid.stripHtml(j)} : {}; $("tr.footrow td:eq(" + h + ")", i.grid.sDiv).html(j).attr(f); d = true } } else if (a === "get") g[c] = $("tr.footrow td:eq(" + h + ")", i.grid.sDiv).html() }) }); return a === "get" ? g : d }, showHideCol: function (b, a) { return this.each(function () { var c = this, f = false, g = $.jgrid.cell_width ? 0 : c.p.cellLayout, d; if (!c.grid) return; if (typeof b === "string") b = [b]; a = a !== "none" ? "" : "none"; var e = a === "" ? true : false, h = c.p.groupHeader && (typeof c.p.groupHeader === "object" || $.isFunction(c.p.groupHeader)); h && $(c).jqGrid("destroyGroupHeader", false); $(this.p.colModel).each(function (h) { if ($.inArray(this.name, b) !== -1 && this.hidden === e) { if (c.p.frozenColumns === true && this.frozen === true) return true; $("tr", c.grid.hDiv).each(function () { $(this.cells[h]).css("display", a) }); $(c.rows).each(function () { !$(this).hasClass("jqgroup") && $(this.cells[h]).css("display", a) }); c.p.footerrow && $("tr.footrow td:eq(" + h + ")", c.grid.sDiv).css("display", a); d = parseInt(this.width, 10); if (a === "none") c.p.tblwidth -= d + g; else c.p.tblwidth += d + g; this.hidden = !e; f = true; $(c).triggerHandler("jqGridShowHideCol", [e, this.name, h]) } }); if (f === true) { if (c.p.shrinkToFit === true && !isNaN(c.p.height)) c.p.tblwidth += parseInt(c.p.scrollOffset, 10); $(c).jqGrid("setGridWidth", c.p.shrinkToFit === true ? c.p.tblwidth : c.p.width) } h && $(c).jqGrid("setGroupHeaders", c.p.groupHeader) }) }, hideCol: function (a) { return this.each(function () { $(this).jqGrid("showHideCol", a, "none") }) }, showCol: function (a) { return this.each(function () { $(this).jqGrid("showHideCol", a, "") }) }, remapColumns: function (b, e, f) { function c(a) { var c; if (a.length) c = $.makeArray(a); else c = $.extend({}, a); $.each(b, function (b) { a[b] = c[this] }) } var a = this.get(0); function d(a, c) { $(">tr" + (c || ""), a).each(function () { var a = this, c = $.makeArray(a.cells); $.each(b, function () { var b = c[this]; b && a.appendChild(b) }) }) } c(a.p.colModel); c(a.p.colNames); c(a.grid.headers); d($("thead:first", a.grid.hDiv), f && ":not(.ui-jqgrid-labels)"); e && d($("#" + $.jgrid.jqID(a.p.id) + " tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot"); a.p.footerrow && d($("tbody:first", a.grid.sDiv)); if (a.p.remapColumns) if (!a.p.remapColumns.length) a.p.remapColumns = $.makeArray(b); else c(a.p.remapColumns); a.p.lastsort = $.inArray(a.p.lastsort, b); if (a.p.treeGrid) a.p.expColInd = $.inArray(a.p.expColInd, b); $(a).triggerHandler("jqGridRemapColumns", [b, e, f]) }, setGridWidth: function (a, b) { return this.each(function () { if (!this.grid) return; var c = this, d, f = 0, g = $.jgrid.cell_width ? 0 : c.p.cellLayout, e, h = 0, n = false, k = c.p.scrollOffset, l, i = 0, j; if (typeof b !== "boolean") b = c.p.shrinkToFit; if (isNaN(a)) return; a = parseInt(a, 10); c.grid.width = c.p.width = a; $("#gbox_" + $.jgrid.jqID(c.p.id)).css("width", a + "px"); $("#gview_" + $.jgrid.jqID(c.p.id)).css("width", a + "px"); $(c.grid.bDiv).css("width", a + "px"); $(c.grid.hDiv).css("width", a + "px"); c.p.pager && $(c.p.pager).css("width", a + "px"); c.p.toppager && $(c.p.toppager).css("width", a + "px"); if (c.p.toolbar[0] === true) { $(c.grid.uDiv).css("width", a + "px"); c.p.toolbar[1] === "both" && $(c.grid.ubDiv).css("width", a + "px") } c.p.footerrow && $(c.grid.sDiv).css("width", a + "px"); if (b === false && c.p.forceFit === true) c.p.forceFit = false; if (b === true) { $.each(c.p.colModel, function () { if (this.hidden === false) { d = this.widthOrg; f += d + g; if (this.fixed) i += d + g; else h++ } }); if (h === 0) return; c.p.tblwidth = f; l = a - g * h - i; if (!isNaN(c.p.height)) if ($(c.grid.bDiv)[0].clientHeight < $(c.grid.bDiv)[0].scrollHeight || c.rows.length === 1) { n = true; l -= k } f = 0; var m = c.grid.cols.length > 0; $.each(c.p.colModel, function (a) { if (this.hidden === false && !this.fixed) { d = this.widthOrg; d = Math.round(l * d / (c.p.tblwidth - g * h - i)); if (d < 0) return; this.width = d; f += d; c.grid.headers[a].width = d; c.grid.headers[a].el.style.width = d + "px"; if (c.p.footerrow) c.grid.footers[a].style.width = d + "px"; if (m) c.grid.cols[a].style.width = d + "px"; e = a } }); if (!e) return; j = 0; if (n) { if (a - i - (f + g * h) !== k) j = a - i - (f + g * h) - k } else if (Math.abs(a - i - (f + g * h)) !== 1) j = a - i - (f + g * h); c.p.colModel[e].width += j; c.p.tblwidth = f + j + g * h + i; if (c.p.tblwidth > a) { var o = c.p.tblwidth - parseInt(a, 10); c.p.tblwidth = a; d = c.p.colModel[e].width = c.p.colModel[e].width - o } else d = c.p.colModel[e].width; c.grid.headers[e].width = d; c.grid.headers[e].el.style.width = d + "px"; if (m) c.grid.cols[e].style.width = d + "px"; if (c.p.footerrow) c.grid.footers[e].style.width = d + "px" } if (c.p.tblwidth) { $("table:first", c.grid.bDiv).css("width", c.p.tblwidth + "px"); $("table:first", c.grid.hDiv).css("width", c.p.tblwidth + "px"); c.grid.hDiv.scrollLeft = c.grid.bDiv.scrollLeft; c.p.footerrow && $("table:first", c.grid.sDiv).css("width", c.p.tblwidth + "px") } }) }, setGridHeight: function (a) { return this.each(function () { var b = this; if (!b.grid) return; var c = $(b.grid.bDiv); c.css({ height: a + (isNaN(a) ? "" : "px") }); b.p.frozenColumns === true && $("#" + $.jgrid.jqID(b.p.id) + "_frozen").parent().height(c.height() - 16); b.p.height = a; b.p.scroll && b.grid.populateVisible() }) }, setCaption: function (a) { return this.each(function () { this.p.caption = a; $("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl", this.grid.cDiv).html(a); $(this.grid.cDiv).show() }) }, setLabel: function (c, b, a, d) { return this.each(function () { var g = this, f = -1; if (!g.grid) return; if (c !== undefined) $(g.p.colModel).each(function (a) { if (this.name === c) { f = a; return false } }); else return; if (f >= 0) { var e = $("tr.ui-jqgrid-labels th:eq(" + f + ")", g.grid.hDiv); if (b) { var h = $(".s-ico", e); $("[id^=jqgh_]", e).empty().html(b).append(h); g.p.colNames[f] = b } if (a) if (typeof a === "string") $(e).addClass(a); else $(e).css(a); typeof d === "object" && $(e).attr(d) } }) }, setCell: function (d, c, a, b, e, f) { return this.each(function () { var g = this, h = -1, k, m; if (!g.grid) return; if (isNaN(c)) $(g.p.colModel).each(function (a) { if (this.name === c) { h = a; return false } }); else h = parseInt(c, 10); if (h >= 0) { var n = g.rows.namedItem(d); if (n) { var i = $("td:eq(" + h + ")", n); if (a !== "" || f === true) { k = g.formatter(d, a, h, n, "edit"); m = g.p.colModel[h].title ? { title: $.jgrid.stripHtml(k)} : {}; if (g.p.treeGrid && $(".tree-wrap", $(i)).length > 0) $("span", $(i)).html(k).attr(m); else $(i).html(k).attr(m); if (g.p.datatype === "local") { var j = g.p.colModel[h], l; a = j.formatter && typeof j.formatter === "string" && j.formatter === "date" ? $.unformat.date.call(g, a, j) : a; l = g.p._index[$.jgrid.stripPref(g.p.idPrefix, d)]; if (l !== undefined) g.p.data[l][j.name] = a } } if (typeof b === "string") $(i).addClass(b); else b && $(i).css(b); typeof e === "object" && $(i).attr(e) } } }) }, getCell: function (c, a) { var b = false; this.each(function () { var e = this, d = -1; if (!e.grid) return; if (isNaN(a)) $(e.p.colModel).each(function (b) { if (this.name === a) { d = b; return false } }); else d = parseInt(a, 10); if (d >= 0) { var f = e.rows.namedItem(c); if (f) try { b = $.unformat.call(e, $("td:eq(" + d + ")", f), { rowId: f.id, colModel: e.p.colModel[d] }, d) } catch (g) { b = $.jgrid.htmlDecode($("td:eq(" + d + ")", f).html()) } } }); return b }, getCol: function (h, g, b) { var a = [], d, i = 0, f, c, e; g = typeof g !== "boolean" ? false : g; if (b === undefined) b = false; this.each(function () { var j = this, k = -1; if (!j.grid) return; if (isNaN(h)) $(j.p.colModel).each(function (a) { if (this.name === h) { k = a; return false } }); else k = parseInt(h, 10); if (k >= 0) { var m = j.rows.length, l = 0; if (m && m > 0) { while (l < m) { if ($(j.rows[l]).hasClass("jqgrow")) { try { d = $.unformat.call(j, $(j.rows[l].cells[k]), { rowId: j.rows[l].id, colModel: j.p.colModel[k] }, k) } catch (n) { d = $.jgrid.htmlDecode(j.rows[l].cells[k].innerHTML) } if (b) { e = parseFloat(d); i += e; if (c === undefined) c = f = e; f = Math.min(f, e); c = Math.max(c, e) } else if (g) a.push({ id: j.rows[l].id, value: d }); else a.push(d) } l++ } if (b) switch (b.toLowerCase()) { case "sum": a = i; break; case "avg": a = i / m; break; case "count": a = m; break; case "min": a = f; break; case "max": a = c } } } }); return a }, clearGridData: function (a) { return this.each(function () { var b = this; if (!b.grid) return; if (typeof a !== "boolean") a = false; if (b.p.deepempty) $("#" + $.jgrid.jqID(b.p.id) + " tbody:first tr:gt(0)").remove(); else { var c = $("#" + $.jgrid.jqID(b.p.id) + " tbody:first tr:first")[0]; $("#" + $.jgrid.jqID(b.p.id) + " tbody:first").empty().append(c) } b.p.footerrow && a && $(".ui-jqgrid-ftable td", b.grid.sDiv).html("&#160;"); b.p.selrow = null; b.p.selarrrow = []; b.p.savedRow = []; b.p.records = 0; b.p.page = 1; b.p.lastpage = 0; b.p.reccount = 0; b.p.data = []; b.p._index = {}; b.updatepager(true, false) }) }, getInd: function (c, d) { var b = false, a; this.each(function () { a = this.rows.namedItem(c); if (a) b = d === true ? a : a.rowIndex }); return b }, bindKeys: function (b) { var a = $.extend({ onEnter: null, onSpace: null, onLeftKey: null, onRightKey: null, scrollingRows: true }, b || {}); return this.each(function () { var b = this; !$("body").is("[role]") && $("body").attr("role", "application"); b.p.scrollrows = a.scrollingRows; $(b).keydown(function (d) { var f = $(b).find("tr[tabindex=0]")[0], e, c, g, h = b.p.treeReader.expanded_field; if (f) { g = b.p._index[$.jgrid.stripPref(b.p.idPrefix, f.id)]; if (d.keyCode === 37 || d.keyCode === 38 || d.keyCode === 39 || d.keyCode === 40) { if (d.keyCode === 38) { c = f.previousSibling; e = ""; if (c) if ($(c).is(":hidden")) while (c) { c = c.previousSibling; if (!$(c).is(":hidden") && $(c).hasClass("jqgrow")) { e = c.id; break } } else e = c.id; $(b).jqGrid("setSelection", e, true, d); d.preventDefault() } if (d.keyCode === 40) { c = f.nextSibling; e = ""; if (c) if ($(c).is(":hidden")) while (c) { c = c.nextSibling; if (!$(c).is(":hidden") && $(c).hasClass("jqgrow")) { e = c.id; break } } else e = c.id; $(b).jqGrid("setSelection", e, true, d); d.preventDefault() } if (d.keyCode === 37) { b.p.treeGrid && b.p.data[g][h] && $(f).find("div.treeclick").trigger("click"); $(b).triggerHandler("jqGridKeyLeft", [b.p.selrow]); $.isFunction(a.onLeftKey) && a.onLeftKey.call(b, b.p.selrow) } if (d.keyCode === 39) { b.p.treeGrid && !b.p.data[g][h] && $(f).find("div.treeclick").trigger("click"); $(b).triggerHandler("jqGridKeyRight", [b.p.selrow]); $.isFunction(a.onRightKey) && a.onRightKey.call(b, b.p.selrow) } } else if (d.keyCode === 13) { $(b).triggerHandler("jqGridKeyEnter", [b.p.selrow]); $.isFunction(a.onEnter) && a.onEnter.call(b, b.p.selrow) } else if (d.keyCode === 32) { $(b).triggerHandler("jqGridKeySpace", [b.p.selrow]); $.isFunction(a.onSpace) && a.onSpace.call(b, b.p.selrow) } } }) }) }, unbindKeys: function () { return this.each(function () { $(this).unbind("keydown") }) }, getLocalRow: function (b) { var c = false, a; this.each(function () { if (b !== undefined) { a = this.p._index[$.jgrid.stripPref(this.p.idPrefix, b)]; if (a >= 0) c = this.p.data[a] } }); return c } }) })(jQuery); (function (a) { "use strict"; a.jgrid.extend({ getColProp: function (e) { var c = {}, d = this[0]; if (!d.grid) return false; for (var b = d.p.colModel, a = 0; a < b.length; a++) if (b[a].name === e) { c = b[a]; break } return c }, setColProp: function (c, b) { return this.each(function () { if (this.grid) if (b) for (var e = this.p.colModel, d = 0; d < e.length; d++) if (e[d].name === c) { a.extend(true, this.p.colModel[d], b); break } }) }, sortGrid: function (a, b, c) { return this.each(function () { var d = this, f = -1, e; if (!d.grid) return; if (!a) a = d.p.sortname; for (e = 0; e < d.p.colModel.length; e++) if (d.p.colModel[e].index === a || d.p.colModel[e].name === a) { f = e; break } if (f !== -1) { var g = d.p.colModel[f].sortable; if (typeof g !== "boolean") g = true; if (typeof b !== "boolean") b = false; g && d.sortData("jqgh_" + d.p.id + "_" + a, f, b, c) } }) }, clearBeforeUnload: function () { return this.each(function () { var b = this.grid; b.emptyRows.call(this, true, true); a(b.hDiv).unbind("mousemove"); a(this).unbind(); b.dragEnd = null; b.dragMove = null; b.dragStart = null; b.emptyRows = null; b.populate = null; b.populateVisible = null; b.scrollGrid = null; b.selectionPreserver = null; b.bDiv = null; b.cDiv = null; b.hDiv = null; b.cols = null; for (var d = b.headers.length, c = 0; c < d; c++) b.headers[c].el = null; this.formatCol = null; this.sortData = null; this.updatepager = null; this.refreshIndex = null; this.setHeadCheckBox = null; this.constructTr = null; this.formatter = null; this.addXmlData = null; this.addJSONData = null }) }, GridDestroy: function () { return this.each(function () { if (this.grid) { this.p.pager && a(this.p.pager).remove(); try { a(this).jqGrid("clearBeforeUnload"); a("#gbox_" + a.jgrid.jqID(this.id)).remove() } catch (b) { } } }) }, GridUnload: function () { return this.each(function () { if (!this.grid) return; var d = { id: a(this).attr("id"), cl: a(this).attr("class") }; this.p.pager && a(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager corner-bottom"); var b = document.createElement("table"); a(b).attr({ id: d.id }); b.className = d.cl; var c = a.jgrid.jqID(this.id); a(b).removeClass("ui-jqgrid-btable"); if (a(this.p.pager).parents("#gbox_" + c).length === 1) { a(b).insertBefore("#gbox_" + c).show(); a(this.p.pager).insertBefore("#gbox_" + c) } else a(b).insertBefore("#gbox_" + c).show(); a(this).jqGrid("clearBeforeUnload"); a("#gbox_" + c).remove() }) }, setGridState: function (b) { return this.each(function () { if (!this.grid) return; var c = this; if (b === "hidden") { a(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + a.jgrid.jqID(c.p.id)).slideUp("fast"); c.p.pager && a(c.p.pager).slideUp("fast"); c.p.toppager && a(c.p.toppager).slideUp("fast"); if (c.p.toolbar[0] === true) { c.p.toolbar[1] === "both" && a(c.grid.ubDiv).slideUp("fast"); a(c.grid.uDiv).slideUp("fast") } c.p.footerrow && a(".ui-jqgrid-sdiv", "#gbox_" + a.jgrid.jqID(c.p.id)).slideUp("fast"); a(".ui-jqgrid-titlebar-close span", c.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"); c.p.gridstate = "hidden" } else if (b === "visible") { a(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + a.jgrid.jqID(c.p.id)).slideDown("fast"); c.p.pager && a(c.p.pager).slideDown("fast"); c.p.toppager && a(c.p.toppager).slideDown("fast"); if (c.p.toolbar[0] === true) { c.p.toolbar[1] === "both" && a(c.grid.ubDiv).slideDown("fast"); a(c.grid.uDiv).slideDown("fast") } c.p.footerrow && a(".ui-jqgrid-sdiv", "#gbox_" + a.jgrid.jqID(c.p.id)).slideDown("fast"); a(".ui-jqgrid-titlebar-close span", c.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"); c.p.gridstate = "visible" } }) }, filterToolbar: function (b) { b = a.extend({ autosearch: true, searchOnEnter: true, beforeSearch: null, afterSearch: null, beforeClear: null, afterClear: null, searchurl: "", stringResult: false, groupOp: "AND", defaultSearch: "bw", searchOperators: false, operandTitle: "Click to select search operation.", operands: { eq: "==", ne: "!", lt: "<", le: "<=", gt: ">", ge: ">=", bw: "^", bn: "!^", "in": "=", ni: "!=", ew: "|", en: "!@", cn: "~", nc: "!~", nu: "#", nn: "!#"} }, a.jgrid.search, b || {}); return this.each(function () { var c = this; if (this.ftoolbar) return; var d = function () { var h = {}, m = 0, j, f, k = {}, e; a.each(c.p.colModel, function () { var d = a("#gs_" + a.jgrid.jqID(this.name), this.frozen === true && c.p.frozenColumns === true ? c.grid.fhDiv : c.grid.hDiv); f = this.index || this.name; if (b.searchOperators) e = d.parent().prev().children("a").attr("soper") || b.defaultSearch; else e = this.searchoptions && this.searchoptions.sopt ? this.searchoptions.sopt[0] : this.stype === "select" ? "eq" : b.defaultSearch; j = this.stype === "custom" && a.isFunction(this.searchoptions.custom_value) && d.length > 0 && d[0].nodeName.toUpperCase() === "SPAN" ? this.searchoptions.custom_value.call(c, d.children(".customelement:first"), "get") : d.val(); if (j || e === "nu" || e === "nn") { h[f] = j; k[f] = e; m++ } else try { delete c.p.postData[f] } catch (g) { } }); var n = m > 0 ? true : false; if (b.stringResult === true || c.p.datatype === "local") { var d = '{"groupOp":"' + b.groupOp + '","rules":[', l = 0; a.each(h, function (a, b) { if (l > 0) d += ","; d += '{"field":"' + a + '",'; d += '"op":"' + k[a] + '",'; b += ""; d += '"data":"' + b.replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}'; l++ }); d += "]}"; a.extend(c.p.postData, { filters: d }); a.each(["searchField", "searchString", "searchOper"], function (b, a) { if (c.p.postData.hasOwnProperty(a)) delete c.p.postData[a] }) } else a.extend(c.p.postData, h); var g; if (c.p.searchurl) { g = c.p.url; a(c).jqGrid("setGridParam", { url: c.p.searchurl }) } var i = a(c).triggerHandler("jqGridToolbarBeforeSearch") === "stop" ? true : false; if (!i && a.isFunction(b.beforeSearch)) i = b.beforeSearch.call(c); !i && a(c).jqGrid("setGridParam", { search: n }).trigger("reloadGrid", [{ page: 1}]); g && a(c).jqGrid("setGridParam", { url: g }); a(c).triggerHandler("jqGridToolbarAfterSearch"); a.isFunction(b.afterSearch) && b.afterSearch.call(c) }, i = function (f) { var g = {}, j = 0, e; f = typeof f !== "boolean" ? true : f; a.each(c.p.colModel, function () { var b, d = a("#gs_" + a.jgrid.jqID(this.name), this.frozen === true && c.p.frozenColumns === true ? c.grid.fhDiv : c.grid.hDiv); if (this.searchoptions && this.searchoptions.defaultValue !== undefined) b = this.searchoptions.defaultValue; e = this.index || this.name; switch (this.stype) { case "select": d.find("option").each(function (c) { if (c === 0) this.selected = true; if (a(this).val() === b) { this.selected = true; return false } }); if (b !== undefined) { g[e] = b; j++ } else try { delete c.p.postData[e] } catch (f) { } break; case "text": d.val(b); if (b !== undefined) { g[e] = b; j++ } else try { delete c.p.postData[e] } catch (h) { } break; case "custom": a.isFunction(this.searchoptions.custom_value) && d.length > 0 && d[0].nodeName.toUpperCase() === "SPAN" && this.searchoptions.custom_value.call(c, d.children(".customelement:first"), "set", b) } }); var l = j > 0 ? true : false; if (b.stringResult === true || c.p.datatype === "local") { var d = '{"groupOp":"' + b.groupOp + '","rules":[', k = 0; a.each(g, function (b, a) { if (k > 0) d += ","; d += '{"field":"' + b + '",'; d += '"op":"eq",'; a += ""; d += '"data":"' + a.replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}'; k++ }); d += "]}"; a.extend(c.p.postData, { filters: d }); a.each(["searchField", "searchString", "searchOper"], function (b, a) { if (c.p.postData.hasOwnProperty(a)) delete c.p.postData[a] }) } else a.extend(c.p.postData, g); var h; if (c.p.searchurl) { h = c.p.url; a(c).jqGrid("setGridParam", { url: c.p.searchurl }) } var i = a(c).triggerHandler("jqGridToolbarBeforeClear") === "stop" ? true : false; if (!i && a.isFunction(b.beforeClear)) i = b.beforeClear.call(c); if (!i) f && a(c).jqGrid("setGridParam", { search: l }).trigger("reloadGrid", [{ page: 1}]); h && a(c).jqGrid("setGridParam", { url: h }); a(c).triggerHandler("jqGridToolbarAfterClear"); a.isFunction(b.afterClear) && b.afterClear() }, h = function () { var d = a("tr.ui-search-toolbar", c.grid.hDiv), b = c.p.frozenColumns === true ? a("tr.ui-search-toolbar", c.grid.fhDiv) : false; if (d.css("display") === "none") { d.show(); b && b.show() } else { d.hide(); b && b.hide() } }, g = function (h, i, k) { a("#sopt_menu").remove(); i = parseInt(i, 10); k = parseInt(k, 10) + 18; var q = a(".ui-jqgrid-view").css("font-size") || "11px", j = '<ul id="sopt_menu" class="ui-search-menu" role="menu" tabindex="0" style="font-size:' + q + ";left:" + i + "px;top:" + k + 'px;">', o = a(h).attr("soper"), l, m = [], f, e = 0, r = a(h).attr("colname"), p = c.p.colModel.length; while (e < p) { if (c.p.colModel[e].name === r) break; e++ } var n = c.p.colModel[e], g = a.extend({}, n.searchoptions); if (!g.sopt) { g.sopt = []; g.sopt[0] = n.stype === "select" ? "eq" : b.defaultSearch } a.each(b.odata, function () { m.push(this.oper) }); for (e = 0; e < g.sopt.length; e++) { f = a.inArray(g.sopt[e], m); if (f !== -1) { l = o === b.odata[f].oper ? "ui-state-highlight" : ""; j += '<li class="ui-menu-item ' + l + '" role="presentation"><a class="ui-corner-all g-menu-item" tabindex="0" role="menuitem" value="' + b.odata[f].oper + '" oper="' + b.operands[b.odata[f].oper] + '"><table cellspacing="0" cellpadding="0" border="0"><tr><td width="25px">' + b.operands[b.odata[f].oper] + "</td><td>" + b.odata[f].text + "</td></tr></table></a></li>" } } j += "</ul>"; a("body").append(j); a("#sopt_menu").addClass("ui-menu ui-widget ui-widget-content ui-corner-all"); a("#sopt_menu > li > a").hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }).click(function () { var e = a(this).attr("value"), f = a(this).attr("oper"); a(c).triggerHandler("jqGridToolbarSelectOper", [e, f, h]); a("#sopt_menu").hide(); a(h).text(f).attr("soper", e); if (b.autosearch === true) { var g = a(h).parent().next().children()[0]; (a(g).val() || e === "nu" || e === "nn") && d() } }) }, f = a("<tr class='ui-search-toolbar' role='rowheader'></tr>"), e; a.each(c.p.colModel, function () { var h = this, g, u, l, y = "", z = "=", o, r, x = a("<th role='columnheader' class='ui-state-default ui-th-column ui-th-" + c.p.direction + "'></th>"), j = a("<div style='position:relative;height:100%;padding-right:0.3em;padding-left:0.3em;'></div>"), i = a("<table class='ui-search-table' cellspacing='0'><tr><td class='ui-search-oper'></td><td class='ui-search-input'></td></tr></table>"); this.hidden === true && a(x).css("display", "none"); this.search = this.search === false ? false : true; if (this.stype === undefined) this.stype = "text"; g = a.extend({}, this.searchoptions || {}); if (this.search) { if (b.searchOperators) { o = g.sopt ? g.sopt[0] : h.stype === "select" ? "eq" : b.defaultSearch; for (r = 0; r < b.odata.length; r++) if (b.odata[r].oper === o) { z = b.operands[o] || ""; break } var B = g.searchtitle != null ? g.searchtitle : b.operandTitle; y = "<a title='" + B + "' style='padding-right: 0.5em;' soper='" + o + "' class='soptclass' colname='" + this.name + "'>" + z + "</a>" } a("td:eq(0)", i).append(y); switch (this.stype) { case "select": u = this.surl || g.dataUrl; if (u) { l = j; a.ajax(a.extend({ url: u, dataType: "html", success: function (e) { if (g.buildSelect !== undefined) { var f = g.buildSelect(e); if (f) { a("td:eq(1)", i).append(f); a(l).append(i) } } else { a("td:eq(1)", i).append(e); a(l).append(i) } g.defaultValue !== undefined && a("select", l).val(g.defaultValue); a("select", l).attr({ name: h.index || h.name, id: "gs_" + h.name }); g.attr && a("select", l).attr(g.attr); a("select", l).css({ width: "100%" }); a.jgrid.bindEv.call(c, a("select", l)[0], g); b.autosearch === true && a("select", l).change(function () { d(); return false }); e = null } }, a.jgrid.ajaxOptions, c.p.ajaxSelectOptions || {})) } else { var m, v, t; if (h.searchoptions) { m = h.searchoptions.value === undefined ? "" : h.searchoptions.value; v = h.searchoptions.separator === undefined ? ":" : h.searchoptions.separator; t = h.searchoptions.delimiter === undefined ? ";" : h.searchoptions.delimiter } else if (h.editoptions) { m = h.editoptions.value === undefined ? "" : h.editoptions.value; v = h.editoptions.separator === undefined ? ":" : h.editoptions.separator; t = h.editoptions.delimiter === undefined ? ";" : h.editoptions.delimiter } if (m) { var k = document.createElement("select"); k.style.width = "100%"; a(k).attr({ name: h.index || h.name, id: "gs_" + h.name }); var w, n, q, s; if (typeof m === "string") { o = m.split(t); for (s = 0; s < o.length; s++) { w = o[s].split(v); n = document.createElement("option"); n.value = w[0]; n.innerHTML = w[1]; k.appendChild(n) } } else if (typeof m === "object") for (q in m) if (m.hasOwnProperty(q)) { n = document.createElement("option"); n.value = q; n.innerHTML = m[q]; k.appendChild(n) } g.defaultValue !== undefined && a(k).val(g.defaultValue); g.attr && a(k).attr(g.attr); a.jgrid.bindEv.call(c, k, g); a("td:eq(1)", i).append(k); a(j).append(i); b.autosearch === true && a(k).change(function () { d(); return false }) } } break; case "text": var A = g.defaultValue !== undefined ? g.defaultValue : ""; a("td:eq(1)", i).append("<input type='text' style='width:100%;padding:0px;' name='" + (h.index || h.name) + "' id='gs_" + h.name + "' value='" + A + "'/>"); a(j).append(i); g.attr && a("input", j).attr(g.attr); a.jgrid.bindEv.call(c, a("input", j)[0], g); if (b.autosearch === true) if (b.searchOnEnter) a("input", j).keypress(function (a) { var b = a.charCode || a.keyCode || 0; if (b === 13) { d(); return false } return this }); else a("input", j).keydown(function (b) { var a = b.which; switch (a) { case 13: return false; case 9: case 16: case 37: case 38: case 39: case 40: case 27: break; default: e && clearTimeout(e); e = setTimeout(function () { d() }, 500) } }); break; case "custom": a("td:eq(1)", i).append("<span style='width:95%;padding:0px;' name='" + (h.index || h.name) + "' id='gs_" + h.name + "'/>"); a(j).append(i); try { if (a.isFunction(g.custom_element)) { var p = g.custom_element.call(c, g.defaultValue !== undefined ? g.defaultValue : "", g); if (p) { p = a(p).addClass("customelement"); a(j).find(">span").append(p) } else throw "e2"; } else throw "e1"; } catch (C) { C === "e1" && a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose); if (C === "e2") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, typeof C === "string" ? C : C.message, a.jgrid.edit.bClose) } } } a(x).append(j); a(f).append(x); !b.searchOperators && a("td:eq(0)", i).hide() }); a("table thead", c.grid.hDiv).append(f); if (b.searchOperators) { a(".soptclass").click(function (e) { var b = a(this).offset(), c = b.left, d = b.top; g(this, c, d); e.stopPropagation() }); a("body").on("click", function (b) { b.target.className !== "soptclass" && a("#sopt_menu").hide() }) } this.ftoolbar = true; this.triggerToolbar = d; this.clearToolbar = i; this.toggleToolbar = h }) }, destroyFilterToolbar: function () { return this.each(function () { if (!this.ftoolbar) return; this.triggerToolbar = null; this.clearToolbar = null; this.toggleToolbar = null; this.ftoolbar = false; a(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove() }) }, destroyGroupHeader: function (b) { if (b === undefined) b = true; return this.each(function () { var i = this, h, d, l, e, c, f, g = i.grid, j = a("table.ui-jqgrid-htable thead", g.hDiv), m = i.p.colModel, k; if (!g) return; a(this).unbind(".setGroupHeaders"); h = a("<tr>", { role: "rowheader" }).addClass("ui-jqgrid-labels"); e = g.headers; for (d = 0, l = e.length; d < l; d++) { k = m[d].hidden ? "none" : ""; c = a(e[d].el).width(e[d].width).css("display", k); try { c.removeAttr("rowSpan") } catch (n) { c.attr("rowSpan", 1) } h.append(c); f = c.children("span.ui-jqgrid-resize"); if (f.length > 0) f[0].style.height = ""; c.children("div")[0].style.top = "" } a(j).children("tr.ui-jqgrid-labels").remove(); a(j).prepend(h); b === true && a(i).jqGrid("setGridParam", { groupHeader: null }) }) }, setGroupHeaders: function (b) { b = a.extend({ useColSpanStyle: false, groupHeaders: [] }, b || {}); return this.each(function () { this.p.groupHeader = b; var c = this, e, n, r = 0, k, f, h, m, u, d, q, o, t, j, p = c.p.colModel, v = p.length, w = c.grid.headers, g = a("table.ui-jqgrid-htable", c.grid.hDiv), y = g.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header"), z = g.children("thead"), l, i = g.find(".jqg-first-row-header"); if (i[0] === undefined) i = a("<tr>", { role: "row", "aria-hidden": "true" }).addClass("jqg-first-row-header").css("height", "auto"); else i.empty(); var s, x = function (d, b) { for (var c = b.length, a = 0; a < c; a++) if (b[a].startColumnName === d) return a; return -1 }; a(c).prepend(z); k = a("<tr>", { role: "rowheader" }).addClass("ui-jqgrid-labels jqg-third-row-header"); for (e = 0; e < v; e++) { h = w[e].el; m = a(h); n = p[e]; u = { height: "0px", width: w[e].width + "px", display: n.hidden ? "none" : "" }; a("<th>", { role: "gridcell" }).css(u).addClass("ui-first-th-" + c.p.direction).appendTo(i); h.style.width = ""; d = x(n.name, b.groupHeaders); if (d >= 0) { q = b.groupHeaders[d]; o = q.numberOfColumns; t = q.titleText; for (j = 0, d = 0; d < o && e + d < v; d++) if (!p[e + d].hidden) j++; f = a("<th>").attr({ role: "columnheader" }).addClass("ui-state-default ui-th-column-header ui-th-" + c.p.direction).css({ height: "22px", "border-top": "0px none" }).html(t); j > 0 && f.attr("colspan", String(j)); c.p.headertitles && f.attr("title", f.text()); j === 0 && f.hide(); m.before(f); k.append(h); r = o - 1 } else if (r === 0) if (b.useColSpanStyle) m.attr("rowspan", "2"); else { a("<th>", { role: "columnheader" }).addClass("ui-state-default ui-th-column-header ui-th-" + c.p.direction).css({ display: n.hidden ? "none" : "", "border-top": "0px none" }).insertBefore(m); k.append(h) } else { k.append(h); r-- } } l = a(c).children("thead"); l.prepend(i); k.insertAfter(y); g.append(l); if (b.useColSpanStyle) { g.find("span.ui-jqgrid-resize").each(function () { var b = a(this).parent(); if (b.is(":visible")) this.style.cssText = "height: " + b.height() + "px !important; cursor: col-resize;" }); g.find("div.ui-jqgrid-sortable").each(function () { var c = a(this), b = c.parent(); b.is(":visible") && b.is(":has(span.ui-jqgrid-resize)") && c.css("top", (b.height() - c.outerHeight()) / 2 + "px") }) } s = l.find("tr.jqg-first-row-header"); a(c).bind("jqGridResizeStop.setGroupHeaders", function (c, b, a) { s.find("th").eq(a).width(b) }) }) }, setFrozenColumns: function () { return this.each(function () { if (!this.grid) return; var b = this, l = b.p.colModel, f = 0, n = l.length, c = -1, j = false; if (b.p.subGrid === true || b.p.treeGrid === true || b.p.cellEdit === true || b.p.sortable || b.p.scroll || b.p.grouping) return; if (b.p.rownumbers) f++; if (b.p.multiselect) f++; while (f < n) { if (l[f].frozen === true) { j = true; c = f } else break; f++ } if (c >= 0 && j) { var e = b.p.caption ? a(b.grid.cDiv).outerHeight() : 0, k = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).height(); if (b.p.toppager) e = e + a(b.grid.topDiv).outerHeight(); if (b.p.toolbar[0] === true) if (b.p.toolbar[1] !== "bottom") e = e + a(b.grid.uDiv).outerHeight(); b.grid.fhDiv = a('<div style="position:absolute;left:0px;top:' + e + "px;height:" + k + 'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>'); b.grid.fbDiv = a('<div style="position:absolute;left:0px;top:' + (parseInt(e, 10) + parseInt(k, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>'); a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fhDiv); var d = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).clone(true); if (b.p.groupHeader) { a("tr.jqg-first-row-header, tr.jqg-third-row-header", d).each(function () { a("th:gt(" + c + ")", this).remove() }); var g = -1, h = -1, i, m; a("tr.jqg-second-row-header th", d).each(function () { i = parseInt(a(this).attr("colspan"), 10); m = parseInt(a(this).attr("rowspan"), 10); if (m) { g++; h++ } if (i) { g = g + i; h++ } if (g === c) return false }); if (g !== c) h = c; a("tr.jqg-second-row-header", d).each(function () { a("th:gt(" + h + ")", this).remove() }) } else a("tr", d).each(function () { a("th:gt(" + c + ")", this).remove() }); a(d).width(1); a(b.grid.fhDiv).append(d).mousemove(function (a) { if (b.grid.resizing) { b.grid.dragMove(a); return false } }); a(b).bind("jqGridResizeStop.setFrozenColumns", function (g, d, c) { var e = a(".ui-jqgrid-htable", b.grid.fhDiv); a("th:eq(" + c + ")", e).width(d); var f = a(".ui-jqgrid-btable", b.grid.fbDiv); a("tr:first td:eq(" + c + ")", f).width(d) }); a(b).bind("jqGridOnSortCol.setFrozenColumns", function (g, f, e) { var c = a("tr.ui-jqgrid-labels:last th:eq(" + b.p.lastsort + ")", b.grid.fhDiv), d = a("tr.ui-jqgrid-labels:last th:eq(" + e + ")", b.grid.fhDiv); a("span.ui-grid-ico-sort", c).addClass("ui-state-disabled"); a(c).attr("aria-selected", "false"); a("span.ui-icon-" + b.p.sortorder, d).removeClass("ui-state-disabled"); a(d).attr("aria-selected", "true"); if (!b.p.viewsortcols[0]) if (b.p.lastsort !== e) { a("span.s-ico", c).hide(); a("span.s-ico", d).show() } }); a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fbDiv); a(b.grid.bDiv).scroll(function () { a(b.grid.fbDiv).scrollTop(a(this).scrollTop()) }); b.p.hoverrows === true && a("#" + a.jgrid.jqID(b.p.id)).unbind("mouseover").unbind("mouseout"); a(b).bind("jqGridAfterGridComplete.setFrozenColumns", function () { a("#" + a.jgrid.jqID(b.p.id) + "_frozen").remove(); a(b.grid.fbDiv).height(a(b.grid.bDiv).height() - 16); var d = a("#" + a.jgrid.jqID(b.p.id)).clone(true); a("tr", d).each(function () { a("td:gt(" + c + ")", this).remove() }); a(d).width(1).attr("id", b.p.id + "_frozen"); a(b.grid.fbDiv).append(d); if (b.p.hoverrows === true) { a("tr.jqgrow", d).hover(function () { a(this).addClass("ui-state-hover"); a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id)).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover"); a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id)).removeClass("ui-state-hover") }); a("tr.jqgrow", "#" + a.jgrid.jqID(b.p.id)).hover(function () { a(this).addClass("ui-state-hover"); a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id) + "_frozen").addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover"); a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id) + "_frozen").removeClass("ui-state-hover") }) } d = null }); b.p.frozenColumns = true } }) }, destroyFrozenColumns: function () { return this.each(function () { if (!this.grid) return; if (this.p.frozenColumns === true) { var b = this; a(b.grid.fhDiv).remove(); a(b.grid.fbDiv).remove(); b.grid.fhDiv = null; b.grid.fbDiv = null; a(this).unbind(".setFrozenColumns"); if (b.p.hoverrows === true) { var c; a("#" + a.jgrid.jqID(b.p.id)).bind("mouseover", function (b) { c = a(b.target).closest("tr.jqgrow"); a(c).attr("class") !== "ui-subgrid" && a(c).addClass("ui-state-hover") }).bind("mouseout", function (b) { c = a(b.target).closest("tr.jqgrow"); a(c).removeClass("ui-state-hover") }) } this.p.frozenColumns = false } }) } }) })(jQuery); (function (a) { a.fn.jqm = function (f) { var d = { overlay: 50, closeoverlay: true, overlayClass: "jqmOverlay", closeClass: "jqmClose", trigger: ".jqModal", ajax: b, ajaxText: "", target: b, modal: b, toTop: b, onShow: b, onHide: b, onLoad: b }; return this.each(function () { if (this._jqm) return c[this._jqm].c = a.extend({}, c[this._jqm].c, f); e++; this._jqm = e; c[e] = { c: a.extend(d, a.jqm.params, f), a: b, w: a(this).addClass("jqmID" + e), s: e }; d.trigger && a(this).jqmAddTrigger(d.trigger) }) }; a.fn.jqmAddClose = function (a) { return g(this, a, "jqmHide") }; a.fn.jqmAddTrigger = function (a) { return g(this, a, "jqmShow") }; a.fn.jqmShow = function (b) { return this.each(function () { a.jqm.open(this._jqm, b) }) }; a.fn.jqmHide = function (b) { return this.each(function () { a.jqm.close(this._jqm, b) }) }; a.jqm = { hash: {}, open: function (n, o) { var e = c[n], f = e.c, l = "." + f.closeClass, k = parseInt(e.w.css("z-index")); k = k > 0 ? k : 3e3; var m = a("<div></div>").css({ height: "100%", width: "100%", position: "fixed", left: 0, top: 0, "z-index": k - 1, opacity: f.overlay / 100 }); if (e.a) return b; e.t = o; e.a = true; e.w.css("z-index", k); if (f.modal) { !d[0] && setTimeout(function () { j("bind") }, 1); d.push(n) } else if (f.overlay > 0) f.closeoverlay && e.w.jqmAddClose(m); else m = b; e.o = m ? m.addClass(f.overlayClass).prependTo("body") : b; if (f.ajax) { var g = f.target || e.w, i = f.ajax; g = typeof g == "string" ? a(g, e.w) : a(g); i = i.substr(0, 1) == "@" ? a(o).attr(i.substring(1)) : i; g.html(f.ajaxText).load(i, function () { f.onLoad && f.onLoad.call(this, e); l && e.w.jqmAddClose(a(l, e.w)); h(e) }) } else l && e.w.jqmAddClose(a(l, e.w)); f.toTop && e.o && e.w.before('<span id="jqmP' + e.w[0]._jqm + '"></span>').insertAfter(e.o); f.onShow ? f.onShow(e) : e.w.show(); h(e); return b }, close: function (f) { var e = c[f]; if (!e.a) return b; e.a = b; if (d[0]) { d.pop(); !d[0] && j("unbind") } e.c.toTop && e.o && a("#jqmP" + e.w[0]._jqm).after(e.w).remove(); if (e.c.onHide) e.c.onHide(e); else { e.w.hide(); e.o && e.o.remove() } return b }, params: {} }; var e = 0, c = a.jqm.hash, d = [], b = false, h = function (a) { i(a) }, i = function (b) { try { a(":input:visible", b.w)[0].focus() } catch (c) { } }, j = function (b) { a(document)[b]("keypress", f)[b]("keydown", f)[b]("mousedown", f) }, f = function (b) { var e = c[d[d.length - 1]], f = !a(b.target).parents(".jqmID" + e.s)[0]; if (f) { a(".jqmID" + e.s).each(function () { var d = a(this), c = d.offset(); if (c.top <= b.pageY && b.pageY <= c.top + d.height() && c.left <= b.pageX && b.pageX <= c.left + d.width()) { f = false; return false } }); i(e) } return !f }, g = function (f, e, d) { return f.each(function () { var f = this._jqm; a(e).each(function () { if (!this[d]) { this[d] = []; a(this).click(function () { for (var a in { jqmShow: 1, jqmHide: 1 }) for (var d in this[a]) c[this[a][d]] && c[this[a][d]].w[a](this); return b }) } this[d].push(f) }) }) } })(jQuery); (function (a) { a.fn.jqDrag = function (a) { return i(this, a, "d") }; a.fn.jqResize = function (b, a) { return i(this, b, "r", a) }; a.jqDnR = { dnr: {}, e: 0, drag: function (a) { if (c.k == "d") b.css({ left: c.X + a.pageX - c.pX, top: c.Y + a.pageY - c.pY }); else { b.css({ width: Math.max(a.pageX - c.pX + c.W, 0), height: Math.max(a.pageY - c.pY + c.H, 0) }); d && e.css({ width: Math.max(a.pageX - d.pX + d.W, 0), height: Math.max(a.pageY - d.pY + d.H, 0) }) } return false }, stop: function () { a(document).unbind("mousemove", h.drag).unbind("mouseup", h.stop) } }; var h = a.jqDnR, c = h.dnr, b = h.e, e, d, i = function (h, i, k, j) { return h.each(function () { i = i ? a(i, h) : h; i.bind("mousedown", { e: h, k: k }, function (i) { var k = i.data, h = {}; b = k.e; e = j ? a(j) : false; if (b.css("position") != "relative") try { b.position(h) } catch (m) { } c = { X: h.left || g("left") || 0, Y: h.top || g("top") || 0, W: g("width") || b[0].scrollWidth || 0, H: g("height") || b[0].scrollHeight || 0, pX: i.pageX, pY: i.pageY, k: k.k }; if (e && k.k != "d") d = { X: h.left || f("left") || 0, Y: h.top || f("top") || 0, W: e[0].offsetWidth || f("width") || 0, H: e[0].offsetHeight || f("height") || 0, pX: i.pageX, pY: i.pageY, k: k.k }; else d = false; if (a("input.hasDatepicker", b[0])[0]) try { a("input.hasDatepicker", b[0]).datepicker("hide") } catch (l) { } a(document).mousemove(a.jqDnR.drag).mouseup(a.jqDnR.stop); return false }) }) }, g = function (a) { return parseInt(b.css(a), 10) || false }, f = function (a) { return parseInt(e.css(a), 10) || false } })(jQuery); var xmlJsonClass = { xml2json: function (a, b) { if (a.nodeType === 9) a = a.documentElement; var d = this.removeWhite(a), e = this.toObj(d), c = this.toJson(e, a.nodeName, "\t"); return "{\n" + b + (b ? c.replace(/\t/g, b) : c.replace(/\t|\n/g, "")) + "\n}" }, json2xml: function (d, e) { var b = function (a, e, f) { var c = "", g, i; if (a instanceof Array) if (a.length === 0) c += f + "<" + e + ">__EMPTY_ARRAY_</" + e + ">\n"; else for (g = 0, i = a.length; g < i; g += 1) { var j = f + b(a[g], e, f + "\t") + "\n"; c += j } else if (typeof a === "object") { var h = false; c += f + "<" + e; var d; for (d in a) if (a.hasOwnProperty(d)) if (d.charAt(0) === "@") c += " " + d.substr(1) + '="' + a[d].toString() + '"'; else h = true; c += h ? ">" : "/>"; if (h) { for (d in a) if (a.hasOwnProperty(d)) if (d === "#text") c += a[d]; else if (d === "#cdata") c += "<![CDATA[" + a[d] + "]\]>"; else if (d.charAt(0) !== "@") c += b(a[d], d, f + "\t"); c += (c.charAt(c.length - 1) === "\n" ? f : "") + "</" + e + ">" } } else if (typeof a === "function") c += f + "<" + e + "><![CDATA[" + a + "]\]></" + e + ">"; else { if (a === undefined) a = ""; if (a.toString() === '""' || a.toString().length === 0) c += f + "<" + e + ">__EMPTY_STRING_</" + e + ">"; else c += f + "<" + e + ">" + a.toString() + "</" + e + ">" } return c }, c = "", a; for (a in d) if (d.hasOwnProperty(a)) c += b(d[a], a, ""); return e ? c.replace(/\t/g, e) : c.replace(/\t|\n/g, "") }, toObj: function (c) { var b = {}, h = /function/i; if (c.nodeType === 1) { if (c.attributes.length) for (var e = 0; e < c.attributes.length; e += 1) b["@" + c.attributes[e].nodeName] = (c.attributes[e].nodeValue || "").toString(); if (c.firstChild) { for (var f = 0, d = 0, g = false, a = c.firstChild; a; a = a.nextSibling) if (a.nodeType === 1) g = true; else if (a.nodeType === 3 && a.nodeValue.match(/[^ \f\n\r\t\v]/)) f += 1; else if (a.nodeType === 4) d += 1; if (g) if (f < 2 && d < 2) { this.removeWhite(c); for (a = c.firstChild; a; a = a.nextSibling) if (a.nodeType === 3) b["#text"] = this.escape(a.nodeValue); else if (a.nodeType === 4) if (h.test(a.nodeValue)) b[a.nodeName] = [b[a.nodeName], a.nodeValue]; else b["#cdata"] = this.escape(a.nodeValue); else if (b[a.nodeName]) if (b[a.nodeName] instanceof Array) b[a.nodeName][b[a.nodeName].length] = this.toObj(a); else b[a.nodeName] = [b[a.nodeName], this.toObj(a)]; else b[a.nodeName] = this.toObj(a) } else if (!c.attributes.length) b = this.escape(this.innerXml(c)); else b["#text"] = this.escape(this.innerXml(c)); else if (f) if (!c.attributes.length) { b = this.escape(this.innerXml(c)); if (b === "__EMPTY_ARRAY_") b = "[]"; else if (b === "__EMPTY_STRING_") b = "" } else b["#text"] = this.escape(this.innerXml(c)); else if (d) if (d > 1) b = this.escape(this.innerXml(c)); else for (a = c.firstChild; a; a = a.nextSibling) if (h.test(c.firstChild.nodeValue)) { b = c.firstChild.nodeValue; break } else b["#cdata"] = this.escape(a.nodeValue) } if (!c.attributes.length && !c.firstChild) b = null } else if (c.nodeType === 9) b = this.toObj(c.documentElement); else alert("unhandled node type: " + c.nodeType); return b }, toJson: function (a, b, c, g) { if (g === undefined) g = true; var e = b ? '"' + b + '"' : "", f = "\t", d = "\n"; if (!g) { f = ""; d = "" } if (a === "[]") e += b ? ":[]" : "[]"; else if (a instanceof Array) { var l, i, j = []; for (i = 0, l = a.length; i < l; i += 1) j[i] = this.toJson(a[i], "", c + f, g); e += (b ? ":[" : "[") + (j.length > 1 ? d + c + f + j.join("," + d + c + f) + d + c : j.join("")) + "]" } else if (a === null) e += (b && ":") + "null"; else if (typeof a === "object") { var h = [], k; for (k in a) if (a.hasOwnProperty(k)) h[h.length] = this.toJson(a[k], k, c + f, g); e += (b ? ":{" : "{") + (h.length > 1 ? d + c + f + h.join("," + d + c + f) + d + c : h.join("")) + "}" } else if (typeof a === "string") e += (b && ":") + '"' + a.replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"'; else e += (b && ":") + a.toString(); return e }, innerXml: function (b) { var c = ""; if ("innerHTML" in b) c = b.innerHTML; else for (var d = function (a) { var b = "", c; if (a.nodeType === 1) { b += "<" + a.nodeName; for (c = 0; c < a.attributes.length; c += 1) b += " " + a.attributes[c].nodeName + '="' + (a.attributes[c].nodeValue || "").toString() + '"'; if (a.firstChild) { b += ">"; for (var e = a.firstChild; e; e = e.nextSibling) b += d(e); b += "</" + a.nodeName + ">" } else b += "/>" } else if (a.nodeType === 3) b += a.nodeValue; else if (a.nodeType === 4) b += "<![CDATA[" + a.nodeValue + "]\]>"; return b }, a = b.firstChild; a; a = a.nextSibling) c += d(a); return c }, escape: function (a) { return a.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r") }, removeWhite: function (b) { b.normalize(); for (var a = b.firstChild; a; ) if (a.nodeType === 3) if (!a.nodeValue.match(/[^ \f\n\r\t\v]/)) { var c = a.nextSibling; b.removeChild(a); a = c } else a = a.nextSibling; else if (a.nodeType === 1) { this.removeWhite(a); a = a.nextSibling } else a = a.nextSibling; return b } }; (function (a) { "use strict"; a.fmatter = {}; a.extend(a.fmatter, { isBoolean: function (a) { return typeof a === "boolean" }, isObject: function (b) { return b && (typeof b === "object" || a.isFunction(b)) || false }, isString: function (a) { return typeof a === "string" }, isNumber: function (a) { return typeof a === "number" && isFinite(a) }, isValue: function (a) { return this.isObject(a) || this.isString(a) || this.isNumber(a) || this.isBoolean(a) }, isEmpty: function (b) { if (!this.isString(b) && this.isValue(b)) return false; if (!this.isValue(b)) return true; b = a.trim(b).replace(/\&nbsp\;/ig, "").replace(/\&#160\;/ig, ""); return b === "" } }); a.fn.fmatter = function (e, c, b, g, f) { var d = c; b = a.extend({}, a.jgrid.formatter, b); try { d = a.fn.fmatter[e].call(this, c, b, g, f) } catch (h) { } return d }; a.fmatter.util = { NumberFormat: function (e, d) { if (!a.fmatter.isNumber(e)) e *= 1; if (a.fmatter.isNumber(e)) { var m = e < 0, b = String(e), h = d.decimalSeparator || ".", c; if (a.fmatter.isNumber(d.decimalPlaces)) { var i = d.decimalPlaces, j = Math.pow(10, i); b = String(Math.round(e * j) / j); c = b.lastIndexOf("."); if (i > 0) { if (c < 0) { b += h; c = b.length - 1 } else if (h !== ".") b = b.replace(".", h); while (b.length - 1 - c < i) b += "0" } } if (d.thousandsSeparator) { var l = d.thousandsSeparator; c = b.lastIndexOf(h); c = c > -1 ? c : b.length; for (var f = b.substring(c), k = -1, g = c; g > 0; g--) { k++; if (k % 3 === 0 && g !== c && (!m || g > 1)) f = l + f; f = b.charAt(g - 1) + f } b = f } b = d.prefix ? d.prefix + b : b; b = d.suffix ? b + d.suffix : b; return b } return e } }; a.fn.fmatter.defaultFormat = function (b, c) { return a.fmatter.isValue(b) && b !== "" ? b : c.defaultValue || "&#160;" }; a.fn.fmatter.email = function (b, c) { return !a.fmatter.isEmpty(b) ? '<a href="mailto:' + b + '">' + b + "</a>" : a.fn.fmatter.defaultFormat(b, c) }; a.fn.fmatter.checkbox = function (b, c) { var d = a.extend({}, c.checkbox), e; if (c.colModel !== undefined && c.colModel.formatoptions !== undefined) d = a.extend({}, d, c.colModel.formatoptions); if (d.disabled === true) e = 'disabled="disabled"'; else e = ""; if (a.fmatter.isEmpty(b) || b === undefined) b = a.fn.fmatter.defaultFormat(b, d); b = String(b); b = b.toLowerCase(); var f = b.search(/(false|f|0|no|n|off|undefined)/i) < 0 ? " checked='checked' " : ""; return '<input type="checkbox" ' + f + ' value="' + b + '" offval="no" ' + e + "/>" }; a.fn.fmatter.link = function (c, b) { var d = { target: b.target }, e = ""; if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) d = a.extend({}, d, b.colModel.formatoptions); if (d.target) e = "target=" + d.target; return !a.fmatter.isEmpty(c) ? "<a " + e + ' href="' + c + '">' + c + "</a>" : a.fn.fmatter.defaultFormat(c, b) }; a.fn.fmatter.showlink = function (d, b) { var c = { baseLinkUrl: b.baseLinkUrl, showAction: b.showAction, addParam: b.addParam || "", target: b.target, idName: b.idName }, e = "", f; if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) c = a.extend({}, c, b.colModel.formatoptions); if (c.target) e = "target=" + c.target; f = c.baseLinkUrl + c.showAction + "?" + c.idName + "=" + b.rowId + c.addParam; return a.fmatter.isString(d) || a.fmatter.isNumber(d) ? "<a " + e + ' href="' + f + '">' + d + "</a>" : a.fn.fmatter.defaultFormat(d, b) }; a.fn.fmatter.integer = function (d, b) { var c = a.extend({}, b.integer); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) c = a.extend({}, c, b.colModel.formatoptions); return a.fmatter.isEmpty(d) ? c.defaultValue : a.fmatter.util.NumberFormat(d, c) }; a.fn.fmatter.number = function (d, b) { var c = a.extend({}, b.number); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) c = a.extend({}, c, b.colModel.formatoptions); return a.fmatter.isEmpty(d) ? c.defaultValue : a.fmatter.util.NumberFormat(d, c) }; a.fn.fmatter.currency = function (d, b) { var c = a.extend({}, b.currency); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) c = a.extend({}, c, b.colModel.formatoptions); return a.fmatter.isEmpty(d) ? c.defaultValue : a.fmatter.util.NumberFormat(d, c) }; a.fn.fmatter.date = function (d, b, f, e) { var c = a.extend({}, b.date); if (b.colModel !== undefined && b.colModel.formatoptions !== undefined) c = a.extend({}, c, b.colModel.formatoptions); return !c.reformatAfterEdit && e === "edit" ? a.fn.fmatter.defaultFormat(d, b) : !a.fmatter.isEmpty(d) ? a.jgrid.parseDate(c.srcformat, d, c.newformat, c) : a.fn.fmatter.defaultFormat(d, b) }; a.fn.fmatter.select = function (c, b) { c = String(c); var d = false, g = [], h, i; if (b.colModel.formatoptions !== undefined) { d = b.colModel.formatoptions.value; h = b.colModel.formatoptions.separator === undefined ? ":" : b.colModel.formatoptions.separator; i = b.colModel.formatoptions.delimiter === undefined ? ";" : b.colModel.formatoptions.delimiter } else if (b.colModel.editoptions !== undefined) { d = b.colModel.editoptions.value; h = b.colModel.editoptions.separator === undefined ? ":" : b.colModel.editoptions.separator; i = b.colModel.editoptions.delimiter === undefined ? ";" : b.colModel.editoptions.delimiter } if (d) { var j = b.colModel.editoptions.multiple === true ? true : false, f = [], e; if (j) { f = c.split(","); f = a.map(f, function (b) { return a.trim(b) }) } if (a.fmatter.isString(d)) for (var l = d.split(i), m = 0, k = 0; k < l.length; k++) { e = l[k].split(h); if (e.length > 2) e[1] = a.map(e, function (b, a) { if (a > 0) return b }).join(h); if (j) { if (a.inArray(e[0], f) > -1) { g[m] = e[1]; m++ } } else if (a.trim(e[0]) === a.trim(c)) { g[0] = e[1]; break } } else if (a.fmatter.isObject(d)) if (j) g = a.map(f, function (a) { return d[a] }); else g[0] = d[c] || "" } c = g.join(", "); return c === "" ? a.fn.fmatter.defaultFormat(c, b) : c }; a.fn.fmatter.rowactions = function (n) { var k = a(this).closest("tr.jqgrow"), e = k.attr("id"), m = a(this).closest("table.ui-jqgrid-btable").attr("id").replace(/_frozen([^_]*)$/, "$1"), c = a("#" + m), g = c[0], f = g.p, h = f.colModel[a.jgrid.getCellIndex(this)], d = h.frozen ? a("tr#" + e + " td:eq(" + a.jgrid.getCellIndex(this) + ") > div", c) : a(this).parent(), b = { keys: false, onEdit: null, onSuccess: null, afterSave: null, onError: null, afterRestore: null, extraparam: {}, url: null, restoreAfterError: true, mtype: "POST", delOptions: {}, editOptions: {} }, l = function (c, e) { a.isFunction(b.afterSave) && b.afterSave.call(g, c, e); d.find("div.ui-inline-edit,div.ui-inline-del").show(); d.find("div.ui-inline-save,div.ui-inline-cancel").hide() }, i = function (c) { a.isFunction(b.afterRestore) && b.afterRestore.call(g, c); d.find("div.ui-inline-edit,div.ui-inline-del").show(); d.find("div.ui-inline-save,div.ui-inline-cancel").hide() }; if (h.formatoptions !== undefined) b = a.extend(b, h.formatoptions); if (f.editOptions !== undefined) b.editOptions = f.editOptions; if (f.delOptions !== undefined) b.delOptions = f.delOptions; if (k.hasClass("jqgrid-new-row")) b.extraparam[f.prmNames.oper] = f.prmNames.addoper; var j = { keys: b.keys, oneditfunc: b.onEdit, successfunc: b.onSuccess, url: b.url, extraparam: b.extraparam, aftersavefunc: l, errorfunc: b.onError, afterrestorefunc: i, restoreAfterError: b.restoreAfterError, mtype: b.mtype }; switch (n) { case "edit": c.jqGrid("editRow", e, j); d.find("div.ui-inline-edit,div.ui-inline-del").hide(); d.find("div.ui-inline-save,div.ui-inline-cancel").show(); c.triggerHandler("jqGridAfterGridComplete"); break; case "save": if (c.jqGrid("saveRow", e, j)) { d.find("div.ui-inline-edit,div.ui-inline-del").show(); d.find("div.ui-inline-save,div.ui-inline-cancel").hide(); c.triggerHandler("jqGridAfterGridComplete") } break; case "cancel": c.jqGrid("restoreRow", e, i); d.find("div.ui-inline-edit,div.ui-inline-del").show(); d.find("div.ui-inline-save,div.ui-inline-cancel").hide(); c.triggerHandler("jqGridAfterGridComplete"); break; case "del": c.jqGrid("delGridRow", e, b.delOptions); break; case "formedit": c.jqGrid("setSelection", e); c.jqGrid("editGridRow", e, b.editOptions) } }; a.fn.fmatter.actions = function (g, f) { var e = { keys: false, editbutton: true, delbutton: true, editformbutton: false }, c = f.rowId, d = "", b; if (f.colModel.formatoptions !== undefined) e = a.extend(e, f.colModel.formatoptions); if (c === undefined || a.fmatter.isEmpty(c)) return ""; if (e.editformbutton) { b = "id='jEditButton_" + c + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; d += "<div title='" + a.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + b + "><span class='ui-icon ui-icon-pencil'></span></div>" } else if (e.editbutton) { b = "id='jEditButton_" + c + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') "; d += "<div title='" + a.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + b + "><span class='ui-icon ui-icon-pencil'></span></div>" } if (e.delbutton) { b = "id='jDeleteButton_" + c + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; d += "<div title='" + a.jgrid.nav.deltitle + "' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' " + b + "><span class='ui-icon ui-icon-trash'></span></div>" } b = "id='jSaveButton_" + c + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; d += "<div title='" + a.jgrid.edit.bSubmit + "' style='float:left;display:none' class='ui-pg-div ui-inline-save' " + b + "><span class='ui-icon ui-icon-disk'></span></div>"; b = "id='jCancelButton_" + c + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); "; d += "<div title='" + a.jgrid.edit.bCancel + "' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' " + b + "><span class='ui-icon ui-icon-cancel'></span></div>"; return "<div style='margin-left:8px;'>" + d + "</div>" }; a.unformat = function (d, e, n, m) { var c, h = e.colModel.formatter, b = e.colModel.formatoptions || {}, g, k = /([\.\*\_\'\(\)\{\}\+\?\\])/g, i = e.colModel.unformat || a.fn.fmatter[h] && a.fn.fmatter[h].unformat; if (i !== undefined && a.isFunction(i)) c = i.call(this, a(d).text(), e, d); else if (h !== undefined && a.fmatter.isString(h)) { var j = a.jgrid.formatter || {}, f; switch (h) { case "integer": b = a.extend({}, j.integer, b); g = b.thousandsSeparator.replace(k, "\\$1"); f = new RegExp(g, "g"); c = a(d).text().replace(f, ""); break; case "number": b = a.extend({}, j.number, b); g = b.thousandsSeparator.replace(k, "\\$1"); f = new RegExp(g, "g"); c = a(d).text().replace(f, "").replace(b.decimalSeparator, "."); break; case "currency": b = a.extend({}, j.currency, b); g = b.thousandsSeparator.replace(k, "\\$1"); f = new RegExp(g, "g"); c = a(d).text(); if (b.prefix && b.prefix.length) c = c.substr(b.prefix.length); if (b.suffix && b.suffix.length) c = c.substr(0, c.length - b.suffix.length); c = c.replace(f, "").replace(b.decimalSeparator, "."); break; case "checkbox": var l = e.colModel.editoptions ? e.colModel.editoptions.value.split(":") : ["Yes", "No"]; c = a("input", d).is(":checked") ? l[0] : l[1]; break; case "select": c = a.unformat.select(d, e, n, m); break; case "actions": return ""; default: c = a(d).text() } } return c !== undefined ? c : m === true ? a(d).text() : a.jgrid.htmlDecode(a(d).html()) }; a.unformat.select = function (n, h, q, p) { var g = [], f = a(n).text(); if (p === true) return f; var c = a.extend({}, h.colModel.formatoptions !== undefined ? h.colModel.formatoptions : h.colModel.editoptions), k = c.separator === undefined ? ":" : c.separator, o = c.delimiter === undefined ? ";" : c.delimiter; if (c.value) { var e = c.value, i = c.multiple === true ? true : false, d = [], b; if (i) { d = f.split(","); d = a.map(d, function (b) { return a.trim(b) }) } if (a.fmatter.isString(e)) for (var l = e.split(o), m = 0, j = 0; j < l.length; j++) { b = l[j].split(k); if (b.length > 2) b[1] = a.map(b, function (b, a) { if (a > 0) return b }).join(k); if (i) { if (a.inArray(b[1], d) > -1) { g[m] = b[0]; m++ } } else if (a.trim(b[1]) === a.trim(f)) { g[0] = b[0]; break } } else if (a.fmatter.isObject(e) || a.isArray(e)) { if (!i) d[0] = f; g = a.map(d, function (c) { var b; a.each(e, function (d, a) { if (a === c) { b = d; return false } }); if (b !== undefined) return b }) } return g.join(", ") } return f || "" }; a.unformat.date = function (c, d) { var b = a.jgrid.formatter.date || {}; if (d.formatoptions !== undefined) b = a.extend({}, b, d.formatoptions); return !a.fmatter.isEmpty(c) ? a.jgrid.parseDate(b.newformat, c, b.srcformat, b) : a.fn.fmatter.defaultFormat(c, d) } })(jQuery); (function (a) { "use strict"; a.extend(a.jgrid, { showModal: function (a) { a.w.show() }, closeModal: function (a) { a.w.hide().attr("aria-hidden", "true"); a.o && a.o.remove() }, hideModal: function (c, b) { b = a.extend({ jqm: true, gb: "" }, b || {}); if (b.onClose) { var d = b.gb && typeof b.gb === "string" && b.gb.substr(0, 6) === "#gbox_" ? b.onClose.call(a("#" + b.gb.substr(6))[0], c) : b.onClose(c); if (typeof d === "boolean" && !d) return } if (a.fn.jqm && b.jqm === true) a(c).attr("aria-hidden", "true").jqmHide(); else { if (b.gb !== "") try { a(".jqgrid-overlay:first", b.gb).hide() } catch (e) { } a(c).hide().attr("aria-hidden", "true") } }, findPos: function (a) { var b = 0, c = 0; if (a.offsetParent) do { b += a.offsetLeft; c += a.offsetTop } while (a = a.offsetParent); return [b, c] }, createModal: function (d, r, b, m, q, g, j) { b = a.extend(true, {}, a.jgrid.jqModal || {}, b); var c = document.createElement("div"), h, p = this; j = a.extend({}, j || {}); h = a(b.gbox).attr("dir") === "rtl" ? true : false; c.className = "ui-widget ui-widget-content ui-corner-all ui-jqdialog"; c.id = d.themodal; var e = document.createElement("div"); e.className = "ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix"; e.id = d.modalhead; a(e).append("<span class='ui-jqdialog-title'>" + b.caption + "</span>"); var i = a("<a href='javascript:void(0)' class='ui-jqdialog-titlebar-close ui-corner-all'></a>").hover(function () { i.addClass("ui-state-hover") }, function () { i.removeClass("ui-state-hover") }).append("<span class='ui-icon ui-icon-closethick'></span>"); a(e).append(i); if (h) { c.dir = "rtl"; a(".ui-jqdialog-title", e).css("float", "right"); a(".ui-jqdialog-titlebar-close", e).css("left", .3 + "em") } else { c.dir = "ltr"; a(".ui-jqdialog-title", e).css("float", "left"); a(".ui-jqdialog-titlebar-close", e).css("right", .3 + "em") } var l = document.createElement("div"); a(l).addClass("ui-jqdialog-content ui-widget-content").attr("id", d.modalcontent); a(l).append(r); c.appendChild(l); a(c).prepend(e); if (g === true) a("body").append(c); else if (typeof g === "string") a(g).append(c); else a(c).insertBefore(m); a(c).css(j); if (b.jqModal === undefined) b.jqModal = true; var f = {}; if (a.fn.jqm && b.jqModal === true) { if (b.left === 0 && b.top === 0 && b.overlay) { var k = []; k = a.jgrid.findPos(q); b.left = k[0] + 4; b.top = k[1] + 4 } f.top = b.top + "px"; f.left = b.left } else if (b.left !== 0 || b.top !== 0) { f.left = b.left; f.top = b.top + "px" } a("a.ui-jqdialog-titlebar-close", e).click(function () { var e = a("#" + a.jgrid.jqID(d.themodal)).data("onClose") || b.onClose, c = a("#" + a.jgrid.jqID(d.themodal)).data("gbox") || b.gbox; p.hideModal("#" + a.jgrid.jqID(d.themodal), { gb: c, jqm: b.jqModal, onClose: e }); return false }); if (b.width === 0 || !b.width) b.width = 300; if (b.height === 0 || !b.height) b.height = 200; if (!b.zIndex) { var n = a(m).parents("*[role=dialog]").filter(":first").css("z-index"); if (n) b.zIndex = parseInt(n, 10) + 2; else b.zIndex = 950 } var o = 0; if (h && f.left && !g) { o = a(b.gbox).width() - (!isNaN(b.width) ? parseInt(b.width, 10) : 0) - 8; f.left = parseInt(f.left, 10) + parseInt(o, 10) } if (f.left) f.left += "px"; a(c).css(a.extend({ width: isNaN(b.width) ? "auto" : b.width + "px", height: isNaN(b.height) ? "auto" : b.height + "px", zIndex: b.zIndex, overflow: "hidden" }, f)).attr({ tabIndex: "-1", role: "dialog", "aria-labelledby": d.modalhead, "aria-hidden": "true" }); if (b.drag === undefined) b.drag = true; if (b.resize === undefined) b.resize = true; if (b.drag) { a(e).css("cursor", "move"); if (a.fn.jqDrag) a(c).jqDrag(e); else try { a(c).draggable({ handle: a("#" + a.jgrid.jqID(e.id)) }) } catch (s) { } } if (b.resize) if (a.fn.jqResize) { a(c).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se'></div>"); a("#" + a.jgrid.jqID(d.themodal)).jqResize(".jqResize", d.scrollelm ? "#" + a.jgrid.jqID(d.scrollelm) : false) } else try { a(c).resizable({ handles: "se, sw", alsoResize: d.scrollelm ? "#" + a.jgrid.jqID(d.scrollelm) : false }) } catch (t) { } b.closeOnEscape === true && a(c).keydown(function (e) { if (e.which == 27) { var c = a("#" + a.jgrid.jqID(d.themodal)).data("onClose") || b.onClose; p.hideModal("#" + a.jgrid.jqID(d.themodal), { gb: b.gbox, jqm: b.jqModal, onClose: c }) } }) }, viewModal: function (c, b) { b = a.extend({ toTop: true, overlay: 10, modal: false, overlayClass: "ui-widget-overlay", onShow: a.jgrid.showModal, onHide: a.jgrid.closeModal, gbox: "", jqm: true, jqM: true }, b || {}); if (a.fn.jqm && b.jqm === true) if (b.jqM) a(c).attr("aria-hidden", "false").jqm(b).jqmShow(); else a(c).attr("aria-hidden", "false").jqmShow(); else { if (b.gbox !== "") { a(".jqgrid-overlay:first", b.gbox).show(); a(c).data("gbox", b.gbox) } a(c).show().attr("aria-hidden", "false"); try { a(":input:visible", c)[0].focus() } catch (d) { } } }, info_dialog: function (i, j, g, h) { var b = { width: 290, height: "auto", dataheight: "auto", drag: true, resize: false, left: 250, top: 170, zIndex: 1e3, jqModal: true, modal: false, closeOnEscape: true, align: "center", buttonalign: "center", buttons: [] }; a.extend(true, b, a.jgrid.jqModal || {}, { caption: "<b>" + i + "</b>" }, h || {}); var e = b.jqModal, k = this; if (a.fn.jqm && !e) e = false; var d = "", c; if (b.buttons.length > 0) for (c = 0; c < b.buttons.length; c++) { if (b.buttons[c].id === undefined) b.buttons[c].id = "info_button_" + c; d += "<a href='javascript:void(0)' id='" + b.buttons[c].id + "' class='fm-button ui-state-default ui-corner-all'>" + b.buttons[c].text + "</a>" } var m = isNaN(b.dataheight) ? b.dataheight : b.dataheight + "px", l = "text-align:" + b.align + ";", f = "<div id='info_id'>"; f += "<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:" + m + ";" + l + "'>" + j + "</div>"; f += g ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + b.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a href='javascript:void(0)' id='closedialog' class='fm-button ui-state-default ui-corner-all'>" + g + "</a>" + d + "</div>" : d !== "" ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + b.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>" + d + "</div>" : ""; f += "</div>"; try { a("#info_dialog").attr("aria-hidden") === "false" && a.jgrid.hideModal("#info_dialog", { jqm: e }); a("#info_dialog").remove() } catch (n) { } a.jgrid.createModal({ themodal: "info_dialog", modalhead: "info_head", modalcontent: "info_content", scrollelm: "infocnt" }, f, b, "", "", true); d && a.each(b.buttons, function (c) { a("#" + a.jgrid.jqID(this.id), "#info_id").bind("click", function () { b.buttons[c].onClick.call(a("#info_dialog")); return false }) }); a("#closedialog", "#info_id").click(function () { k.hideModal("#info_dialog", { jqm: e, onClose: a("#info_dialog").data("onClose") || b.onClose, gb: a("#info_dialog").data("gbox") || b.gbox }); return false }); a(".fm-button", "#info_dialog").hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }); a.isFunction(b.beforeOpen) && b.beforeOpen(); a.jgrid.viewModal("#info_dialog", { onHide: function (a) { a.w.hide().remove(); a.o && a.o.remove() }, modal: b.modal, jqm: e }); a.isFunction(b.afterOpen) && b.afterOpen(); try { a("#info_dialog").focus() } catch (o) { } }, bindEv: function (c, b) { var d = this; a.isFunction(b.dataInit) && b.dataInit.call(d, c); b.dataEvents && a.each(b.dataEvents, function () { if (this.data !== undefined) a(c).bind(this.type, this.data, this.fn); else a(c).bind(this.type, this.fn) }) }, createEl: function (l, b, d, u, v) { var c = "", k = this; function j(e, d, b) { var c = ["dataInit", "dataEvents", "dataUrl", "buildSelect", "sopt", "searchhidden", "defaultValue", "attr", "custom_element", "custom_value"]; b !== undefined && a.isArray(b) && a.merge(c, b); a.each(d, function (b, d) { a.inArray(b, c) === -1 && a(e).attr(b, d) }); !d.hasOwnProperty("id") && a(e).attr("id", a.jgrid.randId()) } switch (l) { case "textarea": c = document.createElement("textarea"); if (u) !b.cols && a(c).css({ width: "98%" }); else if (!b.cols) b.cols = 20; if (!b.rows) b.rows = 2; if (d === "&nbsp;" || d === "&#160;" || d.length === 1 && d.charCodeAt(0) === 160) d = ""; c.value = d; j(c, b); a(c).attr({ role: "textbox", multiline: "true" }); break; case "checkbox": c = document.createElement("input"); c.type = "checkbox"; if (!b.value) { var x = d.toLowerCase(); if (x.search(/(false|f|0|no|n|off|undefined)/i) < 0 && x !== "") { c.checked = true; c.defaultChecked = true; c.value = d } else c.value = "on"; a(c).attr("offval", "off") } else { var q = b.value.split(":"); if (d === q[0]) { c.checked = true; c.defaultChecked = true } c.value = q[0]; a(c).attr("offval", q[1]) } j(c, b, ["value"]); a(c).attr("role", "checkbox"); break; case "select": c = document.createElement("select"); c.setAttribute("role", "select"); var h, i = []; if (b.multiple === true) { h = true; c.multiple = "multiple"; a(c).attr("aria-multiselectable", "true") } else h = false; if (b.dataUrl !== undefined) { var r = b.name ? String(b.id).substring(0, String(b.id).length - String(b.name).length - 1) : String(b.id), n = b.postData || v.postData; if (k.p && k.p.idPrefix) r = a.jgrid.stripPref(k.p.idPrefix, r); else n = undefined; a.ajax(a.extend({ url: b.dataUrl, type: "GET", dataType: "html", data: a.isFunction(n) ? n.call(k, r, d, String(b.name)) : n, context: { elem: c, options: b, vl: d }, success: function (f) { var c = [], e = this.elem, h = this.vl, b = a.extend({}, this.options), g = b.multiple === true, d = a.isFunction(b.buildSelect) ? b.buildSelect.call(k, f) : f; if (typeof d === "string") d = a(a.trim(d)).html(); if (d) { a(e).append(d); j(e, b); if (b.size === undefined) b.size = g ? 3 : 1; if (g) { c = h.split(","); c = a.map(c, function (b) { return a.trim(b) }) } else c[0] = a.trim(h); setTimeout(function () { a("option", e).each(function (b) { if (b === 0 && e.multiple) this.selected = false; a(this).attr("role", "option"); if (a.inArray(a.trim(a(this).text()), c) > -1 || a.inArray(a.trim(a(this).val()), c) > -1) this.selected = "selected" }) }, 0) } } }, v || {})) } else if (b.value) { var p; if (b.size === undefined) b.size = h ? 3 : 1; if (h) { i = d.split(","); i = a.map(i, function (b) { return a.trim(b) }) } if (typeof b.value === "function") b.value = b.value(); var t, f, e, w = b.separator === undefined ? ":" : b.separator, y = b.delimiter === undefined ? ";" : b.delimiter; if (typeof b.value === "string") { t = b.value.split(y); for (p = 0; p < t.length; p++) { f = t[p].split(w); if (f.length > 2) f[1] = a.map(f, function (b, a) { if (a > 0) return b }).join(w); e = document.createElement("option"); e.setAttribute("role", "option"); e.value = f[0]; e.innerHTML = f[1]; c.appendChild(e); if (!h && (a.trim(f[0]) === a.trim(d) || a.trim(f[1]) === a.trim(d))) e.selected = "selected"; if (h && (a.inArray(a.trim(f[1]), i) > -1 || a.inArray(a.trim(f[0]), i) > -1)) e.selected = "selected" } } else if (typeof b.value === "object") { var m = b.value, g; for (g in m) if (m.hasOwnProperty(g)) { e = document.createElement("option"); e.setAttribute("role", "option"); e.value = g; e.innerHTML = m[g]; c.appendChild(e); if (!h && (a.trim(g) === a.trim(d) || a.trim(m[g]) === a.trim(d))) e.selected = "selected"; if (h && (a.inArray(a.trim(m[g]), i) > -1 || a.inArray(a.trim(g), i) > -1)) e.selected = "selected" } } j(c, b, ["value"]) } break; case "text": case "password": case "button": var s; if (l === "button") s = "button"; else s = "textbox"; c = document.createElement("input"); c.type = l; c.value = d; j(c, b); if (l !== "button") if (u) !b.size && a(c).css({ width: "98%" }); else if (!b.size) b.size = 20; a(c).attr("role", s); break; case "image": case "file": c = document.createElement("input"); c.type = l; j(c, b); break; case "custom": c = document.createElement("span"); try { if (a.isFunction(b.custom_element)) { var o = b.custom_element.call(k, d, b); if (o) { o = a(o).addClass("customelement").attr({ id: b.id, name: b.name }); a(c).empty().append(o) } else throw "e2"; } else throw "e1"; } catch (z) { z === "e1" && a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose); if (z === "e2") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_element' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, typeof z === "string" ? z : z.message, a.jgrid.edit.bClose) } } return c }, checkDate: function (a, i) { var k = function (a) { return a % 4 === 0 && (a % 100 !== 0 || a % 400 === 0) ? 29 : 28 }, b = {}, j; a = a.toLowerCase(); if (a.indexOf("/") !== -1) j = "/"; else if (a.indexOf("-") !== -1) j = "-"; else if (a.indexOf(".") !== -1) j = "."; else j = "/"; a = a.split(j); i = i.split(j); if (i.length !== 3) return false; for (var e = -1, c, g = -1, h = -1, d = 0; d < a.length; d++) { var m = isNaN(i[d]) ? 0 : parseInt(i[d], 10); b[a[d]] = m; c = a[d]; if (c.indexOf("y") !== -1) e = d; if (c.indexOf("m") !== -1) h = d; if (c.indexOf("d") !== -1) g = d } if (a[e] === "y" || a[e] === "yyyy") c = 4; else if (a[e] === "yy") c = 2; else c = -1; var l = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], f; if (e === -1) return false; f = b[a[e]].toString(); if (c === 2 && f.length === 1) c = 1; if (f.length !== c || b[a[e]] === 0 && i[e] !== "00") return false; if (h === -1) return false; f = b[a[h]].toString(); if (f.length < 1 || b[a[h]] < 1 || b[a[h]] > 12) return false; if (g === -1) return false; f = b[a[g]].toString(); return f.length < 1 || b[a[g]] < 1 || b[a[g]] > 31 || b[a[h]] === 2 && b[a[g]] > k(b[a[e]]) || b[a[g]] > l[b[a[h]]] ? false : true }, isEmpty: function (a) { return a.match(/^\s+$/) || a === "" ? true : false }, checkTime: function (c) { var d = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/, b; if (!a.jgrid.isEmpty(c)) { b = c.match(d); if (b) { if (b[3]) { if (b[1] < 1 || b[1] > 12) return false } else if (b[1] > 23) return false; if (b[2] > 59) return false } else return false } return true }, checkValues: function (c, e, l, n) { var b, g, d, i, m, k = this, f = k.p.colModel; if (l === undefined) { if (typeof e === "string") { for (g = 0, m = f.length; g < m; g++) if (f[g].name === e) { b = f[g].editrules; e = g; if (f[g].formoptions != null) d = f[g].formoptions.label; break } } else if (e >= 0) b = f[e].editrules } else { b = l; d = n === undefined ? "_" : n } if (b) { if (!d) d = k.p.colNames != null ? k.p.colNames[e] : f[e].label; if (b.required === true) if (a.jgrid.isEmpty(c)) return [false, d + ": " + a.jgrid.edit.msg.required, ""]; var h = b.required === false ? false : true; if (b.number === true) if (!(h === false && a.jgrid.isEmpty(c))) if (isNaN(c)) return [false, d + ": " + a.jgrid.edit.msg.number, ""]; if (b.minValue !== undefined && !isNaN(b.minValue)) if (parseFloat(c) < parseFloat(b.minValue)) return [false, d + ": " + a.jgrid.edit.msg.minValue + " " + b.minValue, ""]; if (b.maxValue !== undefined && !isNaN(b.maxValue)) if (parseFloat(c) > parseFloat(b.maxValue)) return [false, d + ": " + a.jgrid.edit.msg.maxValue + " " + b.maxValue, ""]; var j; if (b.email === true) if (!(h === false && a.jgrid.isEmpty(c))) { j = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i; if (!j.test(c)) return [false, d + ": " + a.jgrid.edit.msg.email, ""] } if (b.integer === true) if (!(h === false && a.jgrid.isEmpty(c))) { if (isNaN(c)) return [false, d + ": " + a.jgrid.edit.msg.integer, ""]; if (c % 1 !== 0 || c.indexOf(".") !== -1) return [false, d + ": " + a.jgrid.edit.msg.integer, ""] } if (b.date === true) if (!(h === false && a.jgrid.isEmpty(c))) { if (f[e].formatoptions && f[e].formatoptions.newformat) { i = f[e].formatoptions.newformat; if (a.jgrid.formatter.date.masks.hasOwnProperty(i)) i = a.jgrid.formatter.date.masks[i] } else i = f[e].datefmt || "Y-m-d"; if (!a.jgrid.checkDate(i, c)) return [false, d + ": " + a.jgrid.edit.msg.date + " - " + i, ""] } if (b.time === true) if (!(h === false && a.jgrid.isEmpty(c))) if (!a.jgrid.checkTime(c)) return [false, d + ": " + a.jgrid.edit.msg.date + " - hh:mm (am/pm)", ""]; if (b.url === true) if (!(h === false && a.jgrid.isEmpty(c))) { j = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i; if (!j.test(c)) return [false, d + ": " + a.jgrid.edit.msg.url, ""] } if (b.custom === true) if (!(h === false && a.jgrid.isEmpty(c))) { if (a.isFunction(b.custom_func)) { var o = b.custom_func.call(k, c, d, e); return a.isArray(o) ? o : [false, a.jgrid.edit.msg.customarray, ""] } return [false, a.jgrid.edit.msg.customfcheck, ""] } } return [true, "", ""] } }) })(jQuery); (function (a) { "use strict"; a.fn.jqFilter = function (c) { if (typeof c === "string") { var d = a.fn.jqFilter[c]; if (!d) throw "jqFilter - No such method: " + c; var e = a.makeArray(arguments).slice(1); return d.apply(this, e) } var b = a.extend(true, { filter: null, columns: [], onChange: null, afterRedraw: null, checkValues: null, error: false, errmsg: "", errorcheck: true, showQuery: true, sopt: null, ops: [], operands: null, numopts: ["eq", "ne", "lt", "le", "gt", "ge", "nu", "nn", "in", "ni"], stropts: ["eq", "ne", "bw", "bn", "ew", "en", "cn", "nc", "nu", "nn", "in", "ni"], strarr: ["text", "string", "blob"], groupOps: [{ op: "AND", text: "AND" }, { op: "OR", text: "OR"}], groupButton: true, ruleButtons: true, direction: "ltr" }, a.jgrid.filter, c || {}); return this.each(function () { if (this.filter) return; this.p = b; if (this.p.filter === null || this.p.filter === undefined) this.p.filter = { groupOp: this.p.groupOps[0].op, rules: [], groups: [] }; var d, h = this.p.columns.length, c, g = /msie/i.test(navigator.userAgent) && !window.opera; this.p.initFilter = a.extend(true, {}, this.p.filter); if (!h) return; for (d = 0; d < h; d++) { c = this.p.columns[d]; if (c.stype) c.inputtype = c.stype; else if (!c.inputtype) c.inputtype = "text"; if (c.sorttype) c.searchtype = c.sorttype; else if (!c.searchtype) c.searchtype = "string"; if (c.hidden === undefined) c.hidden = false; if (!c.label) c.label = c.name; if (c.index) c.name = c.index; if (!c.hasOwnProperty("searchoptions")) c.searchoptions = {}; if (!c.hasOwnProperty("searchrules")) c.searchrules = {} } this.p.showQuery && a(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='" + this.p.direction + "'><tbody><tr><td class='query'></td></tr></tbody></table>"); var f = function () { return a("#" + a.jgrid.jqID(b.id))[0] || null }, e = function (e, d) { var c = [true, ""], g = f(); if (a.isFunction(d.searchrules)) c = d.searchrules.call(g, e, d); else if (a.jgrid && a.jgrid.checkValues) try { c = a.jgrid.checkValues.call(g, e, -1, d.searchrules, d.label) } catch (h) { } if (c && c.length && c[0] === false) { b.error = !c[0]; b.errmsg = c[1] } }; this.onchange = function () { this.p.error = false; this.p.errmsg = ""; return a.isFunction(this.p.onChange) ? this.p.onChange.call(this, this.p) : false }; this.reDraw = function () { a("table.group:first", this).remove(); var c = this.createTableForGroup(b.filter, null); a(this).append(c); a.isFunction(this.p.afterRedraw) && this.p.afterRedraw.call(this, this.p) }; this.createTableForGroup = function (e, g) { var d = this, c, f = a("<table class='group ui-widget ui-widget-content' style='border:0px none;'><tbody></tbody></table>"), m = "left"; if (this.p.direction === "rtl") { m = "right"; f.attr("dir", "rtl") } g === null && f.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='" + m + "'></th></tr>"); var s = a("<tr></tr>"); f.append(s); var i = a("<th colspan='5' align='" + m + "'></th>"); s.append(i); if (this.p.ruleButtons === true) { var l = a("<select class='opsel'></select>"); i.append(l); var r = "", q; for (c = 0; c < b.groupOps.length; c++) { q = e.groupOp === d.p.groupOps[c].op ? " selected='selected'" : ""; r += "<option value='" + d.p.groupOps[c].op + "'" + q + ">" + d.p.groupOps[c].text + "</option>" } l.append(r).bind("change", function () { e.groupOp = a(l).val(); d.onchange() }) } var k = "<span></span>"; if (this.p.groupButton) { k = a("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>"); k.bind("click", function () { if (e.groups === undefined) e.groups = []; e.groups.push({ groupOp: b.groupOps[0].op, rules: [], groups: [] }); d.reDraw(); d.onchange(); return false }) } i.append(k); if (this.p.ruleButtons === true) { var p = a("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"), h; p.bind("click", function () { if (e.rules === undefined) e.rules = []; for (c = 0; c < d.p.columns.length; c++) { var f = d.p.columns[c].search === undefined ? true : d.p.columns[c].search, i = d.p.columns[c].hidden === true, g = d.p.columns[c].searchoptions.searchhidden === true; if (g && f || f && !i) { h = d.p.columns[c]; break } } var b; if (h.searchoptions.sopt) b = h.searchoptions.sopt; else if (d.p.sopt) b = d.p.sopt; else if (a.inArray(h.searchtype, d.p.strarr) !== -1) b = d.p.stropts; else b = d.p.numopts; e.rules.push({ field: h.name, op: b[0], data: "" }); d.reDraw(); return false }); i.append(p) } if (g !== null) { var o = a("<input type='button' value='-' title='Delete group' class='delete-group'/>"); i.append(o); o.bind("click", function () { for (c = 0; c < g.groups.length; c++) if (g.groups[c] === e) { g.groups.splice(c, 1); break } d.reDraw(); d.onchange(); return false }) } if (e.groups !== undefined) for (c = 0; c < e.groups.length; c++) { var j = a("<tr></tr>"); f.append(j); var t = a("<td class='first'></td>"); j.append(t); var n = a("<td colspan='4'></td>"); n.append(this.createTableForGroup(e.groups[c], e)); j.append(n) } if (e.groupOp === undefined) e.groupOp = d.p.groupOps[0].op; if (e.rules !== undefined) for (c = 0; c < e.rules.length; c++) f.append(this.createTableRowForRule(e.rules[c], e)); return f }; this.createTableRowForRule = function (h, t) { var c = this, l = f(), m = a("<tr></tr>"), d, i, j, e, q = "", o; m.append("<td class='first'></td>"); var x = a("<td class='columns'></td>"); m.append(x); var s = a("<select></select>"), k, p = []; x.append(s); s.bind("change", function () { h.field = a(s).val(); j = a(this).parents("tr:first"); for (d = 0; d < c.p.columns.length; d++) if (c.p.columns[d].name === h.field) { e = c.p.columns[d]; break } if (!e) return; e.searchoptions.id = a.jgrid.randId(); if (g && e.inputtype === "text") if (!e.searchoptions.size) e.searchoptions.size = 10; var b = a.jgrid.createEl.call(l, e.inputtype, e.searchoptions, "", true, c.p.ajaxSelectOptions, true); a(b).addClass("input-elm"); if (e.searchoptions.sopt) i = e.searchoptions.sopt; else if (c.p.sopt) i = c.p.sopt; else if (a.inArray(e.searchtype, c.p.strarr) !== -1) i = c.p.stropts; else i = c.p.numopts; var m = "", f = 0; p = []; a.each(c.p.ops, function () { p.push(this.oper) }); for (d = 0; d < i.length; d++) { k = a.inArray(i[d], p); if (k !== -1) { if (f === 0) h.op = c.p.ops[k].oper; m += "<option value='" + c.p.ops[k].oper + "'>" + c.p.ops[k].text + "</option>"; f++ } } a(".selectopts", j).empty().append(m); a(".selectopts", j)[0].selectedIndex = 0; if (a.jgrid.msie && a.jgrid.msiever() < 9) { var n = parseInt(a("select.selectopts", j)[0].offsetWidth, 10) + 1; a(".selectopts", j).width(n); a(".selectopts", j).css("width", "auto") } a(".data", j).empty().append(b); a.jgrid.bindEv.call(l, b, e.searchoptions); a(".input-elm", j).bind("change", function (d) { var b = a(this).hasClass("ui-autocomplete-input") ? 200 : 0; setTimeout(function () { var b = d.target; h.data = b.nodeName.toUpperCase() === "SPAN" && e.searchoptions && a.isFunction(e.searchoptions.custom_value) ? e.searchoptions.custom_value.call(l, a(b).children(".customelement:first"), "get") : b.value; c.onchange() }, b) }); setTimeout(function () { h.data = a(b).val(); c.onchange() }, 0) }); var A = 0; for (d = 0; d < c.p.columns.length; d++) { var z = c.p.columns[d].search === undefined ? true : c.p.columns[d].search, C = c.p.columns[d].hidden === true, B = c.p.columns[d].searchoptions.searchhidden === true; if (B && z || z && !C) { o = ""; if (h.field === c.p.columns[d].name) { o = " selected='selected'"; A = d } q += "<option value='" + c.p.columns[d].name + "'" + o + ">" + c.p.columns[d].label + "</option>" } } s.append(q); var v = a("<td class='operators'></td>"); m.append(v); e = b.columns[A]; e.searchoptions.id = a.jgrid.randId(); if (g && e.inputtype === "text") if (!e.searchoptions.size) e.searchoptions.size = 10; var n = a.jgrid.createEl.call(l, e.inputtype, e.searchoptions, h.data, true, c.p.ajaxSelectOptions, true); if (h.op === "nu" || h.op === "nn") { a(n).attr("readonly", "true"); a(n).attr("disabled", "true") } var r = a("<select class='selectopts'></select>"); v.append(r); r.bind("change", function () { h.op = a(r).val(); j = a(this).parents("tr:first"); var b = a(".input-elm", j)[0]; if (h.op === "nu" || h.op === "nn") { h.data = ""; b.value = ""; b.setAttribute("readonly", "true"); b.setAttribute("disabled", "true") } else { b.removeAttribute("readonly"); b.removeAttribute("disabled") } c.onchange() }); if (e.searchoptions.sopt) i = e.searchoptions.sopt; else if (c.p.sopt) i = c.p.sopt; else if (a.inArray(e.searchtype, c.p.strarr) !== -1) i = c.p.stropts; else i = c.p.numopts; q = ""; a.each(c.p.ops, function () { p.push(this.oper) }); for (d = 0; d < i.length; d++) { k = a.inArray(i[d], p); if (k !== -1) { o = h.op === c.p.ops[k].oper ? " selected='selected'" : ""; q += "<option value='" + c.p.ops[k].oper + "'" + o + ">" + c.p.ops[k].text + "</option>" } } r.append(q); var y = a("<td class='data'></td>"); m.append(y); y.append(n); a.jgrid.bindEv.call(l, n, e.searchoptions); a(n).addClass("input-elm").bind("change", function () { h.data = e.inputtype === "custom" ? e.searchoptions.custom_value.call(l, a(this).children(".customelement:first"), "get") : a(this).val(); c.onchange() }); var w = a("<td></td>"); m.append(w); if (this.p.ruleButtons === true) { var u = a("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>"); w.append(u); u.bind("click", function () { for (d = 0; d < t.rules.length; d++) if (t.rules[d] === h) { t.rules.splice(d, 1); break } c.reDraw(); c.onchange(); return false }) } return m }; this.getStringForGroup = function (b) { var a = "(", c; if (b.groups !== undefined) for (c = 0; c < b.groups.length; c++) { if (a.length > 1) a += " " + b.groupOp + " "; try { a += this.getStringForGroup(b.groups[c]) } catch (d) { alert(d) } } if (b.rules !== undefined) try { for (c = 0; c < b.rules.length; c++) { if (a.length > 1) a += " " + b.groupOp + " "; a += this.getStringForRule(b.rules[c]) } } catch (e) { alert(e) } a += ")"; return a === "()" ? "" : a }; this.getStringForRule = function (g) { for (var i = "", c = "", h, j, d, k = ["int", "integer", "float", "number", "currency"], f = 0; f < this.p.ops.length; f++) if (this.p.ops[f].oper === g.op) { i = this.p.operands.hasOwnProperty(g.op) ? this.p.operands[g.op] : ""; c = this.p.ops[f].oper; break } for (f = 0; f < this.p.columns.length; f++) if (this.p.columns[f].name === g.field) { h = this.p.columns[f]; break } if (h === undefined) return ""; d = g.data; if (c === "bw" || c === "bn") d = d + "%"; if (c === "ew" || c === "en") d = "%" + d; if (c === "cn" || c === "nc") d = "%" + d + "%"; if (c === "in" || c === "ni") d = " (" + d + ")"; b.errorcheck && e(g.data, h); if (a.inArray(h.searchtype, k) !== -1 || c === "nn" || c === "nu") j = g.field + " " + i + " " + d; else j = g.field + " " + i + ' "' + d + '"'; return j }; this.resetFilter = function () { this.p.filter = a.extend(true, {}, this.p.initFilter); this.reDraw(); this.onchange() }; this.hideError = function () { a("th.ui-state-error", this).html(""); a("tr.error", this).hide() }; this.showError = function () { a("th.ui-state-error", this).html(this.p.errmsg); a("tr.error", this).show() }; this.toUserFriendlyString = function () { return this.getStringForGroup(b.filter) }; this.toString = function () { var a = this; function c(b) { if (a.p.errorcheck) { for (var d, c = 0; c < a.p.columns.length; c++) if (a.p.columns[c].name === b.field) { d = a.p.columns[c]; break } d && e(b.data, d) } return b.op + "(item." + b.field + ",'" + b.data + "')" } function b(d) { var a = "(", e; if (d.groups !== undefined) for (e = 0; e < d.groups.length; e++) { if (a.length > 1) if (d.groupOp === "OR") a += " || "; else a += " && "; a += b(d.groups[e]) } if (d.rules !== undefined) for (e = 0; e < d.rules.length; e++) { if (a.length > 1) if (d.groupOp === "OR") a += " || "; else a += " && "; a += c(d.rules[e]) } a += ")"; return a === "()" ? "" : a } return b(this.p.filter) }; this.reDraw(); this.p.showQuery && this.onchange(); this.filter = true }) }; a.extend(a.fn.jqFilter, { toSQLString: function () { var a = ""; this.each(function () { a = this.toUserFriendlyString() }); return a }, filterData: function () { var a; this.each(function () { a = this.p.filter }); return a }, getParameter: function (a) { if (a !== undefined) if (this.p.hasOwnProperty(a)) return this.p[a]; return this.p }, resetFilter: function () { return this.each(function () { this.resetFilter() }) }, addFilter: function (b) { if (typeof b === "string") b = a.jgrid.parse(b); this.each(function () { this.p.filter = b; this.reDraw(); this.onchange() }) } }) })(jQuery); (function (a) { "use strict"; var b = {}; a.jgrid.extend({ searchGrid: function (b) { b = a.extend(true, { recreateFilter: false, drag: true, sField: "searchField", sValue: "searchString", sOper: "searchOper", sFilter: "filters", loadDefaults: true, beforeShowSearch: null, afterShowSearch: null, onInitializeSearch: null, afterRedraw: null, afterChange: null, closeAfterSearch: false, closeAfterReset: false, closeOnEscape: false, searchOnEnter: false, multipleSearch: false, multipleGroup: false, top: 0, left: 0, jqModal: true, modal: false, resize: true, width: 450, height: "auto", dataheight: "auto", showQuery: false, errorcheck: true, sopt: null, stringResult: undefined, onClose: null, onSearch: null, onReset: null, toTop: true, overlay: 30, columns: [], tmplNames: null, tmplFilters: null, tmplLabel: " Template: ", showOnLoad: false, layer: null, operands: { eq: "=", ne: "<>", lt: "<", le: "<=", gt: ">", ge: ">=", bw: "LIKE", bn: "NOT LIKE", "in": "IN", ni: "NOT IN", ew: "LIKE", en: "NOT LIKE", cn: "LIKE", nc: "NOT LIKE", nu: "IS NULL", nn: "ISNOT NULL"} }, a.jgrid.search, b || {}); return this.each(function () { var c = this; if (!c.grid) return; var d = "fbox_" + c.p.id, i = true, g = { themodal: "searchmod" + d, modalhead: "searchhd" + d, modalcontent: "searchcnt" + d, scrollelm: d }, h = c.p.postData[b.sFilter]; if (typeof h === "string") h = a.jgrid.parse(h); b.recreateFilter === true && a("#" + a.jgrid.jqID(g.themodal)).remove(); function p(e) { i = a(c).triggerHandler("jqGridFilterBeforeShow", [e]); if (i === undefined) i = true; if (i && a.isFunction(b.beforeShowSearch)) i = b.beforeShowSearch.call(c, e); if (i) { a.jgrid.viewModal("#" + a.jgrid.jqID(g.themodal), { gbox: "#gbox_" + a.jgrid.jqID(d), jqm: b.jqModal, modal: b.modal, overlay: b.overlay, toTop: b.toTop }); a(c).triggerHandler("jqGridFilterAfterShow", [e]); a.isFunction(b.afterShowSearch) && b.afterShowSearch.call(c, e) } } if (a("#" + a.jgrid.jqID(g.themodal))[0] !== undefined) p(a("#fbox_" + a.jgrid.jqID(+c.p.id))); else { var f = a("<div><div id='" + d + "' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_" + a.jgrid.jqID(c.p.id)), r = "left", q = ""; if (c.p.direction === "rtl") { r = "right"; q = " style='text-align:left'"; f.attr("dir", "rtl") } var e = a.extend([], c.p.colModel), u = "<a href='javascript:void(0)' id='" + d + "_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>" + b.Find + "</a>", t = "<a href='javascript:void(0)' id='" + d + "_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>" + b.Reset + "</a>", o = "", k = "", m, j = false, s, l = -1; if (b.showQuery) o = "<a href='javascript:void(0)' id='" + d + "_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>"; if (!b.columns.length) a.each(e, function (d, a) { if (!a.label) a.label = c.p.colNames[d]; if (!j) { var b = a.search === undefined ? true : a.search, f = a.hidden === true, e = a.searchoptions && a.searchoptions.searchhidden === true; if (e && b || b && !f) { j = true; m = a.index || a.name; l = d } } }); else { e = b.columns; l = 0; m = e[0].index || e[0].name } if (!h && m || b.multipleSearch === false) { var n = "eq"; if (l >= 0 && e[l].searchoptions && e[l].searchoptions.sopt) n = e[l].searchoptions.sopt[0]; else if (b.sopt && b.sopt.length) n = b.sopt[0]; h = { groupOp: "AND", rules: [{ field: m, op: n, data: ""}]} } j = false; if (b.tmplNames && b.tmplNames.length) { j = true; k = b.tmplLabel; k += "<select class='ui-template'>"; k += "<option value='default'>Default</option>"; a.each(b.tmplNames, function (a, b) { k += "<option value='" + a + "'>" + b + "</option>" }); k += "</select>" } s = "<table class='EditTable' style='border:0px none;margin-top:5px' id='" + d + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:" + r + "'>" + t + k + "</td><td class='EditButton' " + q + ">" + o + u + "</td></tr></tbody></table>"; d = a.jgrid.jqID(d); a("#" + d).jqFilter({ columns: e, filter: b.loadDefaults ? h : null, showQuery: b.showQuery, errorcheck: b.errorcheck, sopt: b.sopt, groupButton: b.multipleGroup, ruleButtons: b.multipleSearch, afterRedraw: b.afterRedraw, ops: b.odata, operands: b.operands, ajaxSelectOptions: c.p.ajaxSelectOptions, groupOps: b.groupOps, onChange: function () { this.p.showQuery && a(".query", this).html(this.toUserFriendlyString()); a.isFunction(b.afterChange) && b.afterChange.call(c, a("#" + d), b) }, direction: c.p.direction, id: c.p.id }); f.append(s); j && b.tmplFilters && b.tmplFilters.length && a(".ui-template", f).bind("change", function () { var c = a(this).val(); if (c === "default") a("#" + d).jqFilter("addFilter", h); else a("#" + d).jqFilter("addFilter", b.tmplFilters[parseInt(c, 10)]); return false }); if (b.multipleGroup === true) b.multipleSearch = true; a(c).triggerHandler("jqGridFilterInitialize", [a("#" + d)]); a.isFunction(b.onInitializeSearch) && b.onInitializeSearch.call(c, a("#" + d)); b.gbox = "#gbox_" + d; if (b.layer) a.jgrid.createModal(g, f, b, "#gview_" + a.jgrid.jqID(c.p.id), a("#gbox_" + a.jgrid.jqID(c.p.id))[0], "#" + a.jgrid.jqID(b.layer), { position: "relative" }); else a.jgrid.createModal(g, f, b, "#gview_" + a.jgrid.jqID(c.p.id), a("#gbox_" + a.jgrid.jqID(c.p.id))[0]); (b.searchOnEnter || b.closeOnEscape) && a("#" + a.jgrid.jqID(g.themodal)).keydown(function (e) { var c = a(e.target); if (b.searchOnEnter && e.which === 13 && !c.hasClass("add-group") && !c.hasClass("add-rule") && !c.hasClass("delete-group") && !c.hasClass("delete-rule") && (!c.hasClass("fm-button") || !c.is("[id$=_query]"))) { a("#" + d + "_search").focus().click(); return false } if (b.closeOnEscape && e.which === 27) { a("#" + a.jgrid.jqID(g.modalhead)).find(".ui-jqdialog-titlebar-close").focus().click(); return false } }); o && a("#" + d + "_query").bind("click", function () { a(".queryresult", f).toggle(); return false }); if (b.stringResult === undefined) b.stringResult = b.multipleSearch; a("#" + d + "_search").bind("click", function () { var h = a("#" + d), e = {}, i, f = h.jqFilter("filterData"); if (b.errorcheck) { h[0].hideError(); !b.showQuery && h.jqFilter("toSQLString"); if (h[0].p.error) { h[0].showError(); return false } } if (b.stringResult) { try { i = xmlJsonClass.toJson(f, "", "", false) } catch (k) { try { i = JSON.stringify(f) } catch (j) { } } if (typeof i === "string") { e[b.sFilter] = i; a.each([b.sField, b.sValue, b.sOper], function () { e[this] = "" }) } } else if (b.multipleSearch) { e[b.sFilter] = f; a.each([b.sField, b.sValue, b.sOper], function () { e[this] = "" }) } else { e[b.sField] = f.rules[0].field; e[b.sValue] = f.rules[0].data; e[b.sOper] = f.rules[0].op; e[b.sFilter] = "" } c.p.search = true; a.extend(c.p.postData, e); a(c).triggerHandler("jqGridFilterSearch"); a.isFunction(b.onSearch) && b.onSearch.call(c); a(c).trigger("reloadGrid", [{ page: 1}]); b.closeAfterSearch && a.jgrid.hideModal("#" + a.jgrid.jqID(g.themodal), { gb: "#gbox_" + a.jgrid.jqID(c.p.id), jqm: b.jqModal, onClose: b.onClose }); return false }); a("#" + d + "_reset").bind("click", function () { var e = {}, g = a("#" + d); c.p.search = false; if (b.multipleSearch === false) e[b.sField] = e[b.sValue] = e[b.sOper] = ""; else e[b.sFilter] = ""; g[0].resetFilter(); j && a(".ui-template", f).val("default"); a.extend(c.p.postData, e); a(c).triggerHandler("jqGridFilterReset"); a.isFunction(b.onReset) && b.onReset.call(c); a(c).trigger("reloadGrid", [{ page: 1}]); return false }); p(a("#" + d)); a(".fm-button:not(.ui-state-disabled)", f).hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }) } }) }, editGridRow: function (d, c) { c = a.extend(true, { top: 0, left: 0, width: 300, datawidth: "auto", height: "auto", dataheight: "auto", modal: false, overlay: 30, drag: true, resize: true, url: null, mtype: "POST", clearAfterAdd: true, closeAfterEdit: false, reloadAfterSubmit: true, onInitializeForm: null, beforeInitData: null, beforeShowForm: null, afterShowForm: null, beforeSubmit: null, afterSubmit: null, onclickSubmit: null, afterComplete: null, onclickPgButtons: null, afterclickPgButtons: null, editData: {}, recreateForm: false, jqModal: true, closeOnEscape: false, addedrow: "first", topinfo: "", bottominfo: "", saveicon: [], closeicon: [], savekey: [false, 13], navkeys: [false, 38, 40], checkOnSubmit: false, checkOnUpdate: false, _savedData: {}, processing: false, onClose: null, ajaxEditOptions: {}, serializeEditData: null, viewPagerButtons: true, overlayClass: "ui-widget-overlay" }, a.jgrid.edit, c || {}); b[a(this)[0].p.id] = c; return this.each(function () { var e = this; if (!e.grid || !d) return; var k = e.p.id, g = "FrmGrid_" + k, C = "TblGrid_" + k, h = "#" + a.jgrid.jqID(C), i = { themodal: "editmod" + k, modalhead: "edithd" + k, modalcontent: "editcnt" + k, scrollelm: g }, r = a.isFunction(b[e.p.id].beforeShowForm) ? b[e.p.id].beforeShowForm : false, s = a.isFunction(b[e.p.id].afterShowForm) ? b[e.p.id].afterShowForm : false, q = a.isFunction(b[e.p.id].beforeInitData) ? b[e.p.id].beforeInitData : false, I = a.isFunction(b[e.p.id].onInitializeForm) ? b[e.p.id].onInitializeForm : false, l = true, o = 1, D = 0, f, v, j; g = a.jgrid.jqID(g); if (d === "new") { d = "_empty"; j = "add"; c.caption = b[e.p.id].addCaption } else { c.caption = b[e.p.id].editCaption; j = "edit" } c.recreateForm === true && a("#" + a.jgrid.jqID(i.themodal))[0] !== undefined && a("#" + a.jgrid.jqID(i.themodal)).remove(); var A = true; if (c.checkOnUpdate && c.jqModal && !c.modal) A = false; function L() { a(h + " > tbody > tr > td > .FormElement").each(function () { var c = a(".customelement", this); if (c.length) { var g = c[0], b = a(g).attr("name"); a.each(e.p.colModel, function () { if (this.name === b && this.editoptions && a.isFunction(this.editoptions.custom_value)) { try { f[b] = this.editoptions.custom_value.call(e, a("#" + a.jgrid.jqID(b), h), "get"); if (f[b] === undefined) throw "e1"; } catch (c) { if (c === "e1") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, c.message, a.jgrid.edit.bClose) } return true } }) } else { switch (a(this).get(0).type) { case "checkbox": if (a(this).is(":checked")) f[this.name] = a(this).val(); else { var i = a(this).attr("offval"); f[this.name] = i } break; case "select-one": f[this.name] = a("option:selected", this).val(); break; case "select-multiple": f[this.name] = a(this).val(); if (f[this.name]) f[this.name] = f[this.name].join(","); else f[this.name] = ""; var d = []; a("option:selected", this).each(function (c, b) { d[c] = a(b).text() }); break; case "password": case "text": case "textarea": case "button": f[this.name] = a(this).val() } if (e.p.autoencode) f[this.name] = a.jgrid.htmlEncode(f[this.name]) } }); return true } function R(i, d, m, n) { for (var f, o, h, k = 0, c, s, l, p = [], j = false, u = "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>", r = "", t = 1; t <= n; t++) r += u; if (i !== "_empty") j = a(d).jqGrid("getInd", i); a(d.p.colModel).each(function (u) { f = this.name; if (this.editrules && this.editrules.edithidden === true) o = false; else o = this.hidden === true ? true : false; s = o ? "style='display:none'" : ""; if (f !== "cb" && f !== "subgrid" && this.editable === true && f !== "rn") { if (j === false) c = ""; else if (f === d.p.ExpandColumn && d.p.treeGrid === true) c = a("td[role='gridcell']:eq(" + u + ")", d.rows[j]).text(); else { try { c = a.unformat.call(d, a("td[role='gridcell']:eq(" + u + ")", d.rows[j]), { rowId: i, colModel: this }, u) } catch (y) { c = this.edittype && this.edittype === "textarea" ? a("td[role='gridcell']:eq(" + u + ")", d.rows[j]).text() : a("td[role='gridcell']:eq(" + u + ")", d.rows[j]).html() } if (!c || c === "&nbsp;" || c === "&#160;" || c.length === 1 && c.charCodeAt(0) === 160) c = "" } var t = a.extend({}, this.editoptions || {}, { id: f, name: f }), q = a.extend({}, { elmprefix: "", elmsuffix: "", rowabove: false, rowcontent: "" }, this.formoptions || {}), v = parseInt(q.rowpos, 10) || k + 1, x = parseInt((parseInt(q.colpos, 10) || 1) * 2, 10); if (i === "_empty" && t.defaultValue) c = a.isFunction(t.defaultValue) ? t.defaultValue.call(e) : t.defaultValue; if (!this.edittype) this.edittype = "text"; if (e.p.autoencode) c = a.jgrid.htmlDecode(c); l = a.jgrid.createEl.call(e, this.edittype, t, c, false, a.extend({}, a.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {})); if (b[e.p.id].checkOnSubmit || b[e.p.id].checkOnUpdate) b[e.p.id]._savedData[f] = c; a(l).addClass("FormElement"); a.inArray(this.edittype, ["text", "textarea", "password", "select"]) > -1 && a(l).addClass("ui-widget-content ui-corner-all"); h = a(m).find("tr[rowpos=" + v + "]"); if (q.rowabove) { var w = a("<tr><td class='contentinfo' colspan='" + n * 2 + "'>" + q.rowcontent + "</td></tr>"); a(m).append(w); w[0].rp = v } if (h.length === 0) { h = a("<tr " + s + " rowpos='" + v + "'></tr>").addClass("FormData").attr("id", "tr_" + f); a(h).append(r); a(m).append(h); h[0].rp = v } a("td:eq(" + (x - 2) + ")", h[0]).html(q.label === undefined ? d.p.colNames[u] : q.label); a("td:eq(" + (x - 1) + ")", h[0]).append(q.elmprefix).append(l).append(q.elmsuffix); a.isFunction(t.custom_value) && i !== "_empty" && t.custom_value.call(e, a("#" + f, "#" + g), "set", c); a.jgrid.bindEv.call(e, l, t); p[k] = u; k++ } }); if (k > 0) { var q = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (n * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='" + d.p.id + "_id' value='" + i + "'/></td></tr>"); q[0].rp = k + 999; a(m).append(q); if (b[e.p.id].checkOnSubmit || b[e.p.id].checkOnUpdate) b[e.p.id]._savedData[d.p.id + "_id"] = i } return p } function t(k, l, i) { var d, o = 0, c, f, m, j, n; if (b[e.p.id].checkOnSubmit || b[e.p.id].checkOnUpdate) { b[e.p.id]._savedData = {}; b[e.p.id]._savedData[l.p.id + "_id"] = k } var g = l.p.colModel; if (k === "_empty") { a(g).each(function () { d = this.name; m = a.extend({}, this.editoptions || {}); f = a("#" + a.jgrid.jqID(d), "#" + i); if (f && f.length && f[0] !== null) { j = ""; if (m.defaultValue) { j = a.isFunction(m.defaultValue) ? m.defaultValue.call(e) : m.defaultValue; if (f[0].type === "checkbox") { n = j.toLowerCase(); if (n.search(/(false|f|0|no|n|off|undefined)/i) < 0 && n !== "") { f[0].checked = true; f[0].defaultChecked = true; f[0].value = j } else { f[0].checked = false; f[0].defaultChecked = false } } else f.val(j) } else if (f[0].type === "checkbox") { f[0].checked = false; f[0].defaultChecked = false; j = a(f).attr("offval") } else if (f[0].type && f[0].type.substr(0, 6) === "select") f[0].selectedIndex = 0; else f.val(j); if (b[e.p.id].checkOnSubmit === true || b[e.p.id].checkOnUpdate) b[e.p.id]._savedData[d] = j } }); a("#id_g", "#" + i).val(k); return } var p = a(l).jqGrid("getInd", k, true); if (!p) return; a('td[role="gridcell"]', p).each(function (f) { d = g[f].name; if (d !== "cb" && d !== "subgrid" && d !== "rn" && g[f].editable === true) { if (d === l.p.ExpandColumn && l.p.treeGrid === true) c = a(this).text(); else try { c = a.unformat.call(l, a(this), { rowId: k, colModel: g[f] }, f) } catch (n) { c = g[f].edittype === "textarea" ? a(this).text() : a(this).html() } if (e.p.autoencode) c = a.jgrid.htmlDecode(c); if (b[e.p.id].checkOnSubmit === true || b[e.p.id].checkOnUpdate) b[e.p.id]._savedData[d] = c; d = a.jgrid.jqID(d); switch (g[f].edittype) { case "password": case "text": case "button": case "image": case "textarea": if (c === "&nbsp;" || c === "&#160;" || c.length === 1 && c.charCodeAt(0) === 160) c = ""; a("#" + d, "#" + i).val(c); break; case "select": var h = c.split(","); h = a.map(h, function (b) { return a.trim(b) }); a("#" + d + " option", "#" + i).each(function () { if (!g[f].editoptions.multiple && (a.trim(c) === a.trim(a(this).text()) || h[0] === a.trim(a(this).text()) || h[0] === a.trim(a(this).val()))) this.selected = true; else if (g[f].editoptions.multiple) if (a.inArray(a.trim(a(this).text()), h) > -1 || a.inArray(a.trim(a(this).val()), h) > -1) this.selected = true; else this.selected = false; else this.selected = false }); break; case "checkbox": c = String(c); if (g[f].editoptions && g[f].editoptions.value) { var j = g[f].editoptions.value.split(":"); if (j[0] === c) a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]({ checked: true, defaultChecked: true }); else a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]({ checked: false, defaultChecked: false }) } else { c = c.toLowerCase(); if (c.search(/(false|f|0|no|n|off|undefined)/i) < 0 && c !== "") { a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]("checked", true); a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]("defaultChecked", true) } else { a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]("checked", false); a("#" + d, "#" + i)[e.p.useProp ? "prop" : "attr"]("defaultChecked", false) } } break; case "custom": try { if (g[f].editoptions && a.isFunction(g[f].editoptions.custom_value)) g[f].editoptions.custom_value.call(e, a("#" + d, "#" + i), "set", c); else throw "e1"; } catch (m) { if (m === "e1") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, m.message, a.jgrid.edit.bClose) } } o++ } }); o > 0 && a("#id_g", h).val(k) } function S() { a.each(e.p.colModel, function (b, a) { if (a.editoptions && a.editoptions.NullIfEmpty === true) if (f.hasOwnProperty(a.name) && f[a.name] === "") f[a.name] = "null" }) } function u() { var q, d = [true, "", ""], s = {}, m = e.p.prmNames, l, o, u, w, v, n = a(e).triggerHandler("jqGridAddEditBeforeCheckValues", [a("#" + g), j]); if (n && typeof n === "object") f = n; if (a.isFunction(b[e.p.id].beforeCheckValues)) { n = b[e.p.id].beforeCheckValues.call(e, f, a("#" + g), j); if (n && typeof n === "object") f = n } for (u in f) if (f.hasOwnProperty(u)) { d = a.jgrid.checkValues.call(e, f[u], u); if (d[0] === false) break } S(); if (d[0]) { s = a(e).triggerHandler("jqGridAddEditClickSubmit", [b[e.p.id], f, j]); if (s === undefined && a.isFunction(b[e.p.id].onclickSubmit)) s = b[e.p.id].onclickSubmit.call(e, b[e.p.id], f, j) || {}; d = a(e).triggerHandler("jqGridAddEditBeforeSubmit", [f, a("#" + g), j]); if (d === undefined) d = [true, "", ""]; if (d[0] && a.isFunction(b[e.p.id].beforeSubmit)) d = b[e.p.id].beforeSubmit.call(e, f, a("#" + g), j) } if (d[0] && !b[e.p.id].processing) { b[e.p.id].processing = true; a("#sData", h + "_2").addClass("ui-state-active"); o = m.oper; l = m.id; f[o] = a.trim(f[e.p.id + "_id"]) === "_empty" ? m.addoper : m.editoper; if (f[o] !== m.addoper) f[l] = f[e.p.id + "_id"]; else if (f[l] === undefined) f[l] = f[e.p.id + "_id"]; delete f[e.p.id + "_id"]; f = a.extend(f, b[e.p.id].editData, s); if (e.p.treeGrid === true) { if (f[o] === m.addoper) { w = a(e).jqGrid("getGridParam", "selrow"); var y = e.p.treeGridModel === "adjacency" ? e.p.treeReader.parent_id_field : "parent_id"; f[y] = w } for (v in e.p.treeReader) if (e.p.treeReader.hasOwnProperty(v)) { var x = e.p.treeReader[v]; if (f.hasOwnProperty(x)) { if (f[o] === m.addoper && v === "parent_id_field") continue; delete f[x] } } } f[l] = a.jgrid.stripPref(e.p.idPrefix, f[l]); var p = a.extend({ url: b[e.p.id].url || a(e).jqGrid("getGridParam", "editurl"), type: b[e.p.id].mtype, data: a.isFunction(b[e.p.id].serializeEditData) ? b[e.p.id].serializeEditData.call(e, f) : f, complete: function (n, r) { var p; f[l] = e.p.idPrefix + f[l]; if (n.status >= 300 && n.status !== 304) { d[0] = false; d[1] = a(e).triggerHandler("jqGridAddEditErrorTextFormat", [n, j]); if (a.isFunction(b[e.p.id].errorTextFormat)) d[1] = b[e.p.id].errorTextFormat.call(e, n, j); else d[1] = r + " Status: '" + n.statusText + "'. Error code: " + n.status } else { d = a(e).triggerHandler("jqGridAddEditAfterSubmit", [n, f, j]); if (d === undefined) d = [true, "", ""]; if (d[0] && a.isFunction(b[e.p.id].afterSubmit)) d = b[e.p.id].afterSubmit.call(e, n, f, j) } if (d[0] === false) { a("#FormError>td", h).html(d[1]); a("#FormError", h).show() } else { e.p.autoencode && a.each(f, function (b, c) { f[b] = a.jgrid.htmlDecode(c) }); if (f[o] === m.addoper) { if (!d[2]) d[2] = a.jgrid.randId(); f[l] = d[2]; if (b[e.p.id].reloadAfterSubmit) a(e).trigger("reloadGrid"); else if (e.p.treeGrid === true) a(e).jqGrid("addChildNode", d[2], w, f); else a(e).jqGrid("addRowData", d[2], f, c.addedrow); if (b[e.p.id].closeAfterAdd) { e.p.treeGrid !== true && a(e).jqGrid("setSelection", d[2]); a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }) } else b[e.p.id].clearAfterAdd && t("_empty", e, g) } else { if (b[e.p.id].reloadAfterSubmit) { a(e).trigger("reloadGrid"); !b[e.p.id].closeAfterEdit && setTimeout(function () { a(e).jqGrid("setSelection", f[l]) }, 1e3) } else if (e.p.treeGrid === true) a(e).jqGrid("setTreeRow", f[l], f); else a(e).jqGrid("setRowData", f[l], f); b[e.p.id].closeAfterEdit && a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }) } if (a.isFunction(b[e.p.id].afterComplete)) { q = n; setTimeout(function () { a(e).triggerHandler("jqGridAddEditAfterComplete", [q, f, a("#" + g), j]); b[e.p.id].afterComplete.call(e, q, f, a("#" + g), j); q = null }, 500) } if (b[e.p.id].checkOnSubmit || b[e.p.id].checkOnUpdate) { a("#" + g).data("disabled", false); if (b[e.p.id]._savedData[e.p.id + "_id"] !== "_empty") for (p in b[e.p.id]._savedData) if (b[e.p.id]._savedData.hasOwnProperty(p) && f[p]) b[e.p.id]._savedData[p] = f[p] } } b[e.p.id].processing = false; a("#sData", h + "_2").removeClass("ui-state-active"); try { a(":input:visible", "#" + g)[0].focus() } catch (s) { } } }, a.jgrid.ajaxOptions, b[e.p.id].ajaxEditOptions); if (!p.url && !b[e.p.id].useDataProxy) if (a.isFunction(e.p.dataProxy)) b[e.p.id].useDataProxy = true; else { d[0] = false; d[1] += " " + a.jgrid.errors.nourl } if (d[0]) if (b[e.p.id].useDataProxy) { var r = e.p.dataProxy.call(e, p, "set_" + e.p.id); if (r === undefined) r = [true, ""]; if (r[0] === false) { d[0] = false; d[1] = r[1] || "Error deleting the selected row!" } else { p.data.oper === m.addoper && b[e.p.id].closeAfterAdd && a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); p.data.oper === m.editoper && b[e.p.id].closeAfterEdit && a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }) } } else a.ajax(p) } if (d[0] === false) { a("#FormError>td", h).html(d[1]); a("#FormError", h).show() } } function K(b, d) { var c = false, a; for (a in b) if (b.hasOwnProperty(a) && b[a] != d[a]) { c = true; break } return c } function m() { var c = true; a("#FormError", h).hide(); if (b[e.p.id].checkOnUpdate) { f = {}; L(); v = K(f, b[e.p.id]._savedData); if (v) { a("#" + g).data("disabled", true); a(".confirm", "#" + i.themodal).show(); c = false } } return c } function J() { var b; if (d !== "_empty" && e.p.savedRow !== undefined && e.p.savedRow.length > 0 && a.isFunction(a.fn.jqGrid.restoreRow)) for (b = 0; b < e.p.savedRow.length; b++) if (e.p.savedRow[b].id == d) { a(e).jqGrid("restoreRow", d); break } } function B(b, c) { var d = c[1].length - 1; if (b === 0) a("#pData", h + "_2").addClass("ui-state-disabled"); else if (c[1][b - 1] !== undefined && a("#" + a.jgrid.jqID(c[1][b - 1])).hasClass("ui-state-disabled")) a("#pData", h + "_2").addClass("ui-state-disabled"); else a("#pData", h + "_2").removeClass("ui-state-disabled"); if (b === d) a("#nData", h + "_2").addClass("ui-state-disabled"); else if (c[1][b + 1] !== undefined && a("#" + a.jgrid.jqID(c[1][b + 1])).hasClass("ui-state-disabled")) a("#nData", h + "_2").addClass("ui-state-disabled"); else a("#nData", h + "_2").removeClass("ui-state-disabled") } function z() { var b = a(e).jqGrid("getDataIDs"), c = a("#id_g", h).val(), d = a.inArray(c, b); return [d, b] } if (a("#" + a.jgrid.jqID(i.themodal))[0] !== undefined) { l = a(e).triggerHandler("jqGridAddEditBeforeInitData", [a("#" + a.jgrid.jqID(g)), j]); if (l === undefined) l = true; if (l && q) l = q.call(e, a("#" + g), j); if (l === false) return; J(); a(".ui-jqdialog-title", "#" + a.jgrid.jqID(i.modalhead)).html(c.caption); a("#FormError", h).hide(); if (b[e.p.id].topinfo) { a(".topinfo", h).html(b[e.p.id].topinfo); a(".tinfo", h).show() } else a(".tinfo", h).hide(); if (b[e.p.id].bottominfo) { a(".bottominfo", h + "_2").html(b[e.p.id].bottominfo); a(".binfo", h + "_2").show() } else a(".binfo", h + "_2").hide(); t(d, e, g); if (d === "_empty" || !b[e.p.id].viewPagerButtons) a("#pData, #nData", h + "_2").hide(); else a("#pData, #nData", h + "_2").show(); if (b[e.p.id].processing === true) { b[e.p.id].processing = false; a("#sData", h + "_2").removeClass("ui-state-active") } if (a("#" + g).data("disabled") === true) { a(".confirm", "#" + a.jgrid.jqID(i.themodal)).hide(); a("#" + g).data("disabled", false) } a(e).triggerHandler("jqGridAddEditBeforeShowForm", [a("#" + g), j]); r && r.call(e, a("#" + g), j); a("#" + a.jgrid.jqID(i.themodal)).data("onClose", b[e.p.id].onClose); a.jgrid.viewModal("#" + a.jgrid.jqID(i.themodal), { gbox: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, jqM: false, overlay: c.overlay, modal: c.modal, overlayClass: c.overlayClass }); !A && a("." + a.jgrid.jqID(c.overlayClass)).click(function () { if (!m()) return false; a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false }); a(e).triggerHandler("jqGridAddEditAfterShowForm", [a("#" + g), j]); s && s.call(e, a("#" + g), j) } else { var V = isNaN(c.dataheight) ? c.dataheight : c.dataheight + "px", W = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", O = a("<form name='FormPost' id='" + g + "' class='FormGrid' onSubmit='return false;' style='width:" + W + ";overflow:auto;position:relative;height:" + V + ";'></form>").data("disabled", false), n = a("<table id='" + C + "' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"); l = a(e).triggerHandler("jqGridAddEditBeforeInitData", [a("#" + g), j]); if (l === undefined) l = true; if (l && q) l = q.call(e, a("#" + g, j)); if (l === false) return; J(); a(e.p.colModel).each(function () { var a = this.formoptions; o = Math.max(o, a ? a.colpos || 0 : 0); D = Math.max(D, a ? a.rowpos || 0 : 0) }); a(O).append(n); var p = a("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='" + o * 2 + "'></td></tr>"); p[0].rp = 0; a(n).append(p); p = a("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='" + o * 2 + "'>" + b[e.p.id].topinfo + "</td></tr>"); p[0].rp = 0; a(n).append(p); var w = e.p.direction === "rtl" ? true : false, U = w ? "nData" : "pData", T = w ? "pData" : "nData"; R(d, e, n, o); var Q = "<a href='javascript:void(0)' id='" + U + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>", x = "<a href='javascript:void(0)' id='" + T + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>", F = "<a href='javascript:void(0)' id='sData' class='fm-button ui-state-default ui-corner-all'>" + c.bSubmit + "</a>", E = "<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>" + c.bCancel + "</a>", y = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='" + C + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>" + (w ? x + Q : Q + x) + "</td><td class='EditButton'>" + F + E + "</td></tr>"; y += "<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>" + b[e.p.id].bottominfo + "</td></tr>"; y += "</tbody></table>"; if (D > 0) { var G = []; a.each(a(n)[0].rows, function (a, b) { G[a] = b }); G.sort(function (a, b) { return a.rp > b.rp ? 1 : a.rp < b.rp ? -1 : 0 }); a.each(G, function (c, b) { a("tbody", n).append(b) }) } c.gbox = "#gbox_" + a.jgrid.jqID(k); var N = false; if (c.closeOnEscape === true) { c.closeOnEscape = false; N = true } var P = a("<div></div>").append(O).append(y); a.jgrid.createModal(i, P, c, "#gview_" + a.jgrid.jqID(e.p.id), a("#gbox_" + a.jgrid.jqID(e.p.id))[0]); if (w) { a("#pData, #nData", h + "_2").css("float", "right"); a(".EditButton", h + "_2").css("text-align", "left") } b[e.p.id].topinfo && a(".tinfo", h).show(); b[e.p.id].bottominfo && a(".binfo", h + "_2").show(); P = null; y = null; a("#" + a.jgrid.jqID(i.themodal)).keydown(function (d) { var f = d.target; if (a("#" + g).data("disabled") === true) return false; if (b[e.p.id].savekey[0] === true && d.which === b[e.p.id].savekey[1]) if (f.tagName !== "TEXTAREA") { a("#sData", h + "_2").trigger("click"); return false } if (d.which === 27) { if (!m()) return false; N && a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: c.gbox, jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false } if (b[e.p.id].navkeys[0] === true) { if (a("#id_g", h).val() === "_empty") return true; if (d.which === b[e.p.id].navkeys[1]) { a("#pData", h + "_2").trigger("click"); return false } if (d.which === b[e.p.id].navkeys[2]) { a("#nData", h + "_2").trigger("click"); return false } } }); if (c.checkOnUpdate) { a("a.ui-jqdialog-titlebar-close span", "#" + a.jgrid.jqID(i.themodal)).removeClass("jqmClose"); a("a.ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(i.themodal)).unbind("click").click(function () { if (!m()) return false; a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false }) } c.saveicon = a.extend([true, "left", "ui-icon-disk"], c.saveicon); c.closeicon = a.extend([true, "left", "ui-icon-close"], c.closeicon); c.saveicon[0] === true && a("#sData", h + "_2").addClass(c.saveicon[1] === "right" ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.saveicon[2] + "'></span>"); c.closeicon[0] === true && a("#cData", h + "_2").addClass(c.closeicon[1] === "right" ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.closeicon[2] + "'></span>"); if (b[e.p.id].checkOnSubmit || b[e.p.id].checkOnUpdate) { F = "<a href='javascript:void(0)' id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bYes + "</a>"; x = "<a href='javascript:void(0)' id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bNo + "</a>"; E = "<a href='javascript:void(0)' id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + c.bExit + "</a>"; var H = c.zIndex || 999; H++; a("<div class='" + c.overlayClass + " jqgrid-overlay confirm' style='z-index:" + H + ";display:none;'>&#160;</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:" + (H + 1) + "'>" + c.saveData + "<br/><br/>" + F + x + E + "</div>").insertAfter("#" + g); a("#sNew", "#" + a.jgrid.jqID(i.themodal)).click(function () { u(); a("#" + g).data("disabled", false); a(".confirm", "#" + a.jgrid.jqID(i.themodal)).hide(); return false }); a("#nNew", "#" + a.jgrid.jqID(i.themodal)).click(function () { a(".confirm", "#" + a.jgrid.jqID(i.themodal)).hide(); a("#" + g).data("disabled", false); setTimeout(function () { a(":input:visible", "#" + g)[0].focus() }, 0); return false }); a("#cNew", "#" + a.jgrid.jqID(i.themodal)).click(function () { a(".confirm", "#" + a.jgrid.jqID(i.themodal)).hide(); a("#" + g).data("disabled", false); a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false }) } a(e).triggerHandler("jqGridAddEditInitializeForm", [a("#" + g), j]); I && I.call(e, a("#" + g), j); if (d === "_empty" || !b[e.p.id].viewPagerButtons) a("#pData,#nData", h + "_2").hide(); else a("#pData,#nData", h + "_2").show(); a(e).triggerHandler("jqGridAddEditBeforeShowForm", [a("#" + g), j]); r && r.call(e, a("#" + g), j); a("#" + a.jgrid.jqID(i.themodal)).data("onClose", b[e.p.id].onClose); a.jgrid.viewModal("#" + a.jgrid.jqID(i.themodal), { gbox: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, overlay: c.overlay, modal: c.modal, overlayClass: c.overlayClass }); !A && a("." + a.jgrid.jqID(c.overlayClass)).click(function () { if (!m()) return false; a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false }); a(e).triggerHandler("jqGridAddEditAfterShowForm", [a("#" + g), j]); s && s.call(e, a("#" + g), j); a(".fm-button", "#" + a.jgrid.jqID(i.themodal)).hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }); a("#sData", h + "_2").click(function () { f = {}; a("#FormError", h).hide(); L(); if (f[e.p.id + "_id"] === "_empty") u(); else if (c.checkOnSubmit === true) { v = K(f, b[e.p.id]._savedData); if (v) { a("#" + g).data("disabled", true); a(".confirm", "#" + a.jgrid.jqID(i.themodal)).show() } else u() } else u(); return false }); a("#cData", h + "_2").click(function () { if (!m()) return false; a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(k), jqm: c.jqModal, onClose: b[e.p.id].onClose }); return false }); a("#nData", h + "_2").click(function () { if (!m()) return false; a("#FormError", h).hide(); var b = z(); b[0] = parseInt(b[0], 10); if (b[0] !== -1 && b[1][b[0] + 1]) { a(e).triggerHandler("jqGridAddEditClickPgButtons", ["next", a("#" + g), b[1][b[0]]]); var d; if (a.isFunction(c.onclickPgButtons)) { d = c.onclickPgButtons.call(e, "next", a("#" + g), b[1][b[0]]); if (d !== undefined && d === false) return false } if (a("#" + a.jgrid.jqID(b[1][b[0] + 1])).hasClass("ui-state-disabled")) return false; t(b[1][b[0] + 1], e, g); a(e).jqGrid("setSelection", b[1][b[0] + 1]); a(e).triggerHandler("jqGridAddEditAfterClickPgButtons", ["next", a("#" + g), b[1][b[0]]]); a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(e, "next", a("#" + g), b[1][b[0] + 1]); B(b[0] + 1, b) } return false }); a("#pData", h + "_2").click(function () { if (!m()) return false; a("#FormError", h).hide(); var b = z(); if (b[0] !== -1 && b[1][b[0] - 1]) { a(e).triggerHandler("jqGridAddEditClickPgButtons", ["prev", a("#" + g), b[1][b[0]]]); var d; if (a.isFunction(c.onclickPgButtons)) { d = c.onclickPgButtons.call(e, "prev", a("#" + g), b[1][b[0]]); if (d !== undefined && d === false) return false } if (a("#" + a.jgrid.jqID(b[1][b[0] - 1])).hasClass("ui-state-disabled")) return false; t(b[1][b[0] - 1], e, g); a(e).jqGrid("setSelection", b[1][b[0] - 1]); a(e).triggerHandler("jqGridAddEditAfterClickPgButtons", ["prev", a("#" + g), b[1][b[0]]]); a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(e, "prev", a("#" + g), b[1][b[0] - 1]); B(b[0] - 1, b) } return false }) } var M = z(); B(M[0], M) }) }, viewGridRow: function (d, c) { c = a.extend(true, { top: 0, left: 0, width: 0, datawidth: "auto", height: "auto", dataheight: "auto", modal: false, overlay: 30, drag: true, resize: true, jqModal: true, closeOnEscape: false, labelswidth: "30%", closeicon: [], navkeys: [false, 38, 40], onClose: null, beforeShowForm: null, beforeInitData: null, viewPagerButtons: true, recreateForm: false }, a.jgrid.view, c || {}); b[a(this)[0].p.id] = c; return this.each(function () { var e = this; if (!e.grid || !d) return; var g = e.p.id, i = "ViewGrid_" + a.jgrid.jqID(g), f = "ViewTbl_" + a.jgrid.jqID(g), A = "ViewGrid_" + g, B = "ViewTbl_" + g, h = { themodal: "viewmod" + g, modalhead: "viewhd" + g, modalcontent: "viewcnt" + g, scrollelm: i }, k = a.isFunction(b[e.p.id].beforeInitData) ? b[e.p.id].beforeInitData : false, j = true, r = 1, s = 0; c.recreateForm === true && a("#" + a.jgrid.jqID(h.themodal))[0] !== undefined && a("#" + a.jgrid.jqID(h.themodal)).remove(); function l() { (b[e.p.id].closeOnEscape === true || b[e.p.id].navkeys[0] === true) && setTimeout(function () { a(".ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(h.modalhead)).focus() }, 0) } function z(t, d, l, m) { for (var e, f, b, g = 0, k, v, r = [], j = false, y = "<td class='CaptionTD form-view-label ui-widget-content' width='" + c.labelswidth + "'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>", u = "", w = "<td class='CaptionTD form-view-label ui-widget-content'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>", x = ["integer", "number", "currency"], h = 0, i = 0, o, n, q, p = 1; p <= m; p++) u += p === 1 ? y : w; a(d.p.colModel).each(function () { if (this.editrules && this.editrules.edithidden === true) f = false; else f = this.hidden === true ? true : false; if (!f && this.align === "right") if (this.formatter && a.inArray(this.formatter, x) !== -1) h = Math.max(h, parseInt(this.width, 10)); else i = Math.max(i, parseInt(this.width, 10)) }); o = h !== 0 ? h : i !== 0 ? i : 0; j = a(d).jqGrid("getInd", t); a(d.p.colModel).each(function (i) { e = this.name; n = false; if (this.editrules && this.editrules.edithidden === true) f = false; else f = this.hidden === true ? true : false; v = f ? "style='display:none'" : ""; q = typeof this.viewable !== "boolean" ? true : this.viewable; if (e !== "cb" && e !== "subgrid" && e !== "rn" && q) { if (j === false) k = ""; else if (e === d.p.ExpandColumn && d.p.treeGrid === true) k = a("td:eq(" + i + ")", d.rows[j]).text(); else k = a("td:eq(" + i + ")", d.rows[j]).html(); n = this.align === "right" && o !== 0 ? true : false; var c = a.extend({}, { rowabove: false, rowcontent: "" }, this.formoptions || {}), h = parseInt(c.rowpos, 10) || g + 1, p = parseInt((parseInt(c.colpos, 10) || 1) * 2, 10); if (c.rowabove) { var s = a("<tr><td class='contentinfo' colspan='" + m * 2 + "'>" + c.rowcontent + "</td></tr>"); a(l).append(s); s[0].rp = h } b = a(l).find("tr[rowpos=" + h + "]"); if (b.length === 0) { b = a("<tr " + v + " rowpos='" + h + "'></tr>").addClass("FormData").attr("id", "trv_" + e); a(b).append(u); a(l).append(b); b[0].rp = h } a("td:eq(" + (p - 2) + ")", b[0]).html("<b>" + (c.label === undefined ? d.p.colNames[i] : c.label) + "</b>"); a("td:eq(" + (p - 1) + ")", b[0]).append("<span>" + k + "</span>").attr("id", "v_" + e); n && a("td:eq(" + (p - 1) + ") span", b[0]).css({ "text-align": "right", width: o + "px" }); r[g] = i; g++ } }); if (g > 0) { var s = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (m * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='" + t + "'/></td></tr>"); s[0].rp = g + 99; a(l).append(s) } return r } function q(h, c) { var b, g, i = 0, d, e; e = a(c).jqGrid("getInd", h, true); if (!e) return; a("td", e).each(function (e) { b = c.p.colModel[e].name; if (c.p.colModel[e].editrules && c.p.colModel[e].editrules.edithidden === true) g = false; else g = c.p.colModel[e].hidden === true ? true : false; if (b !== "cb" && b !== "subgrid" && b !== "rn") { if (b === c.p.ExpandColumn && c.p.treeGrid === true) d = a(this).text(); else d = a(this).html(); b = a.jgrid.jqID("v_" + b); a("#" + b + " span", "#" + f).html(d); g && a("#" + b, "#" + f).parents("tr:first").hide(); i++ } }); i > 0 && a("#id_g", "#" + f).val(h) } function p(b, c) { var d = c[1].length - 1; if (b === 0) a("#pData", "#" + f + "_2").addClass("ui-state-disabled"); else if (c[1][b - 1] !== undefined && a("#" + a.jgrid.jqID(c[1][b - 1])).hasClass("ui-state-disabled")) a("#pData", f + "_2").addClass("ui-state-disabled"); else a("#pData", "#" + f + "_2").removeClass("ui-state-disabled"); if (b === d) a("#nData", "#" + f + "_2").addClass("ui-state-disabled"); else if (c[1][b + 1] !== undefined && a("#" + a.jgrid.jqID(c[1][b + 1])).hasClass("ui-state-disabled")) a("#nData", f + "_2").addClass("ui-state-disabled"); else a("#nData", "#" + f + "_2").removeClass("ui-state-disabled") } function o() { var b = a(e).jqGrid("getDataIDs"), c = a("#id_g", "#" + f).val(), d = a.inArray(c, b); return [d, b] } if (a("#" + a.jgrid.jqID(h.themodal))[0] !== undefined) { if (k) { j = k.call(e, a("#" + i)); if (j === undefined) j = true } if (j === false) return; a(".ui-jqdialog-title", "#" + a.jgrid.jqID(h.modalhead)).html(c.caption); a("#FormError", "#" + f).hide(); q(d, e); a.isFunction(b[e.p.id].beforeShowForm) && b[e.p.id].beforeShowForm.call(e, a("#" + i)); a.jgrid.viewModal("#" + a.jgrid.jqID(h.themodal), { gbox: "#gbox_" + a.jgrid.jqID(g), jqm: c.jqModal, jqM: false, overlay: c.overlay, modal: c.modal }); l() } else { var F = isNaN(c.dataheight) ? c.dataheight : c.dataheight + "px", G = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", v = a("<form name='FormPost' id='" + A + "' class='FormGrid' style='width:" + G + ";overflow:auto;position:relative;height:" + F + ";'></form>"), n = a("<table id='" + B + "' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>"); if (k) { j = k.call(e, a("#" + i)); if (j === undefined) j = true } if (j === false) return; a(e.p.colModel).each(function () { var a = this.formoptions; r = Math.max(r, a ? a.colpos || 0 : 0); s = Math.max(s, a ? a.rowpos || 0 : 0) }); a(v).append(n); z(d, e, n, r); var m = e.p.direction === "rtl" ? true : false, E = m ? "nData" : "pData", D = m ? "pData" : "nData", x = "<a href='javascript:void(0)' id='" + E + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>", w = "<a href='javascript:void(0)' id='" + D + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>", C = "<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>" + c.bClose + "</a>"; if (s > 0) { var t = []; a.each(a(n)[0].rows, function (a, b) { t[a] = b }); t.sort(function (a, b) { return a.rp > b.rp ? 1 : a.rp < b.rp ? -1 : 0 }); a.each(t, function (c, b) { a("tbody", n).append(b) }) } c.gbox = "#gbox_" + a.jgrid.jqID(g); var y = a("<div></div>").append(v).append("<table border='0' class='EditTable' id='" + f + "_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='" + c.labelswidth + "'>" + (m ? w + x : x + w) + "</td><td class='EditButton'>" + C + "</td></tr></tbody></table>"); a.jgrid.createModal(h, y, c, "#gview_" + a.jgrid.jqID(e.p.id), a("#gview_" + a.jgrid.jqID(e.p.id))[0]); if (m) { a("#pData, #nData", "#" + f + "_2").css("float", "right"); a(".EditButton", "#" + f + "_2").css("text-align", "left") } !c.viewPagerButtons && a("#pData, #nData", "#" + f + "_2").hide(); y = null; a("#" + h.themodal).keydown(function (d) { if (d.which === 27) { b[e.p.id].closeOnEscape && a.jgrid.hideModal("#" + a.jgrid.jqID(h.themodal), { gb: c.gbox, jqm: c.jqModal, onClose: c.onClose }); return false } if (c.navkeys[0] === true) { if (d.which === c.navkeys[1]) { a("#pData", "#" + f + "_2").trigger("click"); return false } if (d.which === c.navkeys[2]) { a("#nData", "#" + f + "_2").trigger("click"); return false } } }); c.closeicon = a.extend([true, "left", "ui-icon-close"], c.closeicon); c.closeicon[0] === true && a("#cData", "#" + f + "_2").addClass(c.closeicon[1] === "right" ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.closeicon[2] + "'></span>"); a.isFunction(c.beforeShowForm) && c.beforeShowForm.call(e, a("#" + i)); a.jgrid.viewModal("#" + a.jgrid.jqID(h.themodal), { gbox: "#gbox_" + a.jgrid.jqID(g), jqm: c.jqModal, overlay: c.overlay, modal: c.modal }); a(".fm-button:not(.ui-state-disabled)", "#" + f + "_2").hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }); l(); a("#cData", "#" + f + "_2").click(function () { a.jgrid.hideModal("#" + a.jgrid.jqID(h.themodal), { gb: "#gbox_" + a.jgrid.jqID(g), jqm: c.jqModal, onClose: c.onClose }); return false }); a("#nData", "#" + f + "_2").click(function () { a("#FormError", "#" + f).hide(); var b = o(); b[0] = parseInt(b[0], 10); if (b[0] !== -1 && b[1][b[0] + 1]) { a.isFunction(c.onclickPgButtons) && c.onclickPgButtons.call(e, "next", a("#" + i), b[1][b[0]]); q(b[1][b[0] + 1], e); a(e).jqGrid("setSelection", b[1][b[0] + 1]); a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(e, "next", a("#" + i), b[1][b[0] + 1]); p(b[0] + 1, b) } l(); return false }); a("#pData", "#" + f + "_2").click(function () { a("#FormError", "#" + f).hide(); var b = o(); if (b[0] !== -1 && b[1][b[0] - 1]) { a.isFunction(c.onclickPgButtons) && c.onclickPgButtons.call(e, "prev", a("#" + i), b[1][b[0]]); q(b[1][b[0] - 1], e); a(e).jqGrid("setSelection", b[1][b[0] - 1]); a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(e, "prev", a("#" + i), b[1][b[0] - 1]); p(b[0] - 1, b) } l(); return false }) } var u = o(); p(u[0], u) }) }, delGridRow: function (d, c) { c = a.extend(true, { top: 0, left: 0, width: 240, height: "auto", dataheight: "auto", modal: false, overlay: 30, drag: true, resize: true, url: "", mtype: "POST", reloadAfterSubmit: true, beforeShowForm: null, beforeInitData: null, afterShowForm: null, beforeSubmit: null, onclickSubmit: null, afterSubmit: null, jqModal: true, closeOnEscape: false, delData: {}, delicon: [], cancelicon: [], onClose: null, ajaxDelOptions: {}, processing: false, serializeDelData: null, useDataProxy: false }, a.jgrid.del, c || {}); b[a(this)[0].p.id] = c; return this.each(function () { var e = this; if (!e.grid) return; if (!d) return; var o = a.isFunction(b[e.p.id].beforeShowForm), p = a.isFunction(b[e.p.id].afterShowForm), l = a.isFunction(b[e.p.id].beforeInitData) ? b[e.p.id].beforeInitData : false, g = e.p.id, n = {}, h = true, f = "DelTbl_" + a.jgrid.jqID(g), k, q, m, r, s = "DelTbl_" + g, i = { themodal: "delmod" + g, modalhead: "delhd" + g, modalcontent: "delcnt" + g, scrollelm: f }; if (a.isArray(d)) d = d.join(); if (a("#" + a.jgrid.jqID(i.themodal))[0] !== undefined) { if (l) { h = l.call(e, a("#" + f)); if (h === undefined) h = true } if (h === false) return; a("#DelData>td", "#" + f).text(d); a("#DelError", "#" + f).hide(); if (b[e.p.id].processing === true) { b[e.p.id].processing = false; a("#dData", "#" + f).removeClass("ui-state-active") } o && b[e.p.id].beforeShowForm.call(e, a("#" + f)); a.jgrid.viewModal("#" + a.jgrid.jqID(i.themodal), { gbox: "#gbox_" + a.jgrid.jqID(g), jqm: b[e.p.id].jqModal, jqM: false, overlay: b[e.p.id].overlay, modal: b[e.p.id].modal }); p && b[e.p.id].afterShowForm.call(e, a("#" + f)) } else { var v = isNaN(b[e.p.id].dataheight) ? b[e.p.id].dataheight : b[e.p.id].dataheight + "px", w = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px", j = "<div id='" + s + "' class='formdata' style='width:" + w + ";overflow:auto;position:relative;height:" + v + ";'>"; j += "<table class='DelTable'><tbody>"; j += "<tr id='DelError' style='display:none'><td class='ui-state-error'></td></tr>"; j += "<tr id='DelData' style='display:none'><td >" + d + "</td></tr>"; j += '<tr><td class="delmsg" style="white-space:pre;">' + b[e.p.id].msg + "</td></tr><tr><td >&#160;</td></tr>"; j += "</tbody></table></div>"; var u = "<a href='javascript:void(0)' id='dData' class='fm-button ui-state-default ui-corner-all'>" + c.bSubmit + "</a>", t = "<a href='javascript:void(0)' id='eData' class='fm-button ui-state-default ui-corner-all'>" + c.bCancel + "</a>"; j += "<table cellspacing='0' cellpadding='0' border='0' class='EditTable' id='" + f + "_2'><tbody><tr><td><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>" + u + "&#160;" + t + "</td></tr></tbody></table>"; c.gbox = "#gbox_" + a.jgrid.jqID(g); a.jgrid.createModal(i, j, c, "#gview_" + a.jgrid.jqID(e.p.id), a("#gview_" + a.jgrid.jqID(e.p.id))[0]); if (l) { h = l.call(e, a("#" + f)); if (h === undefined) h = true } if (h === false) return; a(".fm-button", "#" + f + "_2").hover(function () { a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }); c.delicon = a.extend([true, "left", "ui-icon-scissors"], b[e.p.id].delicon); c.cancelicon = a.extend([true, "left", "ui-icon-cancel"], b[e.p.id].cancelicon); c.delicon[0] === true && a("#dData", "#" + f + "_2").addClass(c.delicon[1] === "right" ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.delicon[2] + "'></span>"); c.cancelicon[0] === true && a("#eData", "#" + f + "_2").addClass(c.cancelicon[1] === "right" ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='ui-icon " + c.cancelicon[2] + "'></span>"); a("#dData", "#" + f + "_2").click(function () { var d = [true, ""], l, h = a("#DelData>td", "#" + f).text(); n = {}; if (a.isFunction(b[e.p.id].onclickSubmit)) n = b[e.p.id].onclickSubmit.call(e, b[e.p.id], h) || {}; if (a.isFunction(b[e.p.id].beforeSubmit)) d = b[e.p.id].beforeSubmit.call(e, h); if (d[0] && !b[e.p.id].processing) { b[e.p.id].processing = true; m = e.p.prmNames; k = a.extend({}, b[e.p.id].delData, n); r = m.oper; k[r] = m.deloper; q = m.id; h = String(h).split(","); if (!h.length) return false; for (l in h) if (h.hasOwnProperty(l)) h[l] = a.jgrid.stripPref(e.p.idPrefix, h[l]); k[q] = h.join(); a(this).addClass("ui-state-active"); var o = a.extend({ url: b[e.p.id].url || a(e).jqGrid("getGridParam", "editurl"), type: b[e.p.id].mtype, data: a.isFunction(b[e.p.id].serializeDelData) ? b[e.p.id].serializeDelData.call(e, k) : k, complete: function (j, m) { var l; if (j.status >= 300 && j.status !== 304) { d[0] = false; if (a.isFunction(b[e.p.id].errorTextFormat)) d[1] = b[e.p.id].errorTextFormat.call(e, j); else d[1] = m + " Status: '" + j.statusText + "'. Error code: " + j.status } else if (a.isFunction(b[e.p.id].afterSubmit)) d = b[e.p.id].afterSubmit.call(e, j, k); if (d[0] === false) { a("#DelError>td", "#" + f).html(d[1]); a("#DelError", "#" + f).show() } else { if (b[e.p.id].reloadAfterSubmit && e.p.datatype !== "local") a(e).trigger("reloadGrid"); else { if (e.p.treeGrid === true) try { a(e).jqGrid("delTreeNode", e.p.idPrefix + h[0]) } catch (n) { } else for (l = 0; l < h.length; l++) a(e).jqGrid("delRowData", e.p.idPrefix + h[l]); e.p.selrow = null; e.p.selarrrow = [] } a.isFunction(b[e.p.id].afterComplete) && setTimeout(function () { b[e.p.id].afterComplete.call(e, j, h) }, 500) } b[e.p.id].processing = false; a("#dData", "#" + f + "_2").removeClass("ui-state-active"); d[0] && a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(g), jqm: c.jqModal, onClose: b[e.p.id].onClose }) } }, a.jgrid.ajaxOptions, b[e.p.id].ajaxDelOptions); if (!o.url && !b[e.p.id].useDataProxy) if (a.isFunction(e.p.dataProxy)) b[e.p.id].useDataProxy = true; else { d[0] = false; d[1] += " " + a.jgrid.errors.nourl } if (d[0]) if (b[e.p.id].useDataProxy) { var j = e.p.dataProxy.call(e, o, "del_" + e.p.id); if (j === undefined) j = [true, ""]; if (j[0] === false) { d[0] = false; d[1] = j[1] || "Error deleting the selected row!" } else a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(g), jqm: c.jqModal, onClose: b[e.p.id].onClose }) } else a.ajax(o) } if (d[0] === false) { a("#DelError>td", "#" + f).html(d[1]); a("#DelError", "#" + f).show() } return false }); a("#eData", "#" + f + "_2").click(function () { a.jgrid.hideModal("#" + a.jgrid.jqID(i.themodal), { gb: "#gbox_" + a.jgrid.jqID(g), jqm: b[e.p.id].jqModal, onClose: b[e.p.id].onClose }); return false }); o && b[e.p.id].beforeShowForm.call(e, a("#" + f)); a.jgrid.viewModal("#" + a.jgrid.jqID(i.themodal), { gbox: "#gbox_" + a.jgrid.jqID(g), jqm: b[e.p.id].jqModal, overlay: b[e.p.id].overlay, modal: b[e.p.id].modal }); p && b[e.p.id].afterShowForm.call(e, a("#" + f)) } b[e.p.id].closeOnEscape === true && setTimeout(function () { a(".ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(i.modalhead)).focus() }, 0) }) }, navGrid: function (h, b, d, f, g, c, e) { b = a.extend({ edit: true, editicon: "ui-icon-pencil", add: true, addicon: "ui-icon-plus", del: true, delicon: "ui-icon-trash", search: true, searchicon: "ui-icon-search", refresh: true, refreshicon: "ui-icon-refresh", refreshstate: "firstpage", view: false, viewicon: "ui-icon-document", position: "left", closeOnEscape: true, beforeRefresh: null, afterRefresh: null, cloneToTop: false, alertwidth: 200, alertheight: "auto", alerttop: null, alertleft: null, alertzIndex: null }, a.jgrid.nav, b || {}); return this.each(function () { if (this.nav) return; var q = { themodal: "alertmod_" + this.p.id, modalhead: "alerthd_" + this.p.id, modalcontent: "alertcnt_" + this.p.id }, i = this, p, t; if (!i.grid || typeof h !== "string") return; if (a("#" + q.themodal)[0] === undefined) { if (!b.alerttop && !b.alertleft) { if (window.innerWidth !== undefined) { b.alertleft = window.innerWidth; b.alerttop = window.innerHeight } else if (document.documentElement !== undefined && document.documentElement.clientWidth !== undefined && document.documentElement.clientWidth !== 0) { b.alertleft = document.documentElement.clientWidth; b.alerttop = document.documentElement.clientHeight } else { b.alertleft = 1024; b.alerttop = 768 } b.alertleft = b.alertleft / 2 - parseInt(b.alertwidth, 10) / 2; b.alerttop = b.alerttop / 2 - 25 } a.jgrid.createModal(q, "<div>" + b.alerttext + "</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>", { gbox: "#gbox_" + a.jgrid.jqID(i.p.id), jqModal: true, drag: true, resize: true, caption: b.alertcap, top: b.alerttop, left: b.alertleft, width: b.alertwidth, height: b.alertheight, closeOnEscape: b.closeOnEscape, zIndex: b.alertzIndex }, "#gview_" + a.jgrid.jqID(i.p.id), a("#gbox_" + a.jgrid.jqID(i.p.id))[0], true) } var s = 1, r, o = function () { !a(this).hasClass("ui-state-disabled") && a(this).addClass("ui-state-hover") }, n = function () { a(this).removeClass("ui-state-hover") }; if (b.cloneToTop && i.p.toppager) s = 2; for (r = 0; r < s; r++) { var j, k = a("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr></tr></tbody></table>"), u = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>", m, l; if (r === 0) { m = h; l = i.p.id; if (m === i.p.toppager) { l += "_top"; s = 1 } } else { m = i.p.toppager; l = i.p.id + "_top" } i.p.direction === "rtl" && a(k).attr("dir", "rtl").css("float", "right"); if (b.add) { f = f || {}; j = a("<td class='ui-pg-button ui-corner-all'></td>"); a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.addicon + "'></span>" + b.addtext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.addtitle || "", id: f.id || "add_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) if (a.isFunction(b.addfunc)) b.addfunc.call(i); else a(i).jqGrid("editGridRow", "new", f); return false }).hover(o, n); j = null } if (b.edit) { j = a("<td class='ui-pg-button ui-corner-all'></td>"); d = d || {}; a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.editicon + "'></span>" + b.edittext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.edittitle || "", id: d.id || "edit_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) { var c = i.p.selrow; if (c) if (a.isFunction(b.editfunc)) b.editfunc.call(i, c); else a(i).jqGrid("editGridRow", c, d); else { a.jgrid.viewModal("#" + q.themodal, { gbox: "#gbox_" + a.jgrid.jqID(i.p.id), jqm: true }); a("#jqg_alrt").focus() } } return false }).hover(o, n); j = null } if (b.view) { j = a("<td class='ui-pg-button ui-corner-all'></td>"); e = e || {}; a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.viewicon + "'></span>" + b.viewtext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.viewtitle || "", id: e.id || "view_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) { var c = i.p.selrow; if (c) if (a.isFunction(b.viewfunc)) b.viewfunc.call(i, c); else a(i).jqGrid("viewGridRow", c, e); else { a.jgrid.viewModal("#" + q.themodal, { gbox: "#gbox_" + a.jgrid.jqID(i.p.id), jqm: true }); a("#jqg_alrt").focus() } } return false }).hover(o, n); j = null } if (b.del) { j = a("<td class='ui-pg-button ui-corner-all'></td>"); g = g || {}; a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.delicon + "'></span>" + b.deltext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.deltitle || "", id: g.id || "del_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) { var c; if (i.p.multiselect) { c = i.p.selarrrow; if (c.length === 0) c = null } else c = i.p.selrow; if (c) if (a.isFunction(b.delfunc)) b.delfunc.call(i, c); else a(i).jqGrid("delGridRow", c, g); else { a.jgrid.viewModal("#" + q.themodal, { gbox: "#gbox_" + a.jgrid.jqID(i.p.id), jqm: true }); a("#jqg_alrt").focus() } } return false }).hover(o, n); j = null } (b.add || b.edit || b.del || b.view) && a("tr", k).append(u); if (b.search) { j = a("<td class='ui-pg-button ui-corner-all'></td>"); c = c || {}; a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.searchicon + "'></span>" + b.searchtext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.searchtitle || "", id: c.id || "search_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) if (a.isFunction(b.searchfunc)) b.searchfunc.call(i, c); else a(i).jqGrid("searchGrid", c); return false }).hover(o, n); c.showOnLoad && c.showOnLoad === true && a(j, k).click(); j = null } if (b.refresh) { j = a("<td class='ui-pg-button ui-corner-all'></td>"); a(j).append("<div class='ui-pg-div'><span class='ui-icon " + b.refreshicon + "'></span>" + b.refreshtext + "</div>"); a("tr", k).append(j); a(j, k).attr({ title: b.refreshtitle || "", id: "refresh_" + l }).click(function () { if (!a(this).hasClass("ui-state-disabled")) { a.isFunction(b.beforeRefresh) && b.beforeRefresh.call(i); i.p.search = false; try { var c = i.p.id; i.p.postData.filters = ""; try { a("#fbox_" + a.jgrid.jqID(c)).jqFilter("resetFilter") } catch (d) { } a.isFunction(i.clearToolbar) && i.clearToolbar.call(i, false) } catch (e) { } switch (b.refreshstate) { case "firstpage": a(i).trigger("reloadGrid", [{ page: 1}]); break; case "current": a(i).trigger("reloadGrid", [{ current: true}]) } a.isFunction(b.afterRefresh) && b.afterRefresh.call(i) } return false }).hover(o, n); j = null } t = a(".ui-jqgrid").css("font-size") || "11px"; a("body").append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + t + ";visibility:hidden;' ></div>"); p = a(k).clone().appendTo("#testpg2").width(); a("#testpg2").remove(); a(m + "_" + b.position, m).append(k); if (i.p._nvtd) { if (p > i.p._nvtd[0]) { a(m + "_" + b.position, m).width(p); i.p._nvtd[0] = p } i.p._nvtd[1] = p } t = null; p = null; k = null; this.nav = true } }) }, navButtonAdd: function (c, b) { b = a.extend({ caption: "newButton", title: "", buttonicon: "ui-icon-newwin", onClickButton: null, position: "last", cursor: "pointer" }, b || {}); return this.each(function () { if (!this.grid) return; if (typeof c === "string" && c.indexOf("#") !== 0) c = "#" + a.jgrid.jqID(c); var d = a(".navtable", c)[0], f = this; if (d) { if (b.id && a("#" + a.jgrid.jqID(b.id), d)[0] !== undefined) return; var e = a("<td></td>"); if (b.buttonicon.toString().toUpperCase() === "NONE") a(e).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'>" + b.caption + "</div>"); else a(e).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'><span class='ui-icon " + b.buttonicon + "'></span>" + b.caption + "</div>"); b.id && a(e).attr("id", b.id); if (b.position === "first") if (d.rows[0].cells.length === 0) a("tr", d).append(e); else a("tr td:eq(0)", d).before(e); else a("tr", d).append(e); a(e, d).attr("title", b.title || "").click(function (c) { if (!a(this).hasClass("ui-state-disabled")) a.isFunction(b.onClickButton) && b.onClickButton.call(f, c); return false }).hover(function () { !a(this).hasClass("ui-state-disabled") && a(this).addClass("ui-state-hover") }, function () { a(this).removeClass("ui-state-hover") }) } }) }, navSeparatorAdd: function (b, c) { c = a.extend({ sepclass: "ui-separator", sepcontent: "", position: "last" }, c || {}); return this.each(function () { if (!this.grid) return; if (typeof b === "string" && b.indexOf("#") !== 0) b = "#" + a.jgrid.jqID(b); var d = a(".navtable", b)[0]; if (d) { var e = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='" + c.sepclass + "'></span>" + c.sepcontent + "</td>"; if (c.position === "first") if (d.rows[0].cells.length === 0) a("tr", d).append(e); else a("tr td:eq(0)", d).before(e); else a("tr", d).append(e) } }) }, GridToForm: function (c, b) { return this.each(function () { var f = this, d; if (!f.grid) return; var e = a(f).jqGrid("getRowData", c); if (e) for (d in e) if (e.hasOwnProperty(d)) if (a("[name=" + a.jgrid.jqID(d) + "]", b).is("input:radio") || a("[name=" + a.jgrid.jqID(d) + "]", b).is("input:checkbox")) a("[name=" + a.jgrid.jqID(d) + "]", b).each(function () { if (a(this).val() == e[d]) a(this)[f.p.useProp ? "prop" : "attr"]("checked", true); else a(this)[f.p.useProp ? "prop" : "attr"]("checked", false) }); else a("[name=" + a.jgrid.jqID(d) + "]", b).val(e[d]) }) }, FormToGrid: function (d, e, b, c) { return this.each(function () { var g = this; if (!g.grid) return; if (!b) b = "set"; if (!c) c = "first"; var h = a(e).serializeArray(), f = {}; a.each(h, function (b, a) { f[a.name] = a.value }); if (b === "add") a(g).jqGrid("addRowData", d, f, c); else b === "set" && a(g).jqGrid("setRowData", d, f) }) } }) })(jQuery); (function (a) { "use strict"; a.jgrid.inlineEdit = a.jgrid.inlineEdit || {}; a.jgrid.extend({ editRow: function (c, k, h, f, l, g, e, i, d) { var b = {}, j = a.makeArray(arguments).slice(1); if (a.type(j[0]) === "object") b = j[0]; else { if (k !== undefined) b.keys = k; if (a.isFunction(h)) b.oneditfunc = h; if (a.isFunction(f)) b.successfunc = f; if (l !== undefined) b.url = l; if (g !== undefined) b.extraparam = g; if (a.isFunction(e)) b.aftersavefunc = e; if (a.isFunction(i)) b.errorfunc = i; if (a.isFunction(d)) b.afterrestorefunc = d } b = a.extend(true, { keys: false, oneditfunc: null, successfunc: null, url: null, extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: true, mtype: "POST" }, a.jgrid.inlineEdit, b); return this.each(function () { var d = this, h, f, k, l = 0, i = null, j = {}, g, e; if (!d.grid) return; g = a(d).jqGrid("getInd", c, true); if (g === false) return; k = a(g).attr("editable") || "0"; if (k === "0" && !a(g).hasClass("not-editable-row")) { e = d.p.colModel; a('td[role="gridcell"]', g).each(function (b) { h = e[b].name; var k = d.p.treeGrid === true && h === d.p.ExpandColumn; if (k) f = a("span:first", this).html(); else try { f = a.unformat.call(d, this, { rowId: c, colModel: e[b] }, b) } catch (n) { f = e[b].edittype && e[b].edittype === "textarea" ? a(this).text() : a(this).html() } if (h !== "cb" && h !== "subgrid" && h !== "rn") { if (d.p.autoencode) f = a.jgrid.htmlDecode(f); j[h] = f; if (e[b].editable === true) { if (i === null) i = b; if (k) a("span:first", this).html(""); else a(this).html(""); var m = a.extend({}, e[b].editoptions || {}, { id: c + "_" + h, name: h }); if (!e[b].edittype) e[b].edittype = "text"; if (f === "&nbsp;" || f === "&#160;" || f.length === 1 && f.charCodeAt(0) === 160) f = ""; var g = a.jgrid.createEl.call(d, e[b].edittype, m, f, true, a.extend({}, a.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {})); a(g).addClass("editable"); if (k) a("span:first", this).append(g); else a(this).append(g); a.jgrid.bindEv.call(d, g, m); e[b].edittype === "select" && e[b].editoptions !== undefined && e[b].editoptions.multiple === true && e[b].editoptions.dataUrl === undefined && a.jgrid.msie && a(g).width(a(g).width()); l++ } } }); if (l > 0) { j.id = c; d.p.savedRow.push(j); a(g).attr("editable", "1"); a("td:eq(" + i + ") input", g).focus(); b.keys === true && a(g).bind("keydown", function (e) { if (e.keyCode === 27) { a(d).jqGrid("restoreRow", c, b.afterrestorefunc); if (d.p._inlinenav) try { a(d).jqGrid("showAddEditButtons") } catch (g) { } return false } if (e.keyCode === 13) { var f = e.target; if (f.tagName === "TEXTAREA") return true; if (a(d).jqGrid("saveRow", c, b)) if (d.p._inlinenav) try { a(d).jqGrid("showAddEditButtons") } catch (h) { } return false } }); a(d).triggerHandler("jqGridInlineEditRow", [c, b]); a.isFunction(b.oneditfunc) && b.oneditfunc.call(d, c) } } }) }, saveRow: function (e, u, C, v, t, w, s) { var A = a.makeArray(arguments).slice(1), d = {}; if (a.type(A[0]) === "object") d = A[0]; else { if (a.isFunction(u)) d.successfunc = u; if (C !== undefined) d.url = C; if (v !== undefined) d.extraparam = v; if (a.isFunction(t)) d.aftersavefunc = t; if (a.isFunction(w)) d.errorfunc = w; if (a.isFunction(s)) d.afterrestorefunc = s } d = a.extend(true, { successfunc: null, url: null, extraparam: {}, aftersavefunc: null, errorfunc: null, afterrestorefunc: null, restoreAfterError: true, mtype: "POST" }, a.jgrid.inlineEdit, d); var l = false, b = this[0], f, c = {}, n = {}, j = {}, z, m, k, h; if (!b.grid) return l; h = a(b).jqGrid("getInd", e, true); if (h === false) return l; z = a(h).attr("editable"); d.url = d.url || b.p.editurl; if (z === "1") { var g; a('td[role="gridcell"]', h).each(function (i) { g = b.p.colModel[i]; f = g.name; if (f !== "cb" && f !== "subgrid" && g.editable === true && f !== "rn" && !a(this).hasClass("not-editable-cell")) { switch (g.edittype) { case "checkbox": var e = ["Yes", "No"]; if (g.editoptions) e = g.editoptions.value.split(":"); c[f] = a("input", this).is(":checked") ? e[0] : e[1]; break; case "text": case "password": case "textarea": case "button": c[f] = a("input, textarea", this).val(); break; case "select": if (!g.editoptions.multiple) { c[f] = a("select option:selected", this).val(); n[f] = a("select option:selected", this).text() } else { var l = a("select", this), h = []; c[f] = a(l).val(); if (c[f]) c[f] = c[f].join(","); else c[f] = ""; a("select option:selected", this).each(function (c, b) { h[c] = a(b).text() }); n[f] = h.join(",") } if (g.formatter && g.formatter === "select") n = {}; break; case "custom": try { if (g.editoptions && a.isFunction(g.editoptions.custom_value)) { c[f] = g.editoptions.custom_value.call(b, a(".customelement", this), "get"); if (c[f] === undefined) throw "e2"; } else throw "e1"; } catch (m) { m === "e1" && a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose); if (m === "e2") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, m.message, a.jgrid.edit.bClose) } } k = a.jgrid.checkValues.call(b, c[f], i); if (k[0] === false) { k[1] = c[f] + " " + k[1]; return false } if (b.p.autoencode) c[f] = a.jgrid.htmlEncode(c[f]); if (d.url !== "clientArray" && g.editoptions && g.editoptions.NullIfEmpty === true) if (c[f] === "") j[f] = "null" } }); if (k[0] === false) { try { var D = b.rows.namedItem(e), y = a.jgrid.findPos(D); a.jgrid.info_dialog(a.jgrid.errors.errcap, k[1], a.jgrid.edit.bClose, { left: y[0], top: y[1] + a(D).outerHeight() }) } catch (F) { alert(k[1]) } return l } var i, r = b.p.prmNames, p = e; if (b.p.keyIndex === false) i = r.id; else i = b.p.colModel[b.p.keyIndex + (b.p.rownumbers === true ? 1 : 0) + (b.p.multiselect === true ? 1 : 0) + (b.p.subGrid === true ? 1 : 0)].name; if (c) { c[r.oper] = r.editoper; if (c[i] === undefined || c[i] === "") c[i] = e; else if (h.id !== b.p.idPrefix + c[i]) { var q = a.jgrid.stripPref(b.p.idPrefix, e); if (b.p._index[q] !== undefined) { b.p._index[c[i]] = b.p._index[q]; delete b.p._index[q] } e = b.p.idPrefix + c[i]; a(h).attr("id", e); if (b.p.selrow === p) b.p.selrow = e; if (a.isArray(b.p.selarrrow)) { var E = a.inArray(p, b.p.selarrrow); if (E >= 0) b.p.selarrrow[E] = e } if (b.p.multiselect) { var x = "jqg_" + b.p.id + "_" + e; a("input.cbox", h).attr("id", x).attr("name", x) } } if (b.p.inlineData === undefined) b.p.inlineData = {}; c = a.extend({}, c, b.p.inlineData, d.extraparam) } if (d.url === "clientArray") { c = a.extend({}, c, n); b.p.autoencode && a.each(c, function (b, d) { c[b] = a.jgrid.htmlDecode(d) }); var o, B = a(b).jqGrid("setRowData", e, c); a(h).attr("editable", "0"); for (o = 0; o < b.p.savedRow.length; o++) if (String(b.p.savedRow[o].id) === String(p)) { m = o; break } m >= 0 && b.p.savedRow.splice(m, 1); a(b).triggerHandler("jqGridInlineAfterSaveRow", [e, B, c, d]); a.isFunction(d.aftersavefunc) && d.aftersavefunc.call(b, e, B, d); l = true; a(h).removeClass("jqgrid-new-row").unbind("keydown") } else { a("#lui_" + a.jgrid.jqID(b.p.id)).show(); j = a.extend({}, c, j); j[i] = a.jgrid.stripPref(b.p.idPrefix, j[i]); a.ajax(a.extend({ url: d.url, data: a.isFunction(b.p.serializeRowData) ? b.p.serializeRowData.call(b, j) : j, type: d.mtype, async: false, complete: function (g, j) { a("#lui_" + a.jgrid.jqID(b.p.id)).hide(); if (j === "success") { var k = true, f, i; f = a(b).triggerHandler("jqGridInlineSuccessSaveRow", [g, e, d]); if (!a.isArray(f)) f = [true, c]; if (f[0] && a.isFunction(d.successfunc)) f = d.successfunc.call(b, g); if (a.isArray(f)) { k = f[0]; c = f[1] || c } else k = f; if (k === true) { b.p.autoencode && a.each(c, function (b, d) { c[b] = a.jgrid.htmlDecode(d) }); c = a.extend({}, c, n); a(b).jqGrid("setRowData", e, c); a(h).attr("editable", "0"); for (i = 0; i < b.p.savedRow.length; i++) if (String(b.p.savedRow[i].id) === String(e)) { m = i; break } m >= 0 && b.p.savedRow.splice(m, 1); a(b).triggerHandler("jqGridInlineAfterSaveRow", [e, g, c, d]); a.isFunction(d.aftersavefunc) && d.aftersavefunc.call(b, e, g); l = true; a(h).removeClass("jqgrid-new-row").unbind("keydown") } else { a(b).triggerHandler("jqGridInlineErrorSaveRow", [e, g, j, null, d]); a.isFunction(d.errorfunc) && d.errorfunc.call(b, e, g, j, null); d.restoreAfterError === true && a(b).jqGrid("restoreRow", e, d.afterrestorefunc) } } }, error: function (c, f, g) { a("#lui_" + a.jgrid.jqID(b.p.id)).hide(); a(b).triggerHandler("jqGridInlineErrorSaveRow", [e, c, f, g, d]); if (a.isFunction(d.errorfunc)) d.errorfunc.call(b, e, c, f, g); else { var h = c.responseText || c.statusText; try { a.jgrid.info_dialog(a.jgrid.errors.errcap, '<div class="ui-state-error">' + h + "</div>", a.jgrid.edit.bClose, { buttonalign: "right" }) } catch (i) { alert(h) } } d.restoreAfterError === true && a(b).jqGrid("restoreRow", e, d.afterrestorefunc) } }, a.jgrid.ajaxOptions, b.p.ajaxRowOptions || {})) } } return l }, restoreRow: function (b, d) { var e = a.makeArray(arguments).slice(1), c = {}; if (a.type(e[0]) === "object") c = e[0]; else if (a.isFunction(d)) c.afterrestorefunc = d; c = a.extend(true, {}, a.jgrid.inlineEdit, c); return this.each(function () { var d = this, e, g, h = {}, f; if (!d.grid) return; g = a(d).jqGrid("getInd", b, true); if (g === false) return; for (f = 0; f < d.p.savedRow.length; f++) if (String(d.p.savedRow[f].id) === String(b)) { e = f; break } if (e >= 0) { if (a.isFunction(a.fn.datepicker)) try { a("input.hasDatepicker", "#" + a.jgrid.jqID(g.id)).datepicker("hide") } catch (i) { } a.each(d.p.colModel, function () { if (this.editable === true && d.p.savedRow[e].hasOwnProperty(this.name)) h[this.name] = d.p.savedRow[e][this.name] }); a(d).jqGrid("setRowData", b, h); a(g).attr("editable", "0").unbind("keydown"); d.p.savedRow.splice(e, 1); a("#" + a.jgrid.jqID(b), "#" + a.jgrid.jqID(d.p.id)).hasClass("jqgrid-new-row") && setTimeout(function () { a(d).jqGrid("delRowData", b); a(d).jqGrid("showAddEditButtons") }, 0) } a(d).triggerHandler("jqGridInlineAfterRestoreRow", [b]); a.isFunction(c.afterrestorefunc) && c.afterrestorefunc.call(d, b) }) }, addRow: function (b) { b = a.extend(true, { rowID: null, initdata: {}, position: "first", useDefValues: true, useFormatter: false, addRowParams: { extraparam: {}} }, b || {}); return this.each(function () { if (!this.grid) return; var c = this; b.rowID = a.isFunction(b.rowID) ? b.rowID.call(c, b) : b.rowID != null ? b.rowID : a.jgrid.randId(); b.useDefValues === true && a(c.p.colModel).each(function () { if (this.editoptions && this.editoptions.defaultValue) { var d = this.editoptions.defaultValue, e = a.isFunction(d) ? d.call(c) : d; b.initdata[this.name] = e } }); a(c).jqGrid("addRowData", b.rowID, b.initdata, b.position); b.rowID = c.p.idPrefix + b.rowID; a("#" + a.jgrid.jqID(b.rowID), "#" + a.jgrid.jqID(c.p.id)).addClass("jqgrid-new-row"); if (b.useFormatter) a("#" + a.jgrid.jqID(b.rowID) + " .ui-inline-edit", "#" + a.jgrid.jqID(c.p.id)).click(); else { var d = c.p.prmNames, e = d.oper; b.addRowParams.extraparam[e] = d.addoper; a(c).jqGrid("editRow", b.rowID, b.addRowParams); a(c).jqGrid("setSelection", b.rowID) } }) }, inlineNav: function (c, b) { b = a.extend(true, { edit: true, editicon: "ui-icon-pencil", add: true, addicon: "ui-icon-plus", save: true, saveicon: "ui-icon-disk", cancel: true, cancelicon: "ui-icon-cancel", addParams: { addRowParams: { extraparam: {}} }, editParams: {}, restoreAfterSelect: true }, a.jgrid.nav, b || {}); return this.each(function () { if (!this.grid) return; var d = this, i, e = a.jgrid.jqID(d.p.id); d.p._inlinenav = true; if (b.addParams.useFormatter === true) for (var h = d.p.colModel, g = 0; g < h.length; g++) if (h[g].formatter && h[g].formatter === "actions") { if (h[g].formatoptions) { var j = { keys: false, onEdit: null, onSuccess: null, afterSave: null, onError: null, afterRestore: null, extraparam: {}, url: null }, f = a.extend(j, h[g].formatoptions); b.addParams.addRowParams = { keys: f.keys, oneditfunc: f.onEdit, successfunc: f.onSuccess, url: f.url, extraparam: f.extraparam, aftersavefunc: f.afterSave, errorfunc: f.onError, afterrestorefunc: f.afterRestore} } break } b.add && a(d).jqGrid("navButtonAdd", c, { caption: b.addtext, title: b.addtitle, buttonicon: b.addicon, id: d.p.id + "_iladd", onClickButton: function () { a(d).jqGrid("addRow", b.addParams); if (!b.addParams.useFormatter) { a("#" + e + "_ilsave").removeClass("ui-state-disabled"); a("#" + e + "_ilcancel").removeClass("ui-state-disabled"); a("#" + e + "_iladd").addClass("ui-state-disabled"); a("#" + e + "_iledit").addClass("ui-state-disabled") } } }); b.edit && a(d).jqGrid("navButtonAdd", c, { caption: b.edittext, title: b.edittitle, buttonicon: b.editicon, id: d.p.id + "_iledit", onClickButton: function () { var c = a(d).jqGrid("getGridParam", "selrow"); if (c) { a(d).jqGrid("editRow", c, b.editParams); a("#" + e + "_ilsave").removeClass("ui-state-disabled"); a("#" + e + "_ilcancel").removeClass("ui-state-disabled"); a("#" + e + "_iladd").addClass("ui-state-disabled"); a("#" + e + "_iledit").addClass("ui-state-disabled") } else { a.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + e, jqm: true }); a("#jqg_alrt").focus() } } }); if (b.save) { a(d).jqGrid("navButtonAdd", c, { caption: b.savetext || "", title: b.savetitle || "Save row", buttonicon: b.saveicon, id: d.p.id + "_ilsave", onClickButton: function () { var g = d.p.savedRow[0].id; if (g) { var f = d.p.prmNames, h = f.oper, c = {}; if (a("#" + a.jgrid.jqID(g), "#" + e).hasClass("jqgrid-new-row")) { b.addParams.addRowParams.extraparam[h] = f.addoper; c = b.addParams.addRowParams } else { if (!b.editParams.extraparam) b.editParams.extraparam = {}; b.editParams.extraparam[h] = f.editoper; c = b.editParams } a(d).jqGrid("saveRow", g, c) && a(d).jqGrid("showAddEditButtons") } else { a.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + e, jqm: true }); a("#jqg_alrt").focus() } } }); a("#" + e + "_ilsave").addClass("ui-state-disabled") } if (b.cancel) { a(d).jqGrid("navButtonAdd", c, { caption: b.canceltext || "", title: b.canceltitle || "Cancel row editing", buttonicon: b.cancelicon, id: d.p.id + "_ilcancel", onClickButton: function () { var f = d.p.savedRow[0].id, c = {}; if (f) { if (a("#" + a.jgrid.jqID(f), "#" + e).hasClass("jqgrid-new-row")) c = b.addParams.addRowParams; else c = b.editParams; a(d).jqGrid("restoreRow", f, c); a(d).jqGrid("showAddEditButtons") } else { a.jgrid.viewModal("#alertmod", { gbox: "#gbox_" + e, jqm: true }); a("#jqg_alrt").focus() } } }); a("#" + e + "_ilcancel").addClass("ui-state-disabled") } if (b.restoreAfterSelect === true) { if (a.isFunction(d.p.beforeSelectRow)) i = d.p.beforeSelectRow; else i = false; d.p.beforeSelectRow = function (e, f) { var c = true; if (d.p.savedRow.length > 0 && d.p._inlinenav === true && e !== d.p.selrow && d.p.selrow !== null) { if (d.p.selrow === b.addParams.rowID) a(d).jqGrid("delRowData", d.p.selrow); else a(d).jqGrid("restoreRow", d.p.selrow, b.editParams); a(d).jqGrid("showAddEditButtons") } if (i) c = i.call(d, e, f); return c } } }) }, showAddEditButtons: function () { return this.each(function () { if (!this.grid) return; var b = a.jgrid.jqID(this.p.id); a("#" + b + "_ilsave").addClass("ui-state-disabled"); a("#" + b + "_ilcancel").addClass("ui-state-disabled"); a("#" + b + "_iladd").removeClass("ui-state-disabled"); a("#" + b + "_iledit").removeClass("ui-state-disabled") }) } }) })(jQuery); (function (a) { "use strict"; a.jgrid.extend({ editCell: function (b, c, d) { return this.each(function () { var e = this, g, f, h, i; if (!e.grid || e.p.cellEdit !== true) return; c = parseInt(c, 10); e.p.selrow = e.rows[b].id; !e.p.knv && a(e).jqGrid("GridNav"); if (e.p.savedRow.length > 0) { if (d === true) if (b == e.p.iRow && c == e.p.iCol) return; a(e).jqGrid("saveCell", e.p.savedRow[0].id, e.p.savedRow[0].ic) } else window.setTimeout(function () { a("#" + a.jgrid.jqID(e.p.knv)).attr("tabindex", "-1").focus() }, 0); i = e.p.colModel[c]; g = i.name; if (g === "subgrid" || g === "cb" || g === "rn") return; h = a("td:eq(" + c + ")", e.rows[b]); if (i.editable === true && d === true && !h.hasClass("not-editable-cell")) { if (parseInt(e.p.iCol, 10) >= 0 && parseInt(e.p.iRow, 10) >= 0) { a("td:eq(" + e.p.iCol + ")", e.rows[e.p.iRow]).removeClass("edit-cell ui-state-highlight"); a(e.rows[e.p.iRow]).removeClass("selected-row ui-state-hover") } a(h).addClass("edit-cell ui-state-highlight"); a(e.rows[b]).addClass("selected-row ui-state-hover"); try { f = a.unformat.call(e, h, { rowId: e.rows[b].id, colModel: i }, c) } catch (m) { f = i.edittype && i.edittype === "textarea" ? a(h).text() : a(h).html() } if (e.p.autoencode) f = a.jgrid.htmlDecode(f); if (!i.edittype) i.edittype = "text"; e.p.savedRow.push({ id: b, ic: c, name: g, v: f }); if (f === "&nbsp;" || f === "&#160;" || f.length === 1 && f.charCodeAt(0) === 160) f = ""; if (a.isFunction(e.p.formatCell)) { var k = e.p.formatCell.call(e, e.rows[b].id, g, f, b, c); if (k !== undefined) f = k } var l = a.extend({}, i.editoptions || {}, { id: b + "_" + g, name: g }), j = a.jgrid.createEl.call(e, i.edittype, l, f, true, a.extend({}, a.jgrid.ajaxOptions, e.p.ajaxSelectOptions || {})); a(e).triggerHandler("jqGridBeforeEditCell", [e.rows[b].id, g, f, b, c]); a.isFunction(e.p.beforeEditCell) && e.p.beforeEditCell.call(e, e.rows[b].id, g, f, b, c); a(h).html("").append(j).attr("tabindex", "0"); a.jgrid.bindEv.call(e, j, l); window.setTimeout(function () { a(j).focus() }, 0); a("input, select, textarea", h).bind("keydown", function (d) { if (d.keyCode === 27) if (a("input.hasDatepicker", h).length > 0) if (a(".ui-datepicker").is(":hidden")) a(e).jqGrid("restoreCell", b, c); else a("input.hasDatepicker", h).datepicker("hide"); else a(e).jqGrid("restoreCell", b, c); if (d.keyCode === 13) { a(e).jqGrid("saveCell", b, c); return false } if (d.keyCode === 9) if (!e.grid.hDiv.loading) if (d.shiftKey) a(e).jqGrid("prevCell", b, c); else a(e).jqGrid("nextCell", b, c); else return false; d.stopPropagation() }); a(e).triggerHandler("jqGridAfterEditCell", [e.rows[b].id, g, f, b, c]); a.isFunction(e.p.afterEditCell) && e.p.afterEditCell.call(e, e.rows[b].id, g, f, b, c) } else { if (parseInt(e.p.iCol, 10) >= 0 && parseInt(e.p.iRow, 10) >= 0) { a("td:eq(" + e.p.iCol + ")", e.rows[e.p.iRow]).removeClass("edit-cell ui-state-highlight"); a(e.rows[e.p.iRow]).removeClass("selected-row ui-state-hover") } h.addClass("edit-cell ui-state-highlight"); a(e.rows[b]).addClass("selected-row ui-state-hover"); f = h.html().replace(/\&#160\;/ig, ""); a(e).triggerHandler("jqGridSelectCell", [e.rows[b].id, g, f, b, c]); a.isFunction(e.p.onSelectCell) && e.p.onSelectCell.call(e, e.rows[b].id, g, f, b, c) } e.p.iCol = c; e.p.iRow = b }) }, saveCell: function (b, c) { return this.each(function () { var d = this, n; if (!d.grid || d.p.cellEdit !== true) return; if (d.p.savedRow.length >= 1) n = 0; else n = null; if (n !== null) { var j = a("td:eq(" + c + ")", d.rows[b]), e, g, i = d.p.colModel[c], f = i.name, k = a.jgrid.jqID(f); switch (i.edittype) { case "select": if (!i.editoptions.multiple) { e = a("#" + b + "_" + k + " option:selected", d.rows[b]).val(); g = a("#" + b + "_" + k + " option:selected", d.rows[b]).text() } else { var u = a("#" + b + "_" + k, d.rows[b]), r = []; e = a(u).val(); if (e) e.join(","); else e = ""; a("option:selected", u).each(function (c, b) { r[c] = a(b).text() }); g = r.join(",") } if (i.formatter) g = e; break; case "checkbox": var o = ["Yes", "No"]; if (i.editoptions) o = i.editoptions.value.split(":"); e = a("#" + b + "_" + k, d.rows[b]).is(":checked") ? o[0] : o[1]; g = e; break; case "password": case "text": case "textarea": case "button": e = a("#" + b + "_" + k, d.rows[b]).val(); g = e; break; case "custom": try { if (i.editoptions && a.isFunction(i.editoptions.custom_value)) { e = i.editoptions.custom_value.call(d, a(".customelement", j), "get"); if (e === undefined) throw "e2"; else g = e } else throw "e1"; } catch (w) { w === "e1" && a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.nodefined, a.jgrid.edit.bClose); if (w === "e2") a.jgrid.info_dialog(a.jgrid.errors.errcap, "function 'custom_value' " + a.jgrid.edit.msg.novalue, a.jgrid.edit.bClose); else a.jgrid.info_dialog(a.jgrid.errors.errcap, w.message, a.jgrid.edit.bClose) } } if (g !== d.p.savedRow[n].v) { var p = a(d).triggerHandler("jqGridBeforeSaveCell", [d.rows[b].id, f, e, b, c]); if (p) { e = p; g = p } if (a.isFunction(d.p.beforeSaveCell)) { var q = d.p.beforeSaveCell.call(d, d.rows[b].id, f, e, b, c); if (q) { e = q; g = q } } var v = a.jgrid.checkValues.call(d, e, c); if (v[0] === true) { var l = a(d).triggerHandler("jqGridBeforeSubmitCell", [d.rows[b].id, f, e, b, c]) || {}; if (a.isFunction(d.p.beforeSubmitCell)) { l = d.p.beforeSubmitCell.call(d, d.rows[b].id, f, e, b, c); if (!l) l = {} } a("input.hasDatepicker", j).length > 0 && a("input.hasDatepicker", j).datepicker("hide"); if (d.p.cellsubmit === "remote") if (d.p.cellurl) { var h = {}; if (d.p.autoencode) e = a.jgrid.htmlEncode(e); h[f] = e; var s, t, m; m = d.p.prmNames; s = m.id; t = m.oper; h[s] = a.jgrid.stripPref(d.p.idPrefix, d.rows[b].id); h[t] = m.editoper; h = a.extend(l, h); a("#lui_" + a.jgrid.jqID(d.p.id)).show(); d.grid.hDiv.loading = true; a.ajax(a.extend({ url: d.p.cellurl, data: a.isFunction(d.p.serializeCellData) ? d.p.serializeCellData.call(d, h) : h, type: "POST", complete: function (k, l) { a("#lui_" + d.p.id).hide(); d.grid.hDiv.loading = false; if (l === "success") { var i = a(d).triggerHandler("jqGridAfterSubmitCell", [d, k, h.id, f, e, b, c]) || [true, ""]; if (i[0] === true && a.isFunction(d.p.afterSubmitCell)) i = d.p.afterSubmitCell.call(d, k, h.id, f, e, b, c); if (i[0] === true) { a(j).empty(); a(d).jqGrid("setCell", d.rows[b].id, c, g, false, false, true); a(j).addClass("dirty-cell"); a(d.rows[b]).addClass("edited"); a(d).triggerHandler("jqGridAfterSaveCell", [d.rows[b].id, f, e, b, c]); a.isFunction(d.p.afterSaveCell) && d.p.afterSaveCell.call(d, d.rows[b].id, f, e, b, c); d.p.savedRow.splice(0, 1) } else { a.jgrid.info_dialog(a.jgrid.errors.errcap, i[1], a.jgrid.edit.bClose); a(d).jqGrid("restoreCell", b, c) } } }, error: function (e, f, g) { a("#lui_" + a.jgrid.jqID(d.p.id)).hide(); d.grid.hDiv.loading = false; a(d).triggerHandler("jqGridErrorCell", [e, f, g]); if (a.isFunction(d.p.errorCell)) { d.p.errorCell.call(d, e, f, g); a(d).jqGrid("restoreCell", b, c) } else { a.jgrid.info_dialog(a.jgrid.errors.errcap, e.status + " : " + e.statusText + "<br/>" + f, a.jgrid.edit.bClose); a(d).jqGrid("restoreCell", b, c) } } }, a.jgrid.ajaxOptions, d.p.ajaxCellOptions || {})) } else try { a.jgrid.info_dialog(a.jgrid.errors.errcap, a.jgrid.errors.nourl, a.jgrid.edit.bClose); a(d).jqGrid("restoreCell", b, c) } catch (w) { } if (d.p.cellsubmit === "clientArray") { a(j).empty(); a(d).jqGrid("setCell", d.rows[b].id, c, g, false, false, true); a(j).addClass("dirty-cell"); a(d.rows[b]).addClass("edited"); a(d).triggerHandler("jqGridAfterSaveCell", [d.rows[b].id, f, e, b, c]); a.isFunction(d.p.afterSaveCell) && d.p.afterSaveCell.call(d, d.rows[b].id, f, e, b, c); d.p.savedRow.splice(0, 1) } } else try { window.setTimeout(function () { a.jgrid.info_dialog(a.jgrid.errors.errcap, e + " " + v[1], a.jgrid.edit.bClose) }, 100); a(d).jqGrid("restoreCell", b, c) } catch (w) { } } else a(d).jqGrid("restoreCell", b, c) } window.setTimeout(function () { a("#" + a.jgrid.jqID(d.p.knv)).attr("tabindex", "-1").focus() }, 0) }) }, restoreCell: function (b, c) { return this.each(function () { var d = this, e; if (!d.grid || d.p.cellEdit !== true) return; if (d.p.savedRow.length >= 1) e = 0; else e = null; if (e !== null) { var f = a("td:eq(" + c + ")", d.rows[b]); if (a.isFunction(a.fn.datepicker)) try { a("input.hasDatepicker", f).datepicker("hide") } catch (g) { } a(f).empty().attr("tabindex", "-1"); a(d).jqGrid("setCell", d.rows[b].id, c, d.p.savedRow[e].v, false, false, true); a(d).triggerHandler("jqGridAfterRestoreCell", [d.rows[b].id, d.p.savedRow[e].v, b, c]); a.isFunction(d.p.afterRestoreCell) && d.p.afterRestoreCell.call(d, d.rows[b].id, d.p.savedRow[e].v, b, c); d.p.savedRow.splice(0, 1) } window.setTimeout(function () { a("#" + d.p.knv).attr("tabindex", "-1").focus() }, 0) }) }, nextCell: function (c, b) { return this.each(function () { var d = this, f = false, e; if (!d.grid || d.p.cellEdit !== true) return; for (e = b + 1; e < d.p.colModel.length; e++) if (d.p.colModel[e].editable === true) { f = e; break } if (f !== false) a(d).jqGrid("editCell", c, f, true); else d.p.savedRow.length > 0 && a(d).jqGrid("saveCell", c, b) }) }, prevCell: function (c, b) { return this.each(function () { var d = this, f = false, e; if (!d.grid || d.p.cellEdit !== true) return; for (e = b - 1; e >= 0; e--) if (d.p.colModel[e].editable === true) { f = e; break } if (f !== false) a(d).jqGrid("editCell", c, f, true); else d.p.savedRow.length > 0 && a(d).jqGrid("saveCell", c, b) }) }, GridNav: function () { return this.each(function () { var b = this; if (!b.grid || b.p.cellEdit !== true) return; b.p.knv = b.p.id + "_kn"; var g = a("<div style='position:fixed;top:0px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='" + b.p.knv + "'></div></div>"), d, c; function e(c, d, e) { if (e.substr(0, 1) === "v") { var k = a(b.grid.bDiv)[0].clientHeight, m = a(b.grid.bDiv)[0].scrollTop, h = b.rows[c].offsetTop + b.rows[c].clientHeight, j = b.rows[c].offsetTop; if (e === "vd") if (h >= k) a(b.grid.bDiv)[0].scrollTop = a(b.grid.bDiv)[0].scrollTop + b.rows[c].clientHeight; if (e === "vu") if (j < m) a(b.grid.bDiv)[0].scrollTop = a(b.grid.bDiv)[0].scrollTop - b.rows[c].clientHeight } if (e === "h") { var l = a(b.grid.bDiv)[0].clientWidth, f = a(b.grid.bDiv)[0].scrollLeft, g = b.rows[c].cells[d].offsetLeft + b.rows[c].cells[d].clientWidth, i = b.rows[c].cells[d].offsetLeft; if (g >= l + parseInt(f, 10)) a(b.grid.bDiv)[0].scrollLeft = a(b.grid.bDiv)[0].scrollLeft + b.rows[c].cells[d].clientWidth; else if (i < f) a(b.grid.bDiv)[0].scrollLeft = a(b.grid.bDiv)[0].scrollLeft - b.rows[c].cells[d].clientWidth } } function f(d, e) { var c, a; if (e === "lft") { c = d + 1; for (a = d; a >= 0; a--) if (b.p.colModel[a].hidden !== true) { c = a; break } } if (e === "rgt") { c = d - 1; for (a = d; a < b.p.colModel.length; a++) if (b.p.colModel[a].hidden !== true) { c = a; break } } return c } a(g).insertBefore(b.grid.cDiv); a("#" + b.p.knv).focus().keydown(function (g) { c = g.keyCode; if (b.p.direction === "rtl") if (c === 37) c = 39; else if (c === 39) c = 37; switch (c) { case 38: if (b.p.iRow - 1 > 0) { e(b.p.iRow - 1, b.p.iCol, "vu"); a(b).jqGrid("editCell", b.p.iRow - 1, b.p.iCol, false) } break; case 40: if (b.p.iRow + 1 <= b.rows.length - 1) { e(b.p.iRow + 1, b.p.iCol, "vd"); a(b).jqGrid("editCell", b.p.iRow + 1, b.p.iCol, false) } break; case 37: if (b.p.iCol - 1 >= 0) { d = f(b.p.iCol - 1, "lft"); e(b.p.iRow, d, "h"); a(b).jqGrid("editCell", b.p.iRow, d, false) } break; case 39: if (b.p.iCol + 1 <= b.p.colModel.length - 1) { d = f(b.p.iCol + 1, "rgt"); e(b.p.iRow, d, "h"); a(b).jqGrid("editCell", b.p.iRow, d, false) } break; case 13: parseInt(b.p.iCol, 10) >= 0 && parseInt(b.p.iRow, 10) >= 0 && a(b).jqGrid("editCell", b.p.iRow, b.p.iCol, true); break; default: return true } return false }) }) }, getChangedCells: function (b) { var c = []; if (!b) b = "all"; this.each(function () { var d = this, e; if (!d.grid || d.p.cellEdit !== true) return; a(d.rows).each(function (g) { var f = {}; if (a(this).hasClass("edited")) { a("td", this).each(function (c) { e = d.p.colModel[c].name; if (e !== "cb" && e !== "subgrid") if (b === "dirty") { if (a(this).hasClass("dirty-cell")) try { f[e] = a.unformat.call(d, this, { rowId: d.rows[g].id, colModel: d.p.colModel[c] }, c) } catch (h) { f[e] = a.jgrid.htmlDecode(a(this).html()) } } else try { f[e] = a.unformat.call(d, this, { rowId: d.rows[g].id, colModel: d.p.colModel[c] }, c) } catch (h) { f[e] = a.jgrid.htmlDecode(a(this).html()) } }); f.id = this.id; c.push(f) } }) }); return c } }) })(jQuery); (function (a) { "use strict"; a.jgrid.extend({ setSubGrid: function () { return this.each(function () { var b = this, c, d, e = { plusicon: "ui-icon-plus", minusicon: "ui-icon-minus", openicon: "ui-icon-carat-1-sw", expandOnLoad: false, delayOnLoad: 50, selectOnExpand: false, reloadOnExpand: true }; b.p.subGridOptions = a.extend(e, b.p.subGridOptions || {}); b.p.colNames.unshift(""); b.p.colModel.unshift({ name: "subgrid", width: a.jgrid.cell_width ? b.p.subGridWidth + b.p.cellLayout : b.p.subGridWidth, sortable: false, resizable: false, hidedlg: true, search: false, fixed: true }); c = b.p.subGridModel; if (c[0]) { c[0].align = a.extend([], c[0].align || []); for (d = 0; d < c[0].name.length; d++) c[0].align[d] = c[0].align[d] || "left" } }) }, addSubGridCell: function (e, d) { var a = "", c, b; this.each(function () { a = this.formatCol(e, d); b = this.p.id; c = this.p.subGridOptions.plusicon }); return '<td role="gridcell" aria-describedby="' + b + '_subgrid" class="ui-sgcollapsed sgcollapsed" ' + a + "><a href='javascript:void(0);'><span class='ui-icon " + c + "'></span></a></td>" }, addSubGrid: function (c, b) { return this.each(function () { var d = this; if (!d.grid) return; var j = function (c, e, f) { var b = a("<td align='" + d.p.subGridModel[0].align[f] + "'></td>").html(e); a(c).append(b) }, l = function (h, i) { for (var f, e, g = a("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), c = a("<tr></tr>"), b = 0; b < d.p.subGridModel[0].name.length; b++) { f = a("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + d.p.direction + "'></th>"); a(f).html(d.p.subGridModel[0].name[b]); a(f).width(d.p.subGridModel[0].width[b]); a(c).append(f) } a(g).append(c); if (h) { e = d.p.xmlReader.subgrid; a(e.root + " " + e.row, h).each(function () { c = a("<tr class='ui-widget-content ui-subtblcell'></tr>"); if (e.repeatitems === true) a(e.cell, this).each(function (b) { j(c, a(this).text() || "&#160;", b) }); else { var f = d.p.subGridModel[0].mapping || d.p.subGridModel[0].name; if (f) for (b = 0; b < f.length; b++) j(c, a(f[b], this).text() || "&#160;", b) } a(g).append(c) }) } var k = a("table:first", d.grid.bDiv).attr("id") + "_"; a("#" + a.jgrid.jqID(k + i)).append(g); d.grid.hDiv.loading = false; a("#load_" + a.jgrid.jqID(d.p.id)).hide(); return false }, k = function (m, n) { for (var i, h, f, g, b, k = a("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"), e = a("<tr></tr>"), c = 0; c < d.p.subGridModel[0].name.length; c++) { i = a("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + d.p.direction + "'></th>"); a(i).html(d.p.subGridModel[0].name[c]); a(i).width(d.p.subGridModel[0].width[c]); a(e).append(i) } a(k).append(e); if (m) { g = d.p.jsonReader.subgrid; h = a.jgrid.getAccessor(m, g.root); if (h !== undefined) for (c = 0; c < h.length; c++) { f = h[c]; e = a("<tr class='ui-widget-content ui-subtblcell'></tr>"); if (g.repeatitems === true) { if (g.cell) f = f[g.cell]; for (b = 0; b < f.length; b++) j(e, f[b] || "&#160;", b) } else { var l = d.p.subGridModel[0].mapping || d.p.subGridModel[0].name; if (l.length) for (b = 0; b < l.length; b++) j(e, f[l[b]] || "&#160;", b) } a(k).append(e) } } var o = a("table:first", d.grid.bDiv).attr("id") + "_"; a("#" + a.jgrid.jqID(o + n)).append(k); d.grid.hDiv.loading = false; a("#load_" + a.jgrid.jqID(d.p.id)).hide(); return false }, p = function (g) { var e, b, c, f; e = a(g).attr("id"); b = { nd_: +new Date }; b[d.p.prmNames.subgridid] = e; if (!d.p.subGridModel[0]) return false; if (d.p.subGridModel[0].params) for (f = 0; f < d.p.subGridModel[0].params.length; f++) for (c = 0; c < d.p.colModel.length; c++) if (d.p.colModel[c].name === d.p.subGridModel[0].params[f]) b[d.p.colModel[c].name] = a("td:eq(" + c + ")", g).text().replace(/\&#160\;/ig, ""); if (!d.grid.hDiv.loading) { d.grid.hDiv.loading = true; a("#load_" + a.jgrid.jqID(d.p.id)).show(); if (!d.p.subgridtype) d.p.subgridtype = d.p.datatype; if (a.isFunction(d.p.subgridtype)) d.p.subgridtype.call(d, b); else d.p.subgridtype = d.p.subgridtype.toLowerCase(); switch (d.p.subgridtype) { case "xml": case "json": a.ajax(a.extend({ type: d.p.mtype, url: d.p.subGridUrl, dataType: d.p.subgridtype, data: a.isFunction(d.p.serializeSubGridData) ? d.p.serializeSubGridData.call(d, b) : b, complete: function (b) { if (d.p.subgridtype === "xml") l(b.responseXML, e); else k(a.jgrid.parse(b.responseText), e); b = null } }, a.jgrid.ajaxOptions, d.p.ajaxSubgridOptions || {})) } } return false }, e, g, m, o = 0, f, h; a.each(d.p.colModel, function () { if (this.hidden === true || this.name === "rn" || this.name === "cb") o++ }); var n = d.rows.length, i = 1; if (b !== undefined && b > 0) { i = b; n = b + 1 } while (i < n) { a(d.rows[i]).hasClass("jqgrow") && a(d.rows[i].cells[c]).bind("click", function () { var b = a(this).parent("tr")[0]; h = b.nextSibling; if (a(this).hasClass("sgcollapsed")) { g = d.p.id; e = b.id; if (d.p.subGridOptions.reloadOnExpand === true || d.p.subGridOptions.reloadOnExpand === false && !a(h).hasClass("ui-subgrid")) { m = c >= 1 ? "<td colspan='" + c + "'>&#160;</td>" : ""; f = a(d).triggerHandler("jqGridSubGridBeforeExpand", [g + "_" + e, e]); f = f === false || f === "stop" ? false : true; if (f && a.isFunction(d.p.subGridBeforeExpand)) f = d.p.subGridBeforeExpand.call(d, g + "_" + e, e); if (f === false) return false; a(b).after("<tr role='row' class='ui-subgrid'>" + m + "<td class='ui-widget-content subgrid-cell'><span class='ui-icon " + d.p.subGridOptions.openicon + "'></span></td><td colspan='" + parseInt(d.p.colNames.length - 1 - o, 10) + "' class='ui-widget-content subgrid-data'><div id=" + g + "_" + e + " class='tablediv'></div></td></tr>"); a(d).triggerHandler("jqGridSubGridRowExpanded", [g + "_" + e, e]); if (a.isFunction(d.p.subGridRowExpanded)) d.p.subGridRowExpanded.call(d, g + "_" + e, e); else p(b) } else a(h).show(); a(this).html("<a href='javascript:void(0);'><span class='ui-icon " + d.p.subGridOptions.minusicon + "'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded"); d.p.subGridOptions.selectOnExpand && a(d).jqGrid("setSelection", e) } else if (a(this).hasClass("sgexpanded")) { f = a(d).triggerHandler("jqGridSubGridRowColapsed", [g + "_" + e, e]); f = f === false || f === "stop" ? false : true; if (f && a.isFunction(d.p.subGridRowColapsed)) { e = b.id; f = d.p.subGridRowColapsed.call(d, g + "_" + e, e) } if (f === false) return false; if (d.p.subGridOptions.reloadOnExpand === true) a(h).remove(".ui-subgrid"); else a(h).hasClass("ui-subgrid") && a(h).hide(); a(this).html("<a href='javascript:void(0);'><span class='ui-icon " + d.p.subGridOptions.plusicon + "'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed") } return false }); i++ } d.p.subGridOptions.expandOnLoad === true && a(d.rows).filter(".jqgrow").each(function (c, b) { a(b.cells[0]).click() }); d.subGridXml = function (b, a) { l(b, a) }; d.subGridJson = function (a, b) { k(a, b) } }) }, expandSubGridRow: function (b) { return this.each(function () { var d = this; if (!d.grid && !b) return; if (d.p.subGrid === true) { var e = a(this).jqGrid("getInd", b, true); if (e) { var c = a("td.sgcollapsed", e)[0]; c && a(c).trigger("click") } } }) }, collapseSubGridRow: function (b) { return this.each(function () { var d = this; if (!d.grid && !b) return; if (d.p.subGrid === true) { var e = a(this).jqGrid("getInd", b, true); if (e) { var c = a("td.sgexpanded", e)[0]; c && a(c).trigger("click") } } }) }, toggleSubGridRow: function (b) { return this.each(function () { var e = this; if (!e.grid && !b) return; if (e.p.subGrid === true) { var d = a(this).jqGrid("getInd", b, true); if (d) { var c = a("td.sgcollapsed", d)[0]; if (c) a(c).trigger("click"); else { c = a("td.sgexpanded", d)[0]; c && a(c).trigger("click") } } } }) } }) })(jQuery); (function (a) { "use strict"; a.jgrid.extend({ setTreeNode: function (b, c) { return this.each(function () { var d = this; if (!d.grid || !d.p.treeGrid) return; var k = d.p.expColInd, g = d.p.treeReader.expanded_field, f = d.p.treeReader.leaf_field, t = d.p.treeReader.level_field, n = d.p.treeReader.icon_field, h = d.p.treeReader.loaded, r, s, j, m, l, i, e, o; while (b < c) { var v = a.jgrid.stripPref(d.p.idPrefix, d.rows[b].id), u = d.p._index[v], q; e = d.p.data[u]; if (d.p.treeGridModel === "nested") if (!e[f]) { r = parseInt(e[d.p.treeReader.left_field], 10); s = parseInt(e[d.p.treeReader.right_field], 10); e[f] = s === r + 1 ? "true" : "false"; d.rows[b].cells[d.p._treeleafpos].innerHTML = e[f] } j = parseInt(e[t], 10); if (d.p.tree_root_level === 0) { m = j + 1; l = j } else { m = j; l = j - 1 } i = "<div class='tree-wrap tree-wrap-" + d.p.direction + "' style='width:" + m * 18 + "px;'>"; i += "<div style='" + (d.p.direction === "rtl" ? "right:" : "left:") + l * 18 + "px;' class='ui-icon "; if (e[h] !== undefined) if (e[h] === "true" || e[h] === true) e[h] = true; else e[h] = false; if (e[f] === "true" || e[f] === true) { i += (e[n] !== undefined && e[n] !== "" ? e[n] : d.p.treeIcons.leaf) + " tree-leaf treeclick"; e[f] = true; o = "leaf" } else { e[f] = false; o = "" } e[g] = (e[g] === "true" || e[g] === true ? true : false) && (e[h] || e[h] === undefined); if (e[g] === false) i += e[f] === true ? "'" : d.p.treeIcons.plus + " tree-plus treeclick'"; else i += e[f] === true ? "'" : d.p.treeIcons.minus + " tree-minus treeclick'"; i += "></div></div>"; a(d.rows[b].cells[k]).wrapInner("<span class='cell-wrapper" + o + "'></span>").prepend(i); if (j !== parseInt(d.p.tree_root_level, 10)) { var p = a(d).jqGrid("getNodeParent", e); q = p && p.hasOwnProperty(g) ? p[g] : true; !q && a(d.rows[b]).css("display", "none") } a(d.rows[b].cells[k]).find("div.treeclick").bind("click", function (c) { var e = c.target || c.srcElement, h = a.jgrid.stripPref(d.p.idPrefix, a(e, d.rows).closest("tr.jqgrow")[0].id), b = d.p._index[h]; if (!d.p.data[b][f]) if (d.p.data[b][g]) { a(d).jqGrid("collapseRow", d.p.data[b]); a(d).jqGrid("collapseNode", d.p.data[b]) } else { a(d).jqGrid("expandRow", d.p.data[b]); a(d).jqGrid("expandNode", d.p.data[b]) } return false }); d.p.ExpandColClick === true && a(d.rows[b].cells[k]).find("span.cell-wrapper").css("cursor", "pointer").bind("click", function (e) { var h = e.target || e.srcElement, c = a.jgrid.stripPref(d.p.idPrefix, a(h, d.rows).closest("tr.jqgrow")[0].id), b = d.p._index[c]; if (!d.p.data[b][f]) if (d.p.data[b][g]) { a(d).jqGrid("collapseRow", d.p.data[b]); a(d).jqGrid("collapseNode", d.p.data[b]) } else { a(d).jqGrid("expandRow", d.p.data[b]); a(d).jqGrid("expandNode", d.p.data[b]) } a(d).jqGrid("setSelection", c); return false }); b++ } }) }, setTreeGrid: function () { return this.each(function () { var b = this, d = 0, i, h = false, c, f, e, g = []; if (!b.p.treeGrid) return; !b.p.treedatatype && a.extend(b.p, { treedatatype: b.p.datatype }); b.p.subGrid = false; b.p.altRows = false; b.p.pgbuttons = false; b.p.pginput = false; b.p.gridview = true; if (b.p.rowTotal === null) b.p.rowNum = 1e4; b.p.multiselect = false; b.p.rowList = []; b.p.expColInd = 0; i = "ui-icon-triangle-1-" + (b.p.direction === "rtl" ? "w" : "e"); b.p.treeIcons = a.extend({ plus: i, minus: "ui-icon-triangle-1-s", leaf: "ui-icon-radio-off" }, b.p.treeIcons || {}); if (b.p.treeGridModel === "nested") b.p.treeReader = a.extend({ level_field: "level", left_field: "lft", right_field: "rgt", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon" }, b.p.treeReader); else if (b.p.treeGridModel === "adjacency") b.p.treeReader = a.extend({ level_field: "level", parent_id_field: "parent", leaf_field: "isLeaf", expanded_field: "expanded", loaded: "loaded", icon_field: "icon" }, b.p.treeReader); for (f in b.p.colModel) if (b.p.colModel.hasOwnProperty(f)) { c = b.p.colModel[f].name; if (c === b.p.ExpandColumn && !h) { h = true; b.p.expColInd = d } d++; for (e in b.p.treeReader) b.p.treeReader.hasOwnProperty(e) && b.p.treeReader[e] === c && g.push(c) } a.each(b.p.treeReader, function (e, c) { if (c && a.inArray(c, g) === -1) { if (e === "leaf_field") b.p._treeleafpos = d; d++; b.p.colNames.push(c); b.p.colModel.push({ name: c, width: 1, hidden: true, sortable: false, resizable: false, hidedlg: true, editable: true, search: false }) } }) }) }, expandRow: function (b) { this.each(function () { var c = this; if (!c.grid || !c.p.treeGrid) return; var d = a(c).jqGrid("getNodeChildren", b), e = c.p.treeReader.expanded_field, f = c.rows; a(d).each(function () { var b = c.p.idPrefix + a.jgrid.getAccessor(this, c.p.localReader.id); a(f.namedItem(b)).css("display", ""); this[e] && a(c).jqGrid("expandRow", this) }) }) }, collapseRow: function (b) { this.each(function () { var c = this; if (!c.grid || !c.p.treeGrid) return; var d = a(c).jqGrid("getNodeChildren", b), e = c.p.treeReader.expanded_field, f = c.rows; a(d).each(function () { var b = c.p.idPrefix + a.jgrid.getAccessor(this, c.p.localReader.id); a(f.namedItem(b)).css("display", "none"); this[e] && a(c).jqGrid("collapseRow", this) }) }) }, getRootNodes: function () { var b = []; this.each(function () { var c = this; if (!c.grid || !c.p.treeGrid) return; switch (c.p.treeGridModel) { case "nested": var e = c.p.treeReader.level_field; a(c.p.data).each(function () { parseInt(this[e], 10) === parseInt(c.p.tree_root_level, 10) && b.push(this) }); break; case "adjacency": var d = c.p.treeReader.parent_id_field; a(c.p.data).each(function () { (this[d] === null || String(this[d]).toLowerCase() === "null") && b.push(this) }) } }); return b }, getNodeDepth: function (c) { var b = null; this.each(function () { if (!this.grid || !this.p.treeGrid) return; var d = this; switch (d.p.treeGridModel) { case "nested": var e = d.p.treeReader.level_field; b = parseInt(c[e], 10) - parseInt(d.p.tree_root_level, 10); break; case "adjacency": b = a(d).jqGrid("getNodeAncestors", c).length } }); return b }, getNodeParent: function (b) { var c = null; this.each(function () { var d = this; if (!d.grid || !d.p.treeGrid) return; switch (d.p.treeGridModel) { case "nested": var f = d.p.treeReader.left_field, g = d.p.treeReader.right_field, e = d.p.treeReader.level_field, k = parseInt(b[f], 10), l = parseInt(b[g], 10), i = parseInt(b[e], 10); a(this.p.data).each(function () { if (parseInt(this[e], 10) === i - 1 && parseInt(this[f], 10) < k && parseInt(this[g], 10) > l) { c = this; return false } }); break; case "adjacency": var h = d.p.treeReader.parent_id_field, j = d.p.localReader.id; a(this.p.data).each(function () { if (this[j] === a.jgrid.stripPref(d.p.idPrefix, b[h])) { c = this; return false } }) } }); return c }, getNodeChildren: function (b) { var c = []; this.each(function () { var d = this; if (!d.grid || !d.p.treeGrid) return; switch (d.p.treeGridModel) { case "nested": var f = d.p.treeReader.left_field, g = d.p.treeReader.right_field, e = d.p.treeReader.level_field, k = parseInt(b[f], 10), l = parseInt(b[g], 10), i = parseInt(b[e], 10); a(this.p.data).each(function () { parseInt(this[e], 10) === i + 1 && parseInt(this[f], 10) > k && parseInt(this[g], 10) < l && c.push(this) }); break; case "adjacency": var h = d.p.treeReader.parent_id_field, j = d.p.localReader.id; a(this.p.data).each(function () { this[h] == a.jgrid.stripPref(d.p.idPrefix, b[j]) && c.push(this) }) } }); return c }, getFullTreeNode: function (c) { var b = []; this.each(function () { var d = this, g; if (!d.grid || !d.p.treeGrid) return; switch (d.p.treeGridModel) { case "nested": var e = d.p.treeReader.left_field, k = d.p.treeReader.right_field, f = d.p.treeReader.level_field, l = parseInt(c[e], 10), m = parseInt(c[k], 10), i = parseInt(c[f], 10); a(this.p.data).each(function () { parseInt(this[f], 10) >= i && parseInt(this[e], 10) >= l && parseInt(this[e], 10) <= m && b.push(this) }); break; case "adjacency": if (c) { b.push(c); var h = d.p.treeReader.parent_id_field, j = d.p.localReader.id; a(this.p.data).each(function (c) { g = b.length; for (c = 0; c < g; c++) if (a.jgrid.stripPref(d.p.idPrefix, b[c][j]) === this[h]) { b.push(this); break } }) } } }); return b }, getNodeAncestors: function (c) { var b = []; this.each(function () { if (!this.grid || !this.p.treeGrid) return; var d = a(this).jqGrid("getNodeParent", c); while (d) { b.push(d); d = a(this).jqGrid("getNodeParent", d) } }); return b }, isVisibleNode: function (c) { var b = true; this.each(function () { var d = this; if (!d.grid || !d.p.treeGrid) return; var e = a(d).jqGrid("getNodeAncestors", c), f = d.p.treeReader.expanded_field; a(e).each(function () { b = b && this[f]; if (!b) return false }) }); return b }, isNodeLoaded: function (c) { var b; this.each(function () { var d = this; if (!d.grid || !d.p.treeGrid) return; var e = d.p.treeReader.leaf_field; if (c !== undefined) if (c.loaded !== undefined) b = c.loaded; else if (c[e] || a(d).jqGrid("getNodeChildren", c).length > 0) b = true; else b = false; else b = false }); return b }, expandNode: function (b) { return this.each(function () { if (!this.grid || !this.p.treeGrid) return; var d = this.p.treeReader.expanded_field, i = this.p.treeReader.parent_id_field, h = this.p.treeReader.loaded, f = this.p.treeReader.level_field, j = this.p.treeReader.left_field, k = this.p.treeReader.right_field; if (!b[d]) { var c = a.jgrid.getAccessor(b, this.p.localReader.id), e = a("#" + this.p.idPrefix + a.jgrid.jqID(c), this.grid.bDiv)[0], g = this.p._index[c]; if (a(this).jqGrid("isNodeLoaded", this.p.data[g])) { b[d] = true; a("div.treeclick", e).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus") } else if (!this.grid.hDiv.loading) { b[d] = true; a("div.treeclick", e).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus"); this.p.treeANode = e.rowIndex; this.p.datatype = this.p.treedatatype; if (this.p.treeGridModel === "nested") a(this).jqGrid("setGridParam", { postData: { nodeid: c, n_left: b[j], n_right: b[k], n_level: b[f]} }); else a(this).jqGrid("setGridParam", { postData: { nodeid: c, parentid: b[i], n_level: b[f]} }); a(this).trigger("reloadGrid"); b[h] = true; if (this.p.treeGridModel === "nested") a(this).jqGrid("setGridParam", { postData: { nodeid: "", n_left: "", n_right: "", n_level: ""} }); else a(this).jqGrid("setGridParam", { postData: { nodeid: "", parentid: "", n_level: ""} }) } } }) }, collapseNode: function (b) { return this.each(function () { if (!this.grid || !this.p.treeGrid) return; var c = this.p.treeReader.expanded_field; if (b[c]) { b[c] = false; var e = a.jgrid.getAccessor(b, this.p.localReader.id), d = a("#" + this.p.idPrefix + a.jgrid.jqID(e), this.grid.bDiv)[0]; a("div.treeclick", d).removeClass(this.p.treeIcons.minus + " tree-minus").addClass(this.p.treeIcons.plus + " tree-plus") } }) }, SortTree: function (b, d, e, c) { return this.each(function () { if (!this.grid || !this.p.treeGrid) return; var i, l, j, f = [], k = this, g, h, m = a(this).jqGrid("getRootNodes"); g = a.jgrid.from(m); g.orderBy(b, d, e, c); h = g.select(); for (i = 0, l = h.length; i < l; i++) { j = h[i]; f.push(j); a(this).jqGrid("collectChildrenSortTree", f, j, b, d, e, c) } a.each(f, function (b) { var c = a.jgrid.getAccessor(this, k.p.localReader.id); a("#" + a.jgrid.jqID(k.p.id) + " tbody tr:eq(" + b + ")").after(a("tr#" + a.jgrid.jqID(c), k.grid.bDiv)) }); g = null; h = null; f = null }) }, collectChildrenSortTree: function (d, g, b, e, f, c) { return this.each(function () { if (!this.grid || !this.p.treeGrid) return; var h, l, j, m, k, i; m = a(this).jqGrid("getNodeChildren", g); k = a.jgrid.from(m); k.orderBy(b, e, f, c); i = k.select(); for (h = 0, l = i.length; h < l; h++) { j = i[h]; d.push(j); a(this).jqGrid("collectChildrenSortTree", d, j, b, e, f, c) } }) }, setTreeRow: function (c, d) { var b = false; this.each(function () { var e = this; if (!e.grid || !e.p.treeGrid) return; b = a(e).jqGrid("setRowData", c, d) }); return b }, delTreeNode: function (b) { return this.each(function () { var c = this, m = c.p.localReader.id, j, h = c.p.treeReader.left_field, g = c.p.treeReader.right_field, f, k, d, e; if (!c.grid || !c.p.treeGrid) return; var i = c.p._index[b]; if (i !== undefined) { f = parseInt(c.p.data[i][g], 10); k = f - parseInt(c.p.data[i][h], 10) + 1; var l = a(c).jqGrid("getFullTreeNode", c.p.data[i]); if (l.length > 0) for (j = 0; j < l.length; j++) a(c).jqGrid("delRowData", l[j][m]); if (c.p.treeGridModel === "nested") { d = a.jgrid.from(c.p.data).greater(h, f, { stype: "integer" }).select(); if (d.length) for (e in d) if (d.hasOwnProperty(e)) d[e][h] = parseInt(d[e][h], 10) - k; d = a.jgrid.from(c.p.data).greater(g, f, { stype: "integer" }).select(); if (d.length) for (e in d) if (d.hasOwnProperty(e)) d[e][g] = parseInt(d[e][g], 10) - k } } }) }, addChildNode: function (n, f, e, s) { var b = this[0]; if (e) { var l = b.p.treeReader.expanded_field, m = b.p.treeReader.leaf_field, y = b.p.treeReader.level_field, B = b.p.treeReader.parent_id_field, k = b.p.treeReader.left_field, g = b.p.treeReader.right_field, u = b.p.treeReader.loaded, v, q, i, r, h, A, x = 0, o = f, w, j; if (s === undefined) s = false; if (n === undefined || n === null) { h = b.p.data.length - 1; if (h >= 0) while (h >= 0) { x = Math.max(x, parseInt(b.p.data[h][b.p.localReader.id], 10)); h-- } n = x + 1 } var z = a(b).jqGrid("getInd", f); w = false; if (f === undefined || f === null || f === "") { f = null; o = null; v = "last"; r = b.p.tree_root_level; h = b.p.data.length + 1 } else { v = "after"; q = b.p._index[f]; i = b.p.data[q]; f = i[b.p.localReader.id]; r = parseInt(i[y], 10) + 1; var t = a(b).jqGrid("getFullTreeNode", i); if (t.length) { h = t[t.length - 1][b.p.localReader.id]; o = h; h = a(b).jqGrid("getInd", o) + 1 } else h = a(b).jqGrid("getInd", f) + 1; if (i[m]) { w = true; i[l] = true; a(b.rows[z]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass(b.p.treeIcons.leaf + " tree-leaf").addClass(b.p.treeIcons.minus + " tree-minus"); b.p.data[q][m] = false; i[u] = true } } A = h + 1; if (e[l] === undefined) e[l] = false; if (e[u] === undefined) e[u] = false; e[y] = r; if (e[m] === undefined) e[m] = true; if (b.p.treeGridModel === "adjacency") e[B] = f; if (b.p.treeGridModel === "nested") { var p, c, d; if (f !== null) { j = parseInt(i[g], 10); p = a.jgrid.from(b.p.data); p = p.greaterOrEquals(g, j, { stype: "integer" }); c = p.select(); if (c.length) for (d in c) if (c.hasOwnProperty(d)) { c[d][k] = c[d][k] > j ? parseInt(c[d][k], 10) + 2 : c[d][k]; c[d][g] = c[d][g] >= j ? parseInt(c[d][g], 10) + 2 : c[d][g] } e[k] = j; e[g] = j + 1 } else { j = parseInt(a(b).jqGrid("getCol", g, false, "max"), 10); c = a.jgrid.from(b.p.data).greater(k, j, { stype: "integer" }).select(); if (c.length) for (d in c) if (c.hasOwnProperty(d)) c[d][k] = parseInt(c[d][k], 10) + 2; c = a.jgrid.from(b.p.data).greater(g, j, { stype: "integer" }).select(); if (c.length) for (d in c) if (c.hasOwnProperty(d)) c[d][g] = parseInt(c[d][g], 10) + 2; e[k] = j + 1; e[g] = j + 2 } } if (f === null || a(b).jqGrid("isNodeLoaded", i) || w) { a(b).jqGrid("addRowData", n, e, v, o); a(b).jqGrid("setTreeNode", h, A) } i && !i[l] && s && a(b.rows[z]).find("div.treeclick").click() } } }) })(jQuery); (function (a) { "use strict"; a.extend(a.jgrid, { template: function (d) { var c = a.makeArray(arguments).slice(1), b, e = c.length; if (d == null) d = ""; return d.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function (h, f) { if (!isNaN(parseInt(f, 10))) return c[parseInt(f, 10)]; for (b = 0; b < e; b++) if (a.isArray(c[b])) { var d = c[b], g = d.length; while (g--) if (f === d[g].nm) return d[g].v } }) } }); a.jgrid.extend({ groupingSetup: function () { return this.each(function () { var e = this, c, d, g, f = e.p.colModel, b = e.p.groupingView; if (b !== null && (typeof b === "object" || a.isFunction(b))) if (!b.groupField.length) e.p.grouping = false; else { if (b.visibiltyOnNextGrouping === undefined) b.visibiltyOnNextGrouping = []; b.lastvalues = []; b.groups = []; b.counters = []; for (c = 0; c < b.groupField.length; c++) { if (!b.groupOrder[c]) b.groupOrder[c] = "asc"; if (!b.groupText[c]) b.groupText[c] = "{0}"; if (typeof b.groupColumnShow[c] !== "boolean") b.groupColumnShow[c] = true; if (typeof b.groupSummary[c] !== "boolean") b.groupSummary[c] = false; if (b.groupColumnShow[c] === true) { b.visibiltyOnNextGrouping[c] = true; a(e).jqGrid("showCol", b.groupField[c]) } else { b.visibiltyOnNextGrouping[c] = a("#" + a.jgrid.jqID(e.p.id + "_" + b.groupField[c])).is(":visible"); a(e).jqGrid("hideCol", b.groupField[c]) } } b.summary = []; for (d = 0, g = f.length; d < g; d++) f[d].summaryType && b.summary.push({ nm: f[d].name, st: f[d].summaryType, v: "", sr: f[d].summaryRound, srt: f[d].summaryRoundType || "round" }) } else e.p.grouping = false }) }, groupingPrepare: function (e, d, b, c) { this.each(function () { for (var f = this.p.groupingView, i = this, n = f.groupField.length, k, h, l, j, m = 0, g = 0; g < n; g++) { k = f.groupField[g]; l = f.displayField[g]; h = b[k]; j = l == null ? null : b[l]; if (j == null) j = h; if (h !== undefined) if (c === 0) { f.groups.push({ idx: g, dataIndex: k, value: h, displayValue: j, startRow: c, cnt: 1, summary: [] }); f.lastvalues[g] = h; f.counters[g] = { cnt: 1, pos: f.groups.length - 1, summary: a.extend(true, [], f.summary) }; a.each(f.counters[g].summary, function () { if (a.isFunction(this.st)) this.v = this.st.call(i, this.v, this.nm, b); else this.v = a(i).jqGrid("groupingCalculations.handler", this.st, this.v, this.nm, this.sr, this.srt, b) }); f.groups[f.counters[g].pos].summary = f.counters[g].summary } else if (typeof h !== "object" && (a.isArray(f.isInTheSameGroup) && a.isFunction(f.isInTheSameGroup[g]) ? !f.isInTheSameGroup[g].call(i, f.lastvalues[g], h, g, f) : f.lastvalues[g] !== h)) { f.groups.push({ idx: g, dataIndex: k, value: h, displayValue: j, startRow: c, cnt: 1, summary: [] }); f.lastvalues[g] = h; m = 1; f.counters[g] = { cnt: 1, pos: f.groups.length - 1, summary: a.extend(true, [], f.summary) }; a.each(f.counters[g].summary, function () { if (a.isFunction(this.st)) this.v = this.st.call(i, this.v, this.nm, b); else this.v = a(i).jqGrid("groupingCalculations.handler", this.st, this.v, this.nm, this.sr, this.srt, b) }); f.groups[f.counters[g].pos].summary = f.counters[g].summary } else if (m === 1) { f.groups.push({ idx: g, dataIndex: k, value: h, displayValue: j, startRow: c, cnt: 1, summary: [] }); f.lastvalues[g] = h; f.counters[g] = { cnt: 1, pos: f.groups.length - 1, summary: a.extend(true, [], f.summary) }; a.each(f.counters[g].summary, function () { if (a.isFunction(this.st)) this.v = this.st.call(i, this.v, this.nm, b); else this.v = a(i).jqGrid("groupingCalculations.handler", this.st, this.v, this.nm, this.sr, this.srt, b) }); f.groups[f.counters[g].pos].summary = f.counters[g].summary } else { f.counters[g].cnt += 1; f.groups[f.counters[g].pos].cnt = f.counters[g].cnt; a.each(f.counters[g].summary, function () { if (a.isFunction(this.st)) this.v = this.st.call(i, this.v, this.nm, b); else this.v = a(i).jqGrid("groupingCalculations.handler", this.st, this.v, this.nm, this.sr, this.srt, b) }); f.groups[f.counters[g].pos].summary = f.counters[g].summary } } d.push(e) }); return d }, groupingToggle: function (b) { this.each(function () { var d = this, m = d.p.groupingView, f = b.split("_"), e, n = parseInt(f[f.length - 2], 10); f.splice(f.length - 2, 2); var j = f.join("_"), g = m.minusicon, i = m.plusicon, o = a("#" + a.jgrid.jqID(b)), c = o.length ? o[0].nextSibling : null, l = a("#" + a.jgrid.jqID(b) + " span.tree-wrap-" + d.p.direction), k = false, h; if (l.hasClass(g)) { if (m.showSummaryOnHide) { if (c) while (c) { if (a(c).hasClass("jqfoot")) { var p = parseInt(a(c).attr("jqfootlevel"), 10); if (p <= n) break } a(c).hide(); c = c.nextSibling } } else if (c) while (c) { e = c.className.indexOf(j); if (e !== -1) if (parseInt(c.className.substring(e + j.length + 1), 10) <= n) break; a(c).hide(); c = c.nextSibling } l.removeClass(g).addClass(i); k = true } else { if (c) while (c) { e = c.className.indexOf(j); if (e !== -1) if (parseInt(c.className.substring(e + j.length + 1), 10) <= n) break; a(c).show(); h = a(c).find("span.tree-wrap-" + d.p.direction); h && a(h).hasClass(i) && a(h).removeClass(i).addClass(g); c = c.nextSibling } l.removeClass(i).addClass(g) } a(d).triggerHandler("jqGridGroupingClickGroup", [b, k]); a.isFunction(d.p.onClickGroup) && d.p.onClickGroup.call(d, b, k) }); return false }, groupingRender: function (c, b) { return this.each(function () { var e = this, d = e.p.groupingView, f = "", n = "", h, i, m = d.groupCollapse ? d.plusicon : d.minusicon, k, j = [], o = d.groupField.length; m += " tree-wrap-" + e.p.direction; a.each(e.p.colModel, function (b, c) { for (var a = 0; a < o; a++) if (d.groupField[a] === c.name) { j[a] = b; break } }); var g = 0; function p(c, e, a) { var d = false, b; if (e === 0) d = a[c]; else { var f = a[c].idx; if (f === 0) d = a[c]; else for (b = c; b >= 0; b--) if (a[b].idx === f - e) { d = a[b]; break } } return d } var l = a.makeArray(d.groupSummary); l.reverse(); a.each(d.groups, function (u, q) { g++; i = e.p.id + "ghead_" + q.idx; h = i + "_" + u; n = "<span style='cursor:pointer;' class='ui-icon " + m + "' onclick=\"jQuery('#" + a.jgrid.jqID(e.p.id) + "').jqGrid('groupingToggle','" + h + "');return false;\"></span>"; try { if (a.isArray(d.formatDisplayField) && a.isFunction(d.formatDisplayField[q.idx])) q.displayValue = d.formatDisplayField[q.idx].call(e, q.displayValue, q.value, e.p.colModel[j[q.idx]], q.idx, d); k = e.formatter(h, q.displayValue, j[q.idx], q.value) } catch (G) { k = q.displayValue } f += '<tr id="' + h + '" role="row" class= "ui-widget-content jqgroup ui-row-' + e.p.direction + " " + i + '"><td style="padding-left:' + q.idx * 12 + 'px;" colspan="' + b + '">' + n + a.jgrid.template(d.groupText[q.idx], k, q.cnt, q.summary) + "</td></tr>"; var E = o - 1 === q.idx; if (E) { for (var w = d.groups[u + 1], r, s, F = w !== undefined ? d.groups[u + 1].startRow : c.length, x = q.startRow; x < F; x++) f += c[x].join(""); var t; if (w !== undefined) { for (t = 0; t < d.groupField.length; t++) if (w.dataIndex === d.groupField[t]) break; g = d.groupField.length - t } for (s = 0; s < g; s++) { if (!l[s]) continue; var D = ""; if (d.groupCollapse && !d.showSummaryOnHide) D = ' style="display:none;"'; f += "<tr" + D + ' jqfootlevel="' + (q.idx - s) + '" role="row" class="ui-widget-content jqfoot ui-row-' + e.p.direction + '">'; var B = p(u, s, d.groups), v = e.p.colModel, y, C = B.cnt; for (r = 0; r < b; r++) { var z = "<td " + e.formatCol(r, 1, "") + ">&#160;</td>", A = "{0}"; a.each(B.summary, function () { if (this.nm === v[r].name) { if (v[r].summaryTpl) A = v[r].summaryTpl; if (typeof this.st === "string" && this.st.toLowerCase() === "avg") if (this.v && C > 0) this.v = this.v / C; try { y = e.formatter("", this.v, r, this) } catch (b) { y = this.v } z = "<td " + e.formatCol(r, 1, "") + ">" + a.jgrid.format(A, y) + "</td>"; return false } }); f += z } f += "</tr>" } g = t } }); a("#" + a.jgrid.jqID(e.p.id) + " tbody:first").append(f); f = null }) }, groupingGroupBy: function (b, c) { return this.each(function () { var f = this; if (typeof b === "string") b = [b]; var e = f.p.groupingView; f.p.grouping = true; if (e.visibiltyOnNextGrouping === undefined) e.visibiltyOnNextGrouping = []; for (var d = 0; d < e.groupField.length; d++) !e.groupColumnShow[d] && e.visibiltyOnNextGrouping[d] && a(f).jqGrid("showCol", e.groupField[d]); for (d = 0; d < b.length; d++) e.visibiltyOnNextGrouping[d] = a("#" + a.jgrid.jqID(f.p.id) + "_" + a.jgrid.jqID(b[d])).is(":visible"); f.p.groupingView = a.extend(f.p.groupingView, c || {}); e.groupField = b; a(f).trigger("reloadGrid") }) }, groupingRemove: function (b) { return this.each(function () { var c = this; if (b === undefined) b = true; c.p.grouping = false; if (b === true) { for (var d = c.p.groupingView, e = 0; e < d.groupField.length; e++) !d.groupColumnShow[e] && d.visibiltyOnNextGrouping[e] && a(c).jqGrid("showCol", d.groupField); a("tr.jqgroup, tr.jqfoot", "#" + a.jgrid.jqID(c.p.id) + " tbody:first").remove(); a("tr.jqgrow:hidden", "#" + a.jgrid.jqID(c.p.id) + " tbody:first").show() } else a(c).trigger("reloadGrid") }) }, groupingCalculations: { handler: function (g, a, b, f, i, c) { var e = { sum: function () { return parseFloat(a || 0) + parseFloat(c[b] || 0) }, min: function () { return a === "" ? parseFloat(c[b] || 0) : Math.min(parseFloat(a), parseFloat(c[b] || 0)) }, max: function () { return a === "" ? parseFloat(c[b] || 0) : Math.max(parseFloat(a), parseFloat(c[b] || 0)) }, count: function () { if (a === "") a = 0; return c.hasOwnProperty(b) ? a + 1 : 0 }, avg: function () { return e.sum() } }; if (!e[g]) throw "jqGrid Grouping No such method: " + g; var d = e[g](); if (f != null) if (i === "fixed") d = d.toFixed(f); else { var h = Math.pow(10, f); d = Math.round(d * h) / h } return d } } }) })(jQuery); (function (a) { "use strict"; a.jgrid.extend({ jqGridImport: function (b) { b = a.extend({ imptype: "xml", impstring: "", impurl: "", mtype: "GET", impData: {}, xmlGrid: { config: "roots>grid", data: "roots>rows" }, jsonGrid: { config: "grid", data: "data" }, ajaxOptions: {} }, b || {}); return this.each(function () { var c = this, f = function (f, g) { var j = a(g.xmlGrid.config, f)[0], i = a(g.xmlGrid.data, f)[0], b, d, e; if (xmlJsonClass.xml2json && a.jgrid.parse) { b = xmlJsonClass.xml2json(j, " "); b = a.jgrid.parse(b); for (e in b) if (b.hasOwnProperty(e)) d = b[e]; if (i) { var h = b.grid.datatype; b.grid.datatype = "xmlstring"; b.grid.datastr = f; a(c).jqGrid(d).jqGrid("setGridParam", { datatype: h }) } else a(c).jqGrid(d); b = null; d = null } else alert("xml2json or parse are not present") }, e = function (d, h) { if (d && typeof d === "string") { var e = false; if (a.jgrid.useJSON) { a.jgrid.useJSON = false; e = true } var g = a.jgrid.parse(d); if (e) a.jgrid.useJSON = true; var b = g[h.jsonGrid.config], f = g[h.jsonGrid.data]; if (f) { var i = b.datatype; b.datatype = "jsonstring"; b.datastr = f; a(c).jqGrid(b).jqGrid("setGridParam", { datatype: i }) } else a(c).jqGrid(b) } }; switch (b.imptype) { case "xml": a.ajax(a.extend({ url: b.impurl, type: b.mtype, data: b.impData, dataType: "xml", complete: function (d, e) { if (e === "success") { f(d.responseXML, b); a(c).triggerHandler("jqGridImportComplete", [d, b]); a.isFunction(b.importComplete) && b.importComplete(d) } d = null } }, b.ajaxOptions)); break; case "xmlstring": if (b.impstring && typeof b.impstring === "string") { var d = a.parseXML(b.impstring); if (d) { f(d, b); a(c).triggerHandler("jqGridImportComplete", [d, b]); a.isFunction(b.importComplete) && b.importComplete(d); b.impstring = null } d = null } break; case "json": a.ajax(a.extend({ url: b.impurl, type: b.mtype, data: b.impData, dataType: "json", complete: function (d) { try { e(d.responseText, b); a(c).triggerHandler("jqGridImportComplete", [d, b]); a.isFunction(b.importComplete) && b.importComplete(d) } catch (f) { } d = null } }, b.ajaxOptions)); break; case "jsonstring": if (b.impstring && typeof b.impstring === "string") { e(b.impstring, b); a(c).triggerHandler("jqGridImportComplete", [b.impstring, b]); a.isFunction(b.importComplete) && b.importComplete(b.impstring); b.impstring = null } } }) }, jqGridExport: function (b) { b = a.extend({ exptype: "xmlstring", root: "grid", ident: "\t" }, b || {}); var c = null; this.each(function () { if (!this.grid) return; var e, d = a.extend(true, {}, a(this).jqGrid("getGridParam")); if (d.rownumbers) { d.colNames.splice(0, 1); d.colModel.splice(0, 1) } if (d.multiselect) { d.colNames.splice(0, 1); d.colModel.splice(0, 1) } if (d.subGrid) { d.colNames.splice(0, 1); d.colModel.splice(0, 1) } d.knv = null; if (d.treeGrid) for (e in d.treeReader) if (d.treeReader.hasOwnProperty(e)) { d.colNames.splice(d.colNames.length - 1); d.colModel.splice(d.colModel.length - 1) } switch (b.exptype) { case "xmlstring": c = "<" + b.root + ">" + xmlJsonClass.json2xml(d, b.ident) + "</" + b.root + ">"; break; case "jsonstring": c = "{" + xmlJsonClass.toJson(d, b.root, b.ident, false) + "}"; if (d.postData.filters !== undefined) { c = c.replace(/filters":"/, 'filters":'); c = c.replace(/}]}"/, "}]}") } } }); return c }, excelExport: function (b) { b = a.extend({ exptype: "remote", url: null, oper: "oper", tag: "excel", exportOptions: {} }, b || {}); return this.each(function () { if (!this.grid) return; var c; if (b.exptype === "remote") { var e = a.extend({}, this.p.postData); e[b.oper] = b.tag; var d = jQuery.param(e); if (b.url.indexOf("?") !== -1) c = b.url + "&" + d; else c = b.url + "?" + d; window.location = c } }) } }) })(jQuery); (function ($) { "use strict"; if ($.jgrid.msie && $.jgrid.msiever() === 8) $.expr[":"].hidden = function (a) { return a.offsetWidth === 0 || a.offsetHeight === 0 || a.style.display === "none" }; $.jgrid._multiselect = false; if ($.ui) if ($.ui.multiselect) { if ($.ui.multiselect.prototype._setSelected) { var setSelected = $.ui.multiselect.prototype._setSelected; $.ui.multiselect.prototype._setSelected = function (b, a) { var d = setSelected.call(this, b, a); if (a && this.selectedList) { var c = this.element; this.selectedList.find("li").each(function () { $(this).data("optionLink") && $(this).data("optionLink").remove().appendTo(c) }) } return d } } if ($.ui.multiselect.prototype.destroy) $.ui.multiselect.prototype.destroy = function () { this.element.show(); this.container.remove(); if ($.Widget === undefined) $.widget.prototype.destroy.apply(this, arguments); else $.Widget.prototype.destroy.apply(this, arguments) }; $.jgrid._multiselect = true } $.jgrid.extend({ sortableColumns: function (a) { return this.each(function () { var b = this, d = $.jgrid.jqID(b.p.id); function e() { b.p.disableClick = true } var c = { tolerance: "pointer", axis: "x", scrollSensitivity: "1", items: ">th:not(:has(#jqgh_" + d + "_cb,#jqgh_" + d + "_rn,#jqgh_" + d + "_subgrid),:hidden)", placeholder: { element: function (a) { return $(document.createElement(a[0].nodeName)).addClass(a[0].className + " ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0] }, update: function (a, b) { b.height(a.currentItem.innerHeight() - parseInt(a.currentItem.css("paddingTop") || 0, 10) - parseInt(a.currentItem.css("paddingBottom") || 0, 10)); b.width(a.currentItem.innerWidth() - parseInt(a.currentItem.css("paddingLeft") || 0, 10) - parseInt(a.currentItem.css("paddingRight") || 0, 10)) } }, update: function (i, g) { var h = $(g.item).parent(), f = $(">th", h), d = b.p.colModel, c = {}, e = b.p.id + "_"; $.each(d, function (a) { c[this.name] = a }); var a = []; f.each(function () { var b = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(e, ""); c.hasOwnProperty(b) && a.push(c[b]) }); $(b).jqGrid("remapColumns", a, true, true); $.isFunction(b.p.sortable.update) && b.p.sortable.update(a); setTimeout(function () { b.p.disableClick = false }, 50) } }; if (b.p.sortable.options) $.extend(c, b.p.sortable.options); else if ($.isFunction(b.p.sortable)) b.p.sortable = { update: b.p.sortable }; if (c.start) { var f = c.start; c.start = function (b, a) { e(); f.call(this, b, a) } } else c.start = e; if (b.p.sortable.exclude) c.items += ":not(" + b.p.sortable.exclude + ")"; a.sortable(c).data("sortable").floating = true }) }, columnChooser: function (a) { var b = this; if ($("#colchooser_" + $.jgrid.jqID(b[0].p.id)).length) return; var d = $('<div id="colchooser_' + b[0].p.id + '" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>'), c = $("select", d); function j(b, a, e) { if (a >= 0) { var c = b.slice(), d = c.splice(a, Math.max(b.length - a, a)); if (a > b.length) a = b.length; c[a] = e; return c.concat(d) } } a = $.extend({ width: 420, height: 240, classname: null, done: function (a) { a && b.jqGrid("remapColumns", a, true) }, msel: "multiselect", dlog: "dialog", dialog_opts: { minWidth: 470 }, dlog_opts: function (a) { var b = {}; b[a.bSubmit] = function () { a.apply_perm(); a.cleanup(false) }; b[a.bCancel] = function () { a.cleanup(true) }; return $.extend(true, { buttons: b, close: function () { a.cleanup(true) }, modal: a.modal || false, resizable: a.resizable || true, width: a.width + 20 }, a.dialog_opts || {}) }, apply_perm: function () { $("option", c).each(function () { if (this.selected) b.jqGrid("showCol", e[this.value].name); else b.jqGrid("hideCol", e[this.value].name) }); var d = []; $("option:selected", c).each(function () { d.push(parseInt(this.value, 10)) }); $.each(d, function () { delete g[e[parseInt(this, 10)].name] }); $.each(g, function () { var a = parseInt(this, 10); d = j(d, a, a) }); a.done && a.done.call(b, d) }, cleanup: function (e) { f(a.dlog, d, "destroy"); f(a.msel, c, "destroy"); d.remove(); e && a.done && a.done.call(b) }, msel_opts: {} }, $.jgrid.col, a || {}); if ($.ui) if ($.ui.multiselect) if (a.msel === "multiselect") { if (!$.jgrid._multiselect) { alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!"); return } a.msel_opts = $.extend($.ui.multiselect.defaults, a.msel_opts) } a.caption && d.attr("title", a.caption); if (a.classname) { d.addClass(a.classname); c.addClass(a.classname) } if (a.width) { $(">div", d).css({ width: a.width, margin: "0 auto" }); c.css("width", a.width) } if (a.height) { $(">div", d).css("height", a.height); c.css("height", a.height - 10) } var e = b.jqGrid("getGridParam", "colModel"), i = b.jqGrid("getGridParam", "colNames"), g = {}, h = []; c.empty(); $.each(e, function (a) { g[this.name] = a; if (this.hidedlg) { !this.hidden && h.push(a); return } c.append("<option value='" + a + "' " + (this.hidden ? "" : "selected='selected'") + ">" + $.jgrid.stripHtml(i[a]) + "</option>") }); function f(a, b) { if (!a) return; if (typeof a === "string") $.fn[a] && $.fn[a].apply(b, $.makeArray(arguments).slice(2)); else $.isFunction(a) && a.apply(b, $.makeArray(arguments).slice(2)) } var k = $.isFunction(a.dlog_opts) ? a.dlog_opts.call(b, a) : a.dlog_opts; f(a.dlog, d, k); var l = $.isFunction(a.msel_opts) ? a.msel_opts.call(b, a) : a.msel_opts; f(a.msel, c, l) }, sortableRows: function (a) { return this.each(function () { var b = this; if (!b.grid) return; if (b.p.treeGrid) return; if ($.fn.sortable) { a = $.extend({ cursor: "move", axis: "y", items: ".jqgrow" }, a || {}); if (a.start && $.isFunction(a.start)) { a._start_ = a.start; delete a.start } else a._start_ = false; if (a.update && $.isFunction(a.update)) { a._update_ = a.update; delete a.update } else a._update_ = false; a.start = function (e, c) { $(c.item).css("border-width", "0px"); $("td", c.item).each(function (a) { this.style.width = b.grid.cols[a].style.width }); if (b.p.subGrid) { var d = $(c.item).attr("id"); try { $(b).jqGrid("collapseSubGridRow", d) } catch (f) { } } a._start_ && a._start_.apply(this, [e, c]) }; a.update = function (d, c) { $(c.item).css("border-width", ""); b.p.rownumbers === true && $("td.jqgrid-rownum", b.rows).each(function (a) { $(this).html(a + 1 + (parseInt(b.p.page, 10) - 1) * parseInt(b.p.rowNum, 10)) }); a._update_ && a._update_.apply(this, [d, c]) }; $("tbody:first", b).sortable(a); $("tbody:first", b).disableSelection() } }) }, gridDnD: function (a) { return this.each(function () { var b = this, c, e; if (!b.grid) return; if (b.p.treeGrid) return; if (!$.fn.draggable || !$.fn.droppable) return; function d() { var a = $.data(b, "dnd"); $("tr.jqgrow:not(.ui-draggable)", b).draggable($.isFunction(a.drag) ? a.drag.call($(b), a) : a.drag) } var f = "<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>"; $("#jqgrid_dnd")[0] === undefined && $("body").append(f); if (typeof a === "string" && a === "updateDnD" && b.p.jqgdnd === true) { d(); return } a = $.extend({ drag: function (a) { return $.extend({ start: function (f, d) { var c, e; if (b.p.subGrid) { e = $(d.helper).attr("id"); try { $(b).jqGrid("collapseSubGridRow", e) } catch (g) { } } for (c = 0; c < $.data(b, "dnd").connectWith.length; c++) $($.data(b, "dnd").connectWith[c]).jqGrid("getGridParam", "reccount") === 0 && $($.data(b, "dnd").connectWith[c]).jqGrid("addRowData", "jqg_empty_row", {}); d.helper.addClass("ui-state-highlight"); $("td", d.helper).each(function (a) { this.style.width = b.grid.headers[a].width + "px" }); a.onstart && $.isFunction(a.onstart) && a.onstart.call($(b), f, d) }, stop: function (f, e) { var d, c; if (e.helper.dropped && !a.dragcopy) { c = $(e.helper).attr("id"); if (c === undefined) c = $(this).attr("id"); $(b).jqGrid("delRowData", c) } for (d = 0; d < $.data(b, "dnd").connectWith.length; d++) $($.data(b, "dnd").connectWith[d]).jqGrid("delRowData", "jqg_empty_row"); a.onstop && $.isFunction(a.onstop) && a.onstop.call($(b), f, e) } }, a.drag_opts || {}) }, drop: function (a) { return $.extend({ accept: function (b) { if (!$(b).hasClass("jqgrow")) return b; var a = $(b).closest("table.ui-jqgrid-btable"); if (a.length > 0 && $.data(a[0], "dnd") !== undefined) { var c = $.data(a[0], "dnd").connectWith; return $.inArray("#" + $.jgrid.jqID(this.id), c) !== -1 ? true : false } return false }, drop: function (l, d) { if (!$(d.draggable).hasClass("jqgrow")) return; var m = $(d.draggable).attr("id"), c = d.draggable.parent().parent().jqGrid("getRowData", m); if (!a.dropbyname) { var i = 0, k = {}, f, h, j = $("#" + $.jgrid.jqID(this.id)).jqGrid("getGridParam", "colModel"); try { for (h in c) if (c.hasOwnProperty(h)) { f = j[i].name; if (!(f === "cb" || f === "rn" || f === "subgrid")) if (c.hasOwnProperty(h) && j[i]) k[f] = c[h]; i++ } c = k } catch (n) { } } d.helper.dropped = true; if (a.beforedrop && $.isFunction(a.beforedrop)) { var g = a.beforedrop.call(this, l, d, c, $("#" + $.jgrid.jqID(b.p.id)), $(this)); if (g !== undefined && g !== null && typeof g === "object") c = g } if (d.helper.dropped) { var e; if (a.autoid) if ($.isFunction(a.autoid)) e = a.autoid.call(this, c); else { e = Math.ceil(Math.random() * 1e3); e = a.autoidprefix + e } $("#" + $.jgrid.jqID(this.id)).jqGrid("addRowData", e, c, a.droppos) } a.ondrop && $.isFunction(a.ondrop) && a.ondrop.call(this, l, d, c) } }, a.drop_opts || {}) }, onstart: null, onstop: null, beforedrop: null, ondrop: null, drop_opts: { activeClass: "ui-state-active", hoverClass: "ui-state-hover" }, drag_opts: { revert: "invalid", helper: "clone", cursor: "move", appendTo: "#jqgrid_dnd", zIndex: 5e3 }, dragcopy: false, dropbyname: false, droppos: "first", autoid: true, autoidprefix: "dnd_" }, a || {}); if (!a.connectWith) return; a.connectWith = a.connectWith.split(","); a.connectWith = $.map(a.connectWith, function (a) { return $.trim(a) }); $.data(b, "dnd", a); b.p.reccount !== 0 && !b.p.jqgdnd && d(); b.p.jqgdnd = true; for (c = 0; c < a.connectWith.length; c++) { e = a.connectWith[c]; $(e).droppable($.isFunction(a.drop) ? a.drop.call($(b), a) : a.drop) } }) }, gridResize: function (opts) { return this.each(function () { var $t = this, gID = $.jgrid.jqID($t.p.id); if (!$t.grid || !$.fn.resizable) return; opts = $.extend({}, opts || {}); if (opts.alsoResize) { opts._alsoResize_ = opts.alsoResize; delete opts.alsoResize } else opts._alsoResize_ = false; if (opts.stop && $.isFunction(opts.stop)) { opts._stop_ = opts.stop; delete opts.stop } else opts._stop_ = false; opts.stop = function (b, a) { $($t).jqGrid("setGridParam", { height: $("#gview_" + gID + " .ui-jqgrid-bdiv").height() }); $($t).jqGrid("setGridWidth", a.size.width, opts.shrinkToFit); opts._stop_ && opts._stop_.call($t, b, a) }; if (opts._alsoResize_) { var optstest = "{'#gview_" + gID + " .ui-jqgrid-bdiv':true,'" + opts._alsoResize_ + "':true}"; opts.alsoResize = eval("(" + optstest + ")") } else opts.alsoResize = $(".ui-jqgrid-bdiv", "#gview_" + gID); delete opts._alsoResize_; $("#gbox_" + gID).resizable(opts) }) } }) })(jQuery); function tableToGrid(a, b) { jQuery(a).each(function () { if (this.grid) return; jQuery(this).width("99%"); var n = jQuery(this).width(), k = jQuery("tr td:first-child input[type=checkbox]:first", jQuery(this)), m = jQuery("tr td:first-child input[type=radio]:first", jQuery(this)), f = k.length > 0, l = !f && m.length > 0, j = f || l, d = [], h = []; jQuery("th", jQuery(this)).each(function () { if (d.length === 0 && j) { d.push({ name: "__selection__", index: "__selection__", width: 0, hidden: true }); h.push("__selection__") } else { d.push({ name: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"), index: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"), width: jQuery(this).width() || 150 }); h.push(jQuery(this).html()) } }); var e = [], i = [], g = []; jQuery("tbody > tr", jQuery(this)).each(function () { var b = {}, a = 0; jQuery("td", jQuery(this)).each(function () { if (a === 0 && j) { var c = jQuery("input", jQuery(this)), f = c.attr("value"); i.push(f || e.length); c.is(":checked") && g.push(f); b[d[a].name] = c.attr("value") } else b[d[a].name] = jQuery(this).html(); a++ }); a > 0 && e.push(b) }); jQuery(this).empty(); jQuery(this).addClass("scroll"); jQuery(this).jqGrid(jQuery.extend({ datatype: "local", width: n, colNames: h, colModel: d, multiselect: f }, b || {})); for (var a = 0; a < e.length; a++) { var c = null; if (i.length > 0) { c = i[a]; if (c && c.replace) c = encodeURIComponent(c).replace(/[.\-%]/g, "_") } if (c === null) c = a + 1; jQuery(this).jqGrid("addRowData", c, e[a]) } for (a = 0; a < g.length; a++) jQuery(this).jqGrid("setSelection", g[a]) }) }